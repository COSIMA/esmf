================================================================================

         README file for ESMF build_config directory.

================================================================================

The files in this directory are customizable makefile fragments
for the ESMF build system.  


ESMF Build System Overview
--------------------------

The ESMF build system consists of:
1. A set of makefiles included in the source code at each directory level.
2. A set of makefile fragment files designed to be used by the source 
   code makefiles.  Makefile fragment files are files that contain 
   makefile syntax defining build rules and actions, but do not 
   constitute a complete build system.

There are two kinds of makefile fragment files that are used by the build.  
The first is the file common.mk, located in the build directory.  This file 
defines build rules and variables that are used across all platforms.  Users 
should have no need to edit it.

The second type of makefile fragment is customizable.  There are a set of
these fragments located in the build_config directory.  The customizable
fragments specify makefile settings for a particular architecture and in 
some cases specific compilers and machines.  The common.mk file includes 
one of these customizable fragments based on environment variable settings.
  
Customizable makefile fragment directories follow this naming convention:

     build_config/ESMF_ARCH.ESMF_COMPILER.ESMF_SITE

ESMF_ARCH, ESMF_COMPILER and ESMF_SITE are three environment variables
that are either set by the user or are given default values in
common.mk.  These variables are described in detail in the Environment 
Variables section that immediately follows this one.

The ESMF_ARCH value used for the first part of the filename specifies the
architecture that the file should be used for.

The middle part of a makefile fragment name, ESMF_COMPILER, represents 
the desired compiler.  

The ESMF_SITE value used for the last part of the filename will
either have the value default or a machine's name.  If default is used
then the file in most cases can be used with any machine of the
architecture given by ESMF_ARCH.  If a machine's name is used, then
that particular machine uses makefile settings other then the default
settings for its architecture.

The ESMF Users Guide, section 6.2.3, has an exhaustive list of all
platforms and options for which we provide makefiles, and also a list
of all platform configurations which are tested regularly and fully
supported.  The Downloads and Documentation link on the ESMF home page
also lists the platform configurations which are tested regularly
and fully supported.


Customizing the ESMF Build
--------------------------

The build system can be ported to other Unix platforms by adding new
makefile fragments and configuration include files.  The new fragment 
has to follow the naming convention used by the existing fragments and 
be created in build_config.  The new fragment also has to define the same
makefile variables as the existing files.

The ESMC_Conf.h and ESMF_Conf.inc include files are used to define machine 
attributes within C/C++ and Fortran source code.  Like fragment files, 
new files have to define the same machine attributes as existing files.  
If a machine supports both 32 and 64 bit precision, then the files must have
a conditional section for any values which are dependent on the precision.


Environment Variables
---------------------

 ESMF_ARCH         Variable describing the current
                   machine architecture.  Default value
                   is value returned by uname -s.

 ESMF_BOPT         Variable specifying that the build system
                   use either debugging  or optimization options.
                   Value of g specifies the debugging options.
                   Value of O (capital oh) specifies optimization
                   options.  Default value is O.
 
 ESMF_COMM         Defines which MPI communications library to use.
                   Many times a machine will come with its own MPI
                   library and in those cases the default setting
                   will be mpi.  Otherwise the default setting will be
                   mpiuni so that the mpiuni library will be used.
                   That is the case for Darwin and Linux platforms.
                   Other possible settings are mpich and lam.

 ESMF_COMPILER     Variable specifying which compiler to use.  Value
                   can be default, absoft, intel, lahey, nag, pgi or xlf. 
                   If the value is default or ESMF_COMPILER is 
                   left unset, then the default compiler 
                   will be used.  On systems which usually come with a
                   single vendor-supplied compiler, the default is to use
                   this compiler.  On systems like Linux clusters where
                   there is no single vendor compiler installed on all
                   systems, you will generally want to set this.
                   The default for Linux systems is lahey and on
                   Darwin (Mac OS X) systems it is absoft.

 ESMF_C_COMPILER   Variable specifying which C/C++ compiler to use.
                   In most cases this should not be set; the default
                   is to use the vendor-supplied compilers on those
                   systems which normally come with a single development
                   environment; on other systems like Linux clusters, the
                   default is to use the ESMF_COMPILER setting.  However,
                   some Fortran compilers support linking with C and C++
                   code compiled with the GNU compilers; in these cases,
                   you can set this variable to the value gnu in order to
                   compile with the vendor Fortran compiler and the 
                   GNU C/C++.   This option is only supported for
                   ESMF_ARCH=Darwin, ESMF_COMPILER=xlf, and ESMF_ARCH=Linux,
                   ESMF_COMPILER=intel.

 ESMF_C_LIBRARY    Variable specifying which C/C++ libraries to link with.
                   In most cases this should not be set; the default is to
                   use the vendor-supplied libraries on those systems which
                   normally come with a single development environment; on
                   other systems like Linux clusters, the default is to use
                   the ESMF_COMPILER setting.  However, some vendor compilers
                   support compiling with their compilers but linking with
                   the GNU C/C++ libraries.  In these cases, you can set this
                   variable to the value gnu in order to link with the 
                   GNU C/C++ libraries.  This option is only supported for
                   ESMF_ARCH=Linux, ESMF_COMPILER=intel.

 ESMF_EXHAUSTIVE   The unit tests by default compile only a subset of the unit
                   tests.  If ESMF_EXHAUSTIVE is set to the value "ON", then when
                   compiling the unit tests, all tests will be included.  Note
                   that this is a compile time, not run time, option.

 ESMF_NO_IOCODE    The current release of the system is prepared to link with
                   the netCDF I/O libraries, but since the installation of the
                   libraries and include files varies widely from system to
                   system support for them is disabled by default.  To enable
                   I/O support, edit the build/common.mk file and comment out
                   the setting of both the CPPFLAG and environment variable.
                   Additional customization will be needed in the build_config
                   makefile fragments to point the framework to the location
                   of the include and library files.

 ESMF_PREC         Variable specifying the default pointer size.  
                   Value can be 32 or 64.  When possible the default 
                   value will be 64, otherwise it will be 32.

 ESMF_SITE         If ESMF_SITE is not set or has the value of
                   default, default build settings for the current machine
                   architecture and compiler will be used. Otherwise the 
                   setting will be used to select site-specific build files 
                   which have been configured for a particular location.   
                   See the CVS repository: 
                       http://sourceforge.net/projects/esmfcontrib/
                   for existing site files or to contribute new ones.

 ESMF_DIR or       See note below.
 ESMF_EVA_DIR or
 ESMF_IMPL_DIR

ESMF distributes multiple codes (e.g., ESMF source, Implementation Report
examples, ESMF Validation Suite) and this build is used to compile all
of them.

The top level directory path of the ESMF code being built must be specified
using an environment variable. The appropriate variable(s) to set are 
described in the top-level README file of the ESMF code you are trying to 
build.  For example, for the ESMF source this variable is ESMF_DIR.

Platform notes:
________________

Compaq alpha - Before running on the Compaq, you will need to set the
environment variable ESMF_PROJECT to a valid project number suitable
for the -P option on bsub. If you do not know what to set this to
first run with it unset and you should be prompted by the system for
valid values for your userid.

IBM rs6000 - Before running on rs6000 machines, you will need to set
an additional environment variable MP_RMPOOL to a valid node
allocation pool.  Usually this will be a value of 1.

Usage
-----

To link your application to the ESMF shared libraries refer to the 
link_rules file in the makefile fragment directories. The link_rules are 
provided only for the supported platforms. 


================================================================================
 $Id: README,v 1.18.2.3 2005/03/11 17:31:45 nscollins Exp $
Earth System Modeling Framework
Copyright 2002-2003, University Corporation for Atmospheric Research,
Massachusetts Institute of Technology, Geophysical Fluid Dynamics
Laboratory, University of Michigan, National Centers for Environmental
Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
NASA Goddard Space Flight Center.
Licensed under the GPL.
================================================================================

