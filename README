
================================================================================

                        README - ESMF v2.2.2 beta snapshot

                    Earth System Modeling Framework (ESMF)

 Earth System Modeling Framework
 Copyright 2002-2006, University Corporation for Atmospheric Research,
 Massachusetts Institute of Technology, Geophysical Fluid Dynamics
 Laboratory, University of Michigan, National Centers for Environmental
 Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
 NASA Goddard Space Flight Center.
 Licensed under the GPL.

================================================================================

Hello and welcome to the world of ESMF.


If you need to link your code with an already-built ESMF library, go to
the "LINKING" section below.


If you need to build the ESMF library, go to the "BUILDING" section below.
(If you just downloaded the ESMF tarball, it is source code and you will
have to build the library first.)


If you did not find a makefile for your platform, or the makefile did not
work for you, go to the "PORTING" section below.


If you are looking for more documentation, or higher-level information
about the ESMF project itself, go to the "MORE HELP" section below.


Please contact esmf_support@ucar.edu with any questions or problems.

================================================================================
================================================================================

LINKING applications with ESMF:
------------------------------

If you want to compile and link your application with an ESMF library
which has already been installed on your system, you will need to tell
the compiler where the ESMF module files and ESMF library files are located.
If this has already been documented by the installer of the ESMF library,
follow the directions given.  However, if not, then you must add the
correct compiler flags yourself.

You can do this in a variety of ways.  If you already have build scripts or
existing makefiles, you can explicitly add the correct compiler flags which
tell the compiler which directories to search for modules and which libraries
to include at link time.  The ESMF build process puts the modules and
libraries in separate directories depending on the options used to compile
the library.  Running 'gmake info' from the top of the ESMF install
directory will print out what flags need to be used.  The actual values
depend on having several environment variables set first, including ESMF_DIR
and those listed below.

If you do not have a makefile, or if you are willing to include a makefile
fragment from within your own makefile, an example makefile for user code can
be found in $ESMF_DIR/build/makefile.sample.  It in turn includes the
makefile fragment $ESMF_DIR/build/esmfuser.mk that sets the correct module
and library paths.

The sample makefile depends on a correctly set ESMF_DIR environment variable
that contains the path to the ESMF installation.  Other environment variables
which may need to be set depend on the platform.  The most likely ones are
briefly listed immediately below, but see the "BUILDING" section below for
more detailed information on what the variables are for and what values they
need to have.

ESMF_COMPILER - Will need to be set on all Linux systems, and on any other
                system which can have more than one type of compiler installed.

ESMF_PREC - If this system can run with both 32-bit and 64-bit executables,
            the default is 64 bits, but 32 can be selected with this variable.

ESMF_COMM - If a vendor-installed mpi package is not the only option for an
            MPI library (e.g. lam, mpich) this must be set.

ESMF_BOPT - The default is an optimized library, but a debuggable library
            can be selected by setting this to "g".


If you do not already have a makefile, copy the makefile.sample to your 
directory, edit it to replace the sample program with your own, make sure 
the proper environment variables are set, and type 'gmake'.

If your application already has an existing makefile, examine makefile.sample
to see if you can include the esmfuser.mk makefile fragment and then use the
ESMF rules and predefined makefile variables with your own rules and
variables.

Or you can use the sample makefile to print out the actual variable values
and transfer them into your own makefiles if you do not want to include
'esmfuser.mk' in your own makefile.

Another way to see the values of the compiler and linker flags is to cd to
$ESMF_DIR and run 'gmake info'.  This will print out the compiler names, the
compiler version information, the compiler flags, and link-time libraries
which have been selected by the various environment variable settings.


For help at the programming level, cd to $ESMF_DIR/quick_start for an
example application which uses ESMF.

================================================================================
================================================================================

BUILDING the ESMF library:
-------------------------

Quickstart information for the impatient:

 - Set required environment variable(s) (see next section below).

 - Type 'gmake' (the GNU make program) to build the ESMF library.

 - Type 'gmake check' to build and run the unit and system tests.

================================================================================

GNUmake
-------

The ESMF build system uses the GNU make program; it is generally named
'gmake' but may also be simply 'make' or 'gnumake' on some platforms.  We do
not use configure or autoconf;  the selection of various options is done by
setting environment variables before building the framework.


Environment Variables
---------------------

ESMF_DIR

The environment variable ESMF_DIR must be set to the full pathname of the 
top level ESMF directory before building the framework.  This is the only 
environment variable which is required to be set on all platforms under 
all conditions.

bsh/ksh example  :  export ESMF_DIR=/home/joeuser/esmf
csh/tcsh example :  setenv ESMF_DIR /home/joeuser/esmf

ESMF_COMPILER

Check the "Downloads & Documentation" link on the ESMF web site for a 
current list of supported platforms.

On any platform which does not come with a single vendor's Fortran compiler
installed (e.g. Linux or Mac OS X) ESMF_COMPILER must be set to select
which Fortran compiler has been installed.  To see possible values for 
ESMF_COMPILER, cd to $ESMF_DIR/build_config and list the directories there.
The first part of each directory name corresponds to the output of 
'uname -s' for this platform.  The second part contains possible values 
for ESMF_COMPILER.  Directories showing architectures and compilers
that are not listed on the "Downloads & Documentation" page may not
be complete or tested, and may not work correctly.  

ESMF_COMM

On multiprocessor systems with a vendor-supplied MPI communications library,
that is the default for communications and ESMF_COMM should not be set.  
For other systems, ESMF comes with with a single-processor MPI-bypass 
library which is the default.   To run multiprocessor applications
select an MPI implementation by setting ESMF_COMM to one of 'mpich' or
'lam' before building ESMF.  Additional valid values may exist; check the
release notes for the specific platform on the web site for more details.
If the MPI files are not installed in a system directory (e.g. /usr/lib)
also set MPI_HOME to the directory containing the include, lib, and bin dirs.

ESMF_SITE

The esmfcontrib repository contains makefiles which have already been 
customized for certain machines.  If one exists for your site and you wish
to use it, download the corresponding files into the build_contrib directory
and set ESMF_SITE to your location.  See the sourceforge site
http://sourceforge.net/projects/esmfcontrib  for more information.

ESMF_BOPT

To make a debuggable version of the library set ESMF_BOPT to 'g' before
building.  The default is 'O' (capital oh) which builds an optimized library.
If ESMF_BOPT is O, ESMF_OPTLEVEL can also be set to a numeric value 
between 0 and 4 to select a specific optimization level.

ESMF_PREC

If this system supports the building of both 32-bit and 64-bit executables
(pointer wordsize), this variable can be set to select which format to use.
Valid values are '32' or '64'.

LD_LIBRARY_PATH
ESMF_CXX_LIBRARY_PATH
ESMF_F90_LIBRARY_PATH

The first of these is often set by default in a system configuration file
and consists of colon-separated directories to search for library files.
The other two variables are ESMF specific, in the same colon-separated
format, which indicate where to search for C++ and F90 libraries,
respectively.  If the library builds successfully but none of the tests
can be linked, set these to indicate where to find the libraries needed.


There are other environment variables which can be set to customize
the ESMF make process.  The ESMF User's Guide documents these in detail.


Supported Makefile Targets
--------------------------

 info    : print out extensive system configuration information about what
           compilers, libraries, paths, flags, etc are being used

 clean   : remove all files built for this platform/compiler/wordsize.
 clobber : remove all files built for all architectures

 lib     : build the ESMF libraries only (default)
 check   : build and run the unit and system tests to validate the library
 all     : build the libraries, unit and system test, examples, and demos.
 doc     : build the documentation (requires specific latex macros packages
           and additional utilities).  See the ESMF web site for details;  it
           also contains pre-built pdf and html versions of all docs.

 unit_tests         : build and run the unit tests
 build_unit_tests   : build only
 run_unit_tests     : run only
 clean_unit_tests   : remove unit test executables only

 system_tests       : build and run the more comprehensive system tests
 build_system_tests : build only
 run_system_tests   : run only
 clean_system_tests : remove system test executables only

 examples           : build and run the examples
 build_examples     : build only
 run_examples       : run only
 clean_examples     : remove example executables only

 demos              : build and run the more comprehensive demos
 build_demos        : build only
 run_demos          : run only
 clean_demos        : remove demo executables only

 all_tests          : build and run all available tests and demos
 build_all_tests    : build only
 run_all_tests      : run only
 clean_all_tests    : remove all test and demo executables 

Note:

 The normal 'install' target is *NOT CURRENTLY SUPPORTED*.  Neither is the
 'uninstall' target.  They will be added in a future release of ESMF.



Directories
-----------

build_config:    Contains makefile fragments that can be customized by the 
                 user for specific platforms, compilers, and sites.
                 See the README in this directory for help with porting to
                 new platforms or compilers.

build:           Contains the generic portion of the build that a
                 user would not be expected to modify.  Also contains a 
                 sample user makefile.

scripts:         Contains scripts for testing and uniprocessor runs, and some
                 templates.

src:             Contains the source code.


The following directories are created during the building and testing stages:

lib:             Contains the ESMF libraries.

mod:             Contains the Fortran module files.

quick_start:     Contains skeleton application files to use as a template.

test:            Contains unit and system test executables and output.

examples:	 Contains examples executables and output.

doc:             Contains documentation (if built).

================================================================================
================================================================================

PORTING the ESMF library to a new platform and/or fixing build problems:
-----------------------------------------------------------------------


Overview
--------

If the build_config directory does not already contain a directory for your
platform/compiler, or if your platform/compiler is already supported but you
need to make some adaptions for your local system, this section should help
you get started.

The top level makefile is $ESMF_DIR/makefile.  It should not need to be
modified.   The bulk of the makefile rules and settings used by all platforms
and compilers is $ESMF_DIR/build/common.mk.  This makefile should not be
changed unless the modification is intended to apply to every system on which
ESMF is built.  This makefile is included by the top level makefile.

The per-platform makefile fragments which contain the settings which differ
for each system and compiler combination are in separate subdirectories under
$ESMF_DIR/build_config.

If you find the settings are close and you just need to add additional
information, or the changes are very specific to a particular system, you can
set ESMF_SITE to a value, and then the makefiles will include
$ESMF_DIR/build_config/platform.compiler.$ESMF_SITE/build_rules.mk, 
in addition to the default settings.

If you are supporting a completely new platform, make a new directory
following the naming pattern described below.  Copy the contents of the
closest existing match into that directory and start making changes.


Naming Conventions
------------------

In $ESMF_DIR/build_config, each compiler/platform combination has
a separate subdirectory which follows a 3-part naming convention:

The first part is the system name, which is set automatically using the 
output from 'uname -s'.  (The Cray X1 is an exception; the environment 
variable ESMF_ARCH should be set to 'Unicos' before building there.)

The second part is the compiler name for those platforms which support
compilers from different vendors.  For those systems which come with a
single vendor-supplied compiler, the compiler name is 'default'.  
The environment variable ESMF_COMPILER is used to select the compiler.

The last part of the name is the site-specific information.  The 'default'
directories contain files which are always read for the given 
architecture/compiler combination.  Then, in addition, if the environment
variable ESMF_SITE has a value, the corresponding directory will be 
searched after the default directory, for overrides and additional settings 
of directory names, values, flags, and other custom information.

Note that building on the SGI Altix is the same as the other Linux/Intel 
platforms, so set ESMF_COMPILER to 'intel' to use the files in the
Linux.intel.default directory.  Also for Altix, set ESMF_COMM to 'mpi'
and make sure ESMF_PREC is unset.  


File Descriptions
-----------------

Each default directory contains the following files:

 ESMC_Conf.h    : C++ preprocessor definitions needed for this platform.

 ESMF_Conf.inc  : values needed by both preprocessed F90 and C++; contains
                  information in a format parseable by both languages.         

 build_rules.mk : makefile fragment which is included by the main ESMF build
                  system and contains specific settings for this platform.


Additional Environment Variables
--------------------------------

See the ESMF User's Guide for a complete description of all the environment
variables supported by the build system.  However, for convienence, these
are the ones most likely to be necessary to adjust for new platforms:

On platforms that don't support Pthreads the following option is critical:

ESMF_PTHREADS     

The default value is ON. Setting this variable to OFF will turn ESMF's
pthreads features off and a stub header file will be used instead of the
Pthreads header during library compilation. This may be necessary on systems
that do not supply a working Pthreads implementation.


Compiling with or without netCDF I/O libraries:

NETCDF_LIB
NETCDF_INCLUDE    

By default the system does not try to link in the netCDF I/O libraries, but
the makefiles are prepared to include them if these variables are defined.
To use netCDF I/O, set both NETCDF_LIB and NETCDF_INCLUDE environment 
variables to the directories where the netCDF files have been installed.


Selecting a particular C compiler or Compiler Version:

ESMF_C_COMPILER         
ESMF_COMPILER_VERSION

If it is possible to compile Fortran code with different C compilers on this
platform (e.g. vendor-supplied C vs. gcc) then ESMF_C_COMPILER should control
this choice.   If there are incompatible changes in flags or link libs from
one version of the compiler to another, ESMF_COMPILER_VERSION should be set to
the numeric version to select the right case inside the makefiles.



Customizing an Existing Platform
--------------------------------

0. Check on http://sourceforge.net/projects/esmfcontrib -> CVS to be sure
   someone else has not already done this for your location or machine.

1. Set the environment variable ESMF_SITE to a string.  Suggested values are
   either your location (e.g. mit, cola) or a specific machine (e.g. bluesky).

2. Make a subdirectory named in the form:  system.compiler.site

3. Initially copy over only build_rules.mk from the corresponding default
   directory and remove all values which remain the same.  The build_rules.mk
   file in this site-specific directory will be included after the default
   one has been read, so only differences should be maintained.  

4. The ESMC_Conf.h and ESMF_conf.inc files do not need to be copied.

5. Test and get it working.

6. Post it back on the esmfcontrib sourceforge site for others to use.


Adding a New Platform
---------------------

1. Create a new subdirectory which follows the naming conventions.

2. Copy the contents of the most similar existing directory over to the 
   new directory.

3. Edit the build_rules.mk file to set the compiler names, flags, etc.
   Since ESMF contains both F90 and C++ code, generally the linkers are
   not able to simply link without being given additional libraries.

   Generally the C_CXXF90LIBS line (F90 libraries which need to be added to
   the link line when the link is being done with the C++ compiler), and the
   C_F90CXXLIBS line (C++ libs which need to be added when the link is being
   done with the F90 compiler) will need to be updated.  Running a C++ or F90
   link in a single language with -v (or whatever flag gives verbose output
   about the exact lines being executed) may help find what libraries are
   silently added by the compilers.

   The build_rules.mk file should only need to set C_xxx variables, which
   is the naming convention for platform specific values.  If you have to
   set a value which does not have a C_xxx name in order to compile, email
   esmf_support@ucar.edu to let us know.

4. Edit the ESMC_Conf.h file and look over the values.  (In reality, most
   of these variables are not actually used.)  However, see the ESMF_F90_PTR
   settings at the end of the file.  These *must* match the size of the 
   "dope vector" that the Fortran compiler uses on this machine to store
   information about Fortran arrays (rank, lower bounds, upper bounds, etc).  
   Put in a good guess (or leave them as-is) and build and run the unit tests.

   Ignore the output of all other unit tests until the ESMF_ArrayF90PtrUTest
   passes cleanly without complaining about byte count mismatches.  Adjust the
   sizes in the ESMC_Conf.h file until it passes, and then make clean and
   rebuild the entire library and test suite.

5. Once it is working, post it back on the esmfcontrib sourceforge site and
   email esmf_support@ucar.edu so we can include it in our next release.


Platform Specific Notes Related to makefiles and Environment Variables
----------------------------------------------------------------------

AIX systems - Those using LoadLeveler will generally need to set the
MP_RMPOOL environment variable, and generally 1 will be a good value.
See your own system admins for more help on this if 1 doesn't work.
Those systems running LSF instead of POE should set ESMF_BATCHQUEUE to 'lsf'
before executing; this will select the proper run script for the
tests and example programs.

OSF (HP/Compaq) systems - Our makefiles support those systems needing 
a -P project number argument to the bsub command in order to correctly 
charge system usage.  Set the ESMF_PROJECT environment variable to the
project name and it will be passed with -P into bsub when submitting a job.
See your own system admins for more info on whether this is needed.

Linux/intel - The intel compilers have an additional option on cross-language
linking.  You can compile with the intel C and Fortran compilers, but then
link with the gcc libraries.  To use this combination set ESMF_C_LIBRARY to gcc.

Darwin (Mac)/xlf - This compiler supports compiling and linking with either
gcc or xlc.  Use ESMF_C_COMPILER to control this choice.



And as always, you can email esmf_support@ucar.edu with any questions 
or problems.

================================================================================

MORE HELP:
---------

Information about the ESMF project can be found at the ESMF web site:
        http://www.esmf.ucar.edu

The latest documentation for the project can be found at:
        http://www.esmf.ucar.edu -> Downloads & Documentation

The ESMF User's Guide contains information on building and installing the ESMF.
The ESMF Reference Manual contains information on the architecture of the ESMF,
example code, and details of the APIs (Application Programming Interfaces).

The ESMF library source code is also available for download at:
	http://sourceforge.net/projects/esmf

Follow the directions on that web page to download a tarball and for
access to the ESMF CVS repository.  The Sourceforge site also contains 
the bugs, support, and task lists for ESMF.

Contributions from ESMF users are available at:
	http://sourceforge.net/projects/esmfcontrib

Please contact esmf_support@ucar.edu with any questions or problems.


================================================================================
 $Id: README,v 1.69.2.2 2006/06/19 20:34:04 theurich Exp $
