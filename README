================================================================================

                        README - ESMF v2.2.2 beta snapshot

                    Earth System Modeling Framework (ESMF)

 Earth System Modeling Framework
 Copyright 2002-2006, University Corporation for Atmospheric Research,
 Massachusetts Institute of Technology, Geophysical Fluid Dynamics
 Laboratory, University of Michigan, National Centers for Environmental
 Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
 NASA Goddard Space Flight Center.
 Licensed under the GNU GPL.

================================================================================

Hello and welcome to the world of ESMF.


If you need to compile and link your code against an already-built ESMF library,
go to the "APPLICATION" section below.


If you need to build the ESMF library, go to the "BUILDING" section below.
(If you just downloaded the ESMF tarball, it is source code and you will
have to build the library first.)


If you are looking for more documentation, or higher-level information
about the ESMF project itself, go to the "MORE HELP" section below.


Please contact <esmf_support@ucar.edu> with any questions or problems.

================================================================================
================================================================================

APPLICATION compilation and linking
-----------------------------------

If you want to compile and link your application against an ESMF library
which has already been installed on your system, you will need to tell
the compiler where the ESMF module files and ESMF library files are located.
If this has already been documented by the installer of the ESMF library,
follow the directions given. However, if not, then you must add the
correct compiler flags yourself.

You can do this in a variety of ways. If you already have build scripts or
existing makefiles, you can explicitly add the correct compiler flags which
tell the compiler which directories to search for modules and which libraries
to link against at link time. The ESMF build process puts the modules and
libraries in separate directories depending on the options used when building
the library. The directory containing the ESMF library file also contains a
makefile fragment named "esmf.mk". This makefile fragment defines several
variables indicating compiler options, include paths, library paths and
libraries necessary to compile and link against ESMF with Fortran or C++
compilers. Look at "esmf.mk" to pull out the necessary flags to compile and
link your own code against the installed ESMF library.

Alternatively, you may want to include "esmf.mk" from within your own build
system. All of the variables defined in "esmf.mk" have prefix "ESMF_"
as to prevent name space conflicts with users' makefiles. Notice that "esmf.mk"
is a self-contained file and is not affected by environment variables. It is
not necessary to set any ESMF_ environment variables to use an ESMF library
that has been installed on your system!

The $ESMF_DIR/application directory contains a sample ESMF code and Makefile
that demonstrate how to use "esmf.mk" for your own application.

For help at the programming level, cd to $ESMF_DIR/quick_start for an
example application which uses ESMF.

================================================================================
================================================================================

BUILDING the ESMF library
-------------------------

Steps of the build procedure:

 1) Set required environment variable(s) (see next section below).

 2) Type 'gmake' (the GNU make program) to build the ESMF library.

 3) Optionally test the ESMF library using any of the following targets:
    a) 'gmake unit_tests' to build and run the unit tests
    b) 'gmake system_tests' to build and run the system tests
    c) 'gmake check' to build and run the unit and system tests.
    d) 'gmake examples' to build and run the examples
    e) 'gmake demos' to build and run the demos
    f) 'gmake all_tests' to build and run all available tests and demos

================================================================================

GNUmake
-------

The ESMF build system uses the GNU make program; it is generally named
'gmake' but may also be simply 'make' or 'gnumake' on some platforms. We do
not use configure or autoconf; the selection of various options is done by
setting environment variables before building the framework.


Environment Variables
---------------------

The following environment variables are the most likely ones to be used
for the ESMF library build under normal circumstances. In most situations only
one or two environment variables must be set. There are other environment
variables which can be set to customize the ESMF library build process. The 
ESMF User's Guide documents these in detail.

ESMF_DIR

The environment variable ESMF_DIR must be set to the full pathname of the 
top level ESMF directory before building the framework. This is the only 
environment variable which is required to be set on all platforms under 
all conditions.

bsh/ksh example  :  export ESMF_DIR=/home/joeuser/esmf
csh/tcsh example :  setenv ESMF_DIR /home/joeuser/esmf

ESMF_BOPT

This environment variable controls the build option. To make a debuggable
version of the library set ESMF_BOPT to 'g' before building. The default is 'O'
(capital oh) which builds an optimized version of the library. If ESMF_BOPT is
O, ESMF_OPTLEVEL can also be set to a numeric value between 0 and 4 to select a
specific optimization level.

ESMF_COMM

On systems with a vendor-supplied MPI communications library the vendor library 
is chosen by default for communications and ESMF_COMM need not be set. For other
systems (e.g. Linux or Darwin) a multitude of MPI implementations is available
and ESMF_COMM must be set to indicate which implementation is used to build
the ESMF library. Set ESMF_COMM according to your situation to: mpich, mpich2,
lam, openmpi or intelmpi. ESMF_COMM may also be set to "user" indicating that
the user will set all the required flags using advanced ESMF environment
variables. Please see the User's Guide for more details.

Alternatively, ESMF comes with a single-processor MPI-bypass library which is
the default for Linux and Darwin systems. To force the use of this bypass
library set ESMF_COMM equal to "mpiuni".

ESMF_COMPILER

On platforms that don't come with a single vendor supplied compiler suite
(e.g. Linux or Darwin) ESMF_COMPILER must be set to select which Fortran and
C++ compiler is being used to build the ESMF library. Notice that setting the
ESMF_COMPILER variables does _not_ change the PATH that is used to locate the
compiler executables! ESMF_COMPILER (together with ESMC_COMM) does affect the
name that is expected for the compiler executables. However, the user's PATH
environment variable must be set correctly to located the desired executable
on the system. (There are advanced ESMF environment variables that can be used
to select specific compiler executables. Please see the User's Guide for details.) Main purpose of the ESMF_COMPILER setting is to help the ESMF build
system to pick matching compiler flags.

To see possible values for ESMF_COMPILER, cd to $ESMF_DIR/build_config and list
the directories there. The first part of each directory name corresponds to the
output of 'uname -s' for this platform. The second part contains possible values
for ESMF_COMPILER. In some cases multiple combinations of Fortran and C++
compilers are possible, e.g. there is "intel" and "intelgcc" available for
Linux. Setting ESMF_COMPILER to "intel" indicates that both Intel Fortran and
C++ compilers are used, whereas "intelgcc" indicates that the Intel Fortran
compiler is used in combination with GCC's g++ compiler.

ESMF_ABI

If this system supports 32-bit and 64-bit (pointer wordsize) application binary interfaces (ABIs), this variable can be set to select which ABI to use. Valid values are '32' or '64'. By default the most common ABI is chosen.


Supported Makefile Targets
--------------------------

 info       : print out extensive system configuration information about what
              compilers, libraries, paths, flags, etc are being used

 clean      : remove all files built for this platform/compiler/wordsize.
 distclean  : remove all files built for all architectures
 clobber    : same as distclean

 lib        : build the ESMF libraries only (default)
 check      : build and run the unit and system tests to validate the library
 all        : build the libraries, unit and system test, examples, and demos.
 doc        : build the documentation (requires specific latex macros packages
              and additional utilities).  See the ESMF web site for details;  it
              also contains pre-built pdf and html versions of all docs.

 unit_tests         : build and run the unit tests
 build_unit_tests   : build only
 run_unit_tests     : run only
 clean_unit_tests   : remove unit test executables only

 system_tests       : build and run the more comprehensive system tests
 build_system_tests : build only
 run_system_tests   : run only
 clean_system_tests : remove system test executables only

 examples           : build and run the examples
 build_examples     : build only
 run_examples       : run only
 clean_examples     : remove example executables only

 demos              : build and run the more comprehensive demos
 build_demos        : build only
 run_demos          : run only
 clean_demos        : remove demo executables only

 all_tests          : build and run all available tests and demos
 build_all_tests    : build only
 run_all_tests      : run only
 clean_all_tests    : remove all test and demo executables 

Note:

 The normal 'install' target is *NOT CURRENTLY SUPPORTED*.  Neither is the
 'uninstall' target.  They will be added in a future release of ESMF.



Directories
-----------

application:     Contains a simple ESMF application and Makefile to demonstrate
                 the use of the esmf.mk makefile fragment.

build_config:    Contains makefile fragments that can be customized by the 
                 user for specific platforms, compilers, and sites.
                 See the README in this directory for help with porting to
                 new platforms or compilers.

build:           Contains the generic portion of the build that a
                 user would not be expected to modify.  Also contains a 
                 sample user makefile.

scripts:         Contains scripts for testing and uniprocessor runs, and some
                 templates.

src:             Contains the source code.


The following directories are created during the building and testing stages:

lib:             Contains the ESMF libraries.

mod:             Contains the Fortran module files.

quick_start:     Contains skeleton application files to use as a template.

test:            Contains unit and system test executables and output.

examples:	 Contains examples executables and output.

doc:             Contains documentation (if built).

================================================================================
================================================================================

PORTING the ESMF library to a new platform and/or fixing build problems:
-----------------------------------------------------------------------


Overview
--------

If the build_config directory does not already contain a directory for your
platform/compiler, or if your platform/compiler is already supported but you
need to make some adaptions for your local system, this section should help
you get started.

The top level makefile is $ESMF_DIR/makefile. It should not need to be
modified. The bulk of the makefile rules and settings used by all platforms
and compilers is $ESMF_DIR/build/common.mk. This makefile should not be
changed unless the modification is intended to apply to every system on which
ESMF is built. This makefile is included by the top level makefile.

The per-platform makefile fragments which contain the settings which differ
for each system and compiler combination are in separate subdirectories under
$ESMF_DIR/build_config.

If you find the settings are close and you just need to add additional
information, or the changes are very specific to a particular system, you can
set the environment variable ESMF_SITE to a value, and then the makefiles will
include
$ESMF_DIR/build_config/$ESMF_OS.$ESMF_COMPILER.$ESMF_SITE/build_rules.mk,
in addition to the default settings.

If you are supporting a completely new platform, make a new directory
following the naming pattern described below. Copy the contents of the
closest existing match into that directory and start making changes.


Naming Conventions
------------------

In $ESMF_DIR/build_config, each compiler/platform combination has
a separate subdirectory which follows a 3-part naming convention:

The first part is the system name as it is automatically set in ESMF_OS.

The second part is the compiler name for those platforms which support
compilers from different vendors.  For those systems which come with a
single vendor-supplied compiler, the compiler name is 'default'.  
The environment variable ESMF_COMPILER is used to select the compiler.

The last part of the name is the site-specific information. The 'default'
directories contain files which are always read for the given 
architecture/compiler combination. Then, in addition, if the environment
variable ESMF_SITE has a value, the corresponding directory will be 
searched after the default directory, for overrides and additional settings 
of directory names, values, flags, and other custom information.

Note that building on the SGI Altix is the same as the other Linux/Intel 
platforms, so set ESMF_COMPILER to 'intel' to use the files in the
Linux.intel.default directory. For Altix set ESMF_COMM to 'mpi' in order to
pick up the vendor MPI library.


File Descriptions
-----------------

Each default directory contains the following files:

 ESMC_Conf.h    : C++ preprocessor definitions needed for this platform.

 ESMF_Conf.inc  : values needed by both preprocessed F90 and C++; contains
                  information in a format parseable by both languages.         

 build_rules.mk : makefile fragment which is included by the main ESMF build
                  system and contains specific settings for this platform.


Customizing an Existing Platform
--------------------------------

0. Check on http://sourceforge.net/projects/esmfcontrib -> CVS to be sure
   someone else has not already done this for your location or machine.

1. Set the environment variable ESMF_SITE to a string.  Suggested values are
   either your location (e.g. mit, cola) or a specific machine (e.g. bluesky).

2. Make a subdirectory named in the form:  system.compiler.site

3. Initially copy over only build_rules.mk from the corresponding default
   directory and remove all values which remain the same.  The build_rules.mk
   file in this site-specific directory will be included after the default
   one has been read, so only differences should be maintained.  

4. The ESMC_Conf.h and ESMF_conf.inc files do not need to be copied.

5. Test and get it working.

6. Post it back on the esmfcontrib sourceforge site for others to use.


Adding a New Platform
---------------------

1. Create a new subdirectory which follows the naming conventions.

2. Copy the contents of the most similar existing directory over to the 
   new directory.

3. Edit the build_rules.mk file to set the compiler names, flags, etc.
   Since ESMF contains both F90 and C++ code, generally the linkers are
   not able to simply link without being given additional libraries.

4. Edit the ESMC_Conf.h file and look over the values.  (In reality, most
   of these variables are not actually used.)  However, see the ESMF_F90_PTR
   settings at the end of the file.  These *must* match the size of the 
   "dope vector" that the Fortran compiler uses on this machine to store
   information about Fortran arrays (rank, lower bounds, upper bounds, etc).  
   Put in a good guess (or leave them as-is) and build and run the unit tests.

   Ignore the output of all other unit tests until the ESMF_ArrayF90PtrUTest
   passes cleanly without complaining about byte count mismatches.  Adjust the
   sizes in the ESMC_Conf.h file until it passes, and then make clean and
   rebuild the entire library and test suite.

5. Once it is working, post it back on the esmfcontrib sourceforge site and
   email esmf_support@ucar.edu so we can include it in our next release.


Platform Specific Notes Related to Executing Test Targets
---------------------------------------------------------

AIX systems - Those using LoadLeveler will generally need to set the
MP_RMPOOL environment variable, and generally 1 will be a good value.
See your own system admins for more help on this if 1 doesn't work.
On those IBM systems running LSF instead of POE set ESMF_BATCH to 'lsf.ibmpjl'
before running any of the test targets; this will select the proper run script for the test and example programs. Also set ESMF_BATCHOPTIONS to any flags
your LSF system requires, such as -q<queue>, -W<time> .

On OSF1 (HP/Compaq) systems running LSF set ESMF_BATCHOPTIONS to any flags
your LSF system requires, such as -q<queue>, -P<project> .


================================================================================

MORE HELP:
---------

Information about the ESMF project can be found at the ESMF web site:
        http://www.esmf.ucar.edu

The latest documentation for the project can be found at:
        http://www.esmf.ucar.edu -> Downloads & Documentation

The ESMF User's Guide contains information on building and installing the ESMF.
The ESMF Reference Manual contains information on the architecture of the ESMF,
example code, and details of the APIs (Application Programming Interfaces).

The ESMF library source code is also available for download at:
	http://sourceforge.net/projects/esmf

Follow the directions on that web page to download a tarball and for
access to the ESMF CVS repository.  The Sourceforge site also contains 
the bugs, support, and task lists for ESMF.

Contributions from ESMF users are available at:
	http://sourceforge.net/projects/esmfcontrib

Please contact esmf_support@ucar.edu with any questions or problems.


================================================================================
 $Id: README,v 1.69.2.3 2006/08/15 21:40:05 theurich Exp $
