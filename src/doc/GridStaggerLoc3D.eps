%!PS-Adobe-3.1 EPSF-3.0%%Title: StaggerLoc3D.svg%%Creator: Adobe Illustrator(R) 11%%AI8_CreatorVersion: 11.0.0%AI9_PrintingDataBegin%%For: Don Stark%%CreationDate: 3/27/08%%BoundingBox: 0 0 351 261%%HiResBoundingBox: 0 0 351 261%%CropBox: 0 0 351 261%%LanguageLevel: 2%%DocumentData: Clean7Bit%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_T42 (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.19 0)%%+ procset Adobe_CoolType_Core (2.23 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Cyan Magenta Yellow Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 96 8%%BeginData: 7586 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDBAFF527D527D7DFFA852FD77FFA87D5252%2752A8FF52FD78FFA8FFA8FFA8FFA8FDFBFFA87DFD7EFF52F8FD7EFF5252%7DFDFCFFFDFCFFFDFCFFFD78FFFD067D527DA8FF7D7D52A87D7D7DFF84FD%12FFA8A8FD17FF7DA87D7D7DA87D7D7DFF7D7D52A8A87D52FD30FFA87D52%52F85227272752A8522727277D2752522068936F9368936F9368936F6F44%6F6F6F686F20206F6F6F93686F6F9368936F9368936F9368936F93682052%7D525227272752F827A87D522727525227A8FD30FFA8FFA8FFA8FFA8FFA8%A8FFFFA8FFA8FF7D93FD0CFC44204468202020FC684420444468F88CFD0D%FC68277DFFFFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FD40FFA18CFD0DFC68%446868684468688C6868446868448CFD0BFC8C447E7D7DFD50FFA88CFD29%FC687EFF53A8FD4FFF7D8CFD29FC687EFFFF7DA7FD3EFFA8FFFFFFA8FFFF%FFA8A8FFFFA8A8FFFF598CFD29FC6859A9A8FF52A8FFFFA8A8A8FFFFA8A8%FD34FF27272752F82752FF52272727527DF8FF5220FD12FC4444FD14FC68%2052272728272727A8A8522727277D2727FD34FF7D52FD057DA8A87DA852%A87D7D7D93FD0BFC8C44FD05684468686844688C8C448CFD0DFC4453A952%7D7D7E287D7DA8A8A852FD047DFD3BFFA8FD06FFA88CFD0CFC4420204444%20202068FC20442020682044FD0CFC447EFFA9FFA9FFA97DA8FFA8FD48FF%A18CFD0EFC8CFCFCFC8CFC8C8C8CFC8CFC8CFC8CFD0CFC687EFFA9FFA9FF%A9FF53A8FD49FF7D8CFD28FC8C447EFFA9FFA9A9A9FFA97D7DFD48FFA88C%FD29FC6F84FFA9FFFFFFA9FFA9FF53A8FD35FFFD067D527DA8A87D7D52A8%7D7D7DFF768CFCFC8CFCFCFC8CFCFCFC8CFCFCFC8CFD05FC8CFD05FC8CFC%FCFC8CFCFCFC8CFCFCFC8CFC8C442E7E7D53527D525253A97D2827A87D7D%52FD30FF7D7D5252F8525227F87DA8522727277D277D7D206F766F766F76%6F766F766F766F7676766F7676764B276F766F766F766F766F766F766F76%6F766F766F27527D5252272727522752A97D2727277D5227A8FD30FFA8FF%A8A8A8FFA8A87DA8FFFFA8FFFD04A87DFFAFFFAFFFAFFFAFFFAFFFAFFF84%525284595252A87D7D52597DA8527DAFFFAFFFAFFFAFFFAFFFAFFF52A8A8%A97EA97EA97EA87E7DA97D7DFFA8A8A8FD42FFA8A8FD0DFFA827525252F8%527DFF525227527D5252FD0CFF7DA8FFA9FFA9FFA9FFFFFFA9FF53A8FD46%FFA87DFD0DFFA8A8A8FFFD05A8FFA8FFA8FFA8FD0DFF52A8A9A9A9FFA9A9%A9FFA9A9A97DA7FD46FFA87DFD29FF7D7EFFA9FFA9FFA9FFA9FFA9FF53A8%FD3FFFA8FFA8A8A8FFA87D7DFFA8FFFD04A87DA8A8FD15FFA8AFFD08FF59%A9A9FFA9FFA9FFA9FFA9FFFF7DA1FFA8FFA8FFA8A8A8FFFFFFFD09A8FD2A%FFA87D525227522727F87DFF52527DF8275252272752AF52FD05A17DFD0C%A1274BFD08A152527D777D777D777D777D777D27A87D7D52272752F85227%FF7D527D52275227522727A8FD2AFF7DA8FD047D525252A87DA87D7D52A8%7D7D527D4B448CFC8CFC8CFC8CFC8C8C688C8C8C68FD058C688C8C8C688C%8CFC68756F996F996F996F996F996EF87DA87D7D527D7D7D527D7DA87DA8%7D7D7DA87D7D52A8FD31FFA87DA8FD09FF6FFD0BFC20202044F82044FCFD%04442044FD0420FC939AC299C2C2C299C2C2C299A153A8FD46FFA87DFD09%FF4BFD0BFC8C684468684444688C8C68684468688C446844FC68A099C299%C299C299C29976A97D7DFD46FFA87DFD08FF6FFD20FC939AC299C2BCC299%C29976A9FF53A8FD46FFA87DFD07FF6FFD21FC68A099C299C299C27576A9%FFFF7DA8FD3AFFA852FD057DFFA87D7DA827527D7D5252A8AF20FD12FC68%68FD0EFC9399C29AC299C24A4B7E53537E52527DFFA87D7DA8527D7D7D52%527DFD2DFFA8F8522752F8277DFF527D52F8F8525227F8524B44FD12FC68%68FD0EFC68A099C299C26F277EA8F8282727F8527DFF527D522727525227%F852FD2FFFA8FFA8FFA8A87DFFFFFF7D7DFFFFA8AF4BFD0BFCFD04684468%448CFC8C688C44686868446868FD06FC9399C2BCC29976A9FFA9A97EFF52%A8FFA87DFFFFFFA8FFFFFFA8FFA8FD39FFA87DFFFFFF6FFD0BFC68682020%444420F820FCFD04442044442020208CFD05FC68A099C29976A9FFA9FFA9%FFFF7DA7FD46FFA87DFFFF6FFD0DFC8CFC8CFC8CFC8CFC8CFCFCFC8CFCFC%FC8CFC8CFD06FC939AC29976A9FFA9FFA9FFA9FF53A8FD46FFA87DFF4BFD%27FC68A06F52A9FFA9A9A9FFA9A9A97D7DFD46FFA87D6FFD28FC937576A9%FFFFFFA9FFFFFFA9FF7DA8FD31FFA87D7D7D527D525252FFA87D7D7D527D%527D5252A87DF868688C6868688C6868688C688C688C688C688C6868F868%688C688C688C688C6868688C6868688C6868F8527E7D537D537D285353A9%7D52527D527D5252527DA8FD29FFA8527D52FD05277DA8527D5227275252%27F87DA87DA8A8A8AFA8A8A8AFA8A8A8AF7D7D7DA8847D7DA87D7D7D847D%A87D7D7D84A8AFA8A8A8AFA8A8A8AFA859A87D5252275228270028A97DF8%7D522727522727F8A8FD2AFFA8A8FFA8FFFD05A8FFA8A8A8FFFD06A87DFD%0CFF52F8522E520552FF7D527D272727522727F8A8FD0AFF7DA8A8A9A8A8%7EA9A8A87EA8A97D7DFFA8FFFD05A8FD3EFFA8A8FD0CFFFD067D52A8A8A8%7D7D527D7D7D527DA8FD0AFF7D7EFFA9FFA9FFA9FFA9FFA9FF53A8FD46FF%A87DFD13FFA8FD15FF52A8A9FFA9A9A9FFA9A9A9FFA97D7DFD46FFA8A8FD%29FF7DA8FFA9FFA9FFA9FFA9FFA9FF53A8FD43FFA8FFA8A852A8A8FFA8FF%A8FFFFFFA8FF847DAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFF7D84FD04%FFAFFFFFFF52A8A9A9A9FFA9A9A9FFA9A9A97D7DFD06FF7D7DFFFFA87DA8%A8FFFFFF7DFD30FF527D522752F8F8527DFF5252F8527D52527D209A939A%6F9A939A6F9A939A939A939A939A934444BC939A939A939A936F52FD0A76%9A4BA8FD06FF27F87DFF527D2752277DFF7DA8FD2EFFA8A87D7D527D277D%527DA8A87D7D52A17D5268FD05FC8CFCFCFC8CFCFC68206868684468FC8C%4444688C68448CFC689A999999BC999999BC99BB6EA1FD07FF7D7DFFFFA8%7DA8527D52FF7DA8FD33FFA8A8FD09FFAF68FD0DFC44204468202020FC68%4420444468F88CFC9399C2BCC299C2BCC299C275A1FD48FFA87DFD08FFA8%68FD0FFC8C8C8CFC8C8C68FC8CFC8CFC8C8C8CFC68A099C299C299C299C2%6E7DFD49FFA8A8FD07FFAF68FD20FC9399C2BCC299C2C2C26FA8FD4AFFA8%7DFD06FFA868FD21FC68A099C299C299C275A1FD42FF7D527D7D7D52A8FF%A852527DA87D7DA82E44FD12FC4444FD0EFC939AC299C2BCC22052FF7D52%7D7D7D52A8FFA87D7D7DA87D7DA8FD32FF27272752F82752FF5227272752%7D277D44FD0BFC8C8C8CFCFD048C68FD048CFC8C8C8CFD07FC68A099C299%C26F7DA8FF52272752F8F827A87D522727277D277DFD33FFA8FFFFFFA8FF%A8FFA87DFFFFFFA868FD0BFC8C68204420442020F8FCFC44204444682068%FD07FC939AC299C26FA8FD04FFA8FFFFFFA8FFA8FFFFFFA8FFA8FD3DFFA8%7DFFFFA868FD0DFCFD06684468688CFD0768FD07FC68A099C26EA8FD4FFF%A87DFFA868FD17FC8CFD0EFC6F99C26FA8FD50FFA87DFF68FD27FC68A06F%A8FD41FFA8FFA8FFA8FFA8FFFFFFA8FFFFFFA8FF7D528CFD28FC684BA7FF%FFA8FFFFA8A8FFFFFFA8FFFFFFA8FD31FFA8525252272752F8277DFF2752%F8527D27527DF86F686F686F686F686F686F686F686F68FD056F206F686F%6F6F686F686F686F686F686F686F686FF87D535252FD0627FF5252275252%7DF8FD30FFA8A87D7D527D7D7D527DA8A87D7D7DA87DA8FFFFAFFFFFFFAF%FFFFFFAFFD04FFA852597D7D527D7D7D595952A87D5959FFFFFFAFFFFFFF%AFFFFFFFAFFFFFA87DA8FD047D527DA8A87D7D7DA87D7DA8FD38FFA8FD17%FF7D2727522727277DA8522E27277D2752FD71FFA8A8FFFFA8FFA8A8FFFF%A8FFA8FFA8FD5CFFA8FD7FFFF852FD7DFF7DF852FD7DFFA8FD78FF527D52%7D7DFFFF7DA8FD77FF7D7D5227277DFF52A8FD77FFA8FFA8A8A8FFA8A8A8%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD78FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 68 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 	exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust	AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer	AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse	AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/agm_sethalftone{ 	dup	begin		/_Data load		/Thresholds xdf	end	level3 	{ sethalftone }{		dup /HalftoneType get 3 eq {			sethalftone		} {pop} ifelse	}ifelse} def /rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		exch () /SubFileDecode filter	}	{		exch pop	}	ifelse	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/filter_indexed_devn{	cvi Names length mul names_index add Lookup exch get} bdf/filter_devn{		4 dict begin	/srcStr xdf	/dstStr xdf	dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch		[			/devicen_colorspace_dict /AGMCORE_gget cvx /begin cvx			currentdict /srcStr get /readstring cvx /pop cvx			/dup cvx /length cvx 0 /gt cvx [				Adobe_AGM_Utils /AGMUTIL_ndx 0 /ddf cvx				names_index Names length currentdict /srcStr get length 1 sub {					1 /index cvx /exch cvx /get cvx					currentdict /dstStr get /AGMUTIL_ndx /load cvx 3 -1 /roll cvx /put cvx					Adobe_AGM_Utils /AGMUTIL_ndx /AGMUTIL_ndx /load cvx 1 /add cvx /ddf cvx				} for				currentdict /dstStr get 0 /AGMUTIL_ndx /load cvx /getinterval cvx			] cvx /if cvx			/end cvx		] cvx		bind		/exec cvx	] cvx	end} bdf/AGMUTIL_imagefile nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	10 dict begin	/imageDict xdf	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def	/imbufIdx 0 def	/origDataSource imageDict /DataSource get def	/origMultipleDataSources imageDict /MultipleDataSources get def	/origDecode imageDict /Decode get def	/dstDataStr imageDict /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ imageDict begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	imageDict /MultipleDataSources known {MultipleDataSources}{false} ifelse	{		/imbufCnt imageDict /DataSource get length def		/imbufs imbufCnt array def		0 1 imbufCnt 1 sub {			/imbufIdx xdf			imbufs imbufIdx imbufLen string put			imageDict /DataSource get imbufIdx [ AGMUTIL_imagefile imbufs imbufIdx get /readstring cvx /pop cvx ] cvx put		} for		DeviceN_PS2 {			imageDict begin		 	/DataSource [ DataSource /devn_sep_datasource cvx ] cvx def			/MultipleDataSources false def			/Decode [0 1] def			end		} if	}{		/imbuf imbufLen string def		Indexed_DeviceN level3 not and DeviceN_NoneName or {			imageDict begin		 	/DataSource [AGMUTIL_imagefile Decode BitsPerComponent false 1 /filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource /exec cvx] cvx def			/Decode [0 1] def			end		}{			imageDict /DataSource {AGMUTIL_imagefile imbuf readstring pop} put		} ifelse	} ifelse	imageDict exch	load exec	imageDict /DataSource origDataSource put	imageDict /MultipleDataSources origMultipleDataSources put	imageDict /Decode origDecode put		end} bdf/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		2 dict begin		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def		MultipleDataSources {DataSource 0 get}{DataSource}ifelse type /filetype eq {			/imbuf imbufLen string def		}if		1 1 Height { 			pop			MultipleDataSources {			 	0 1 DataSource length 1 sub {					DataSource type dup					/arraytype eq {						pop DataSource exch get exec					}{						/filetype eq {							DataSource exch get imbuf readstring pop						}{							DataSource exch get						} ifelse					} ifelse					AGMUTIL_imagefile exch writestring				} for			}{				DataSource type dup				/arraytype eq {					pop DataSource exec				}{					/filetype eq {						DataSource imbuf readstring pop					}{						DataSource					} ifelse				} ifelse				AGMUTIL_imagefile exch writestring			} ifelse		}for		end		true	}ifelse	end} bdf/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}defstatusdict /product known userdict /AGMP_current_show known not and{	/pstr statusdict /product get def	pstr (HP LaserJet 2200) eq 		pstr (HP LaserJet 4000 Series) eq or	pstr (HP LaserJet 4050 Series ) eq or	pstr (HP LaserJet 8000 Series) eq or	pstr (HP LaserJet 8100 Series) eq or	pstr (HP LaserJet 8150 Series) eq or	pstr (HP LaserJet 5000 Series) eq or	pstr (HP LaserJet 5100 Series) eq or	pstr (HP Color LaserJet 4500) eq or	pstr (HP Color LaserJet 4600) eq or	pstr (HP LaserJet 5Si) eq or	pstr (HP LaserJet 1200 Series) eq or	pstr (HP LaserJet 1300 Series) eq or	pstr (HP LaserJet 4100 Series) eq or 	{ 		userdict /AGMP_current_show /show load put		userdict /show {		  currentcolorspace 0 get		  /Pattern eq		  {false charpath f}		  {AGMP_current_show} ifelse		} put	}if	currentdict /pstr undef} if/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{	  2{/exec load}repeat	  3 1 roll	  [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin	 currentdict 2 index known{	 	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse		 addprocs /TransferFunction xdf 		 currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/DeviceN_PS2{	/currentcolorspace AGMCORE_gget 0 get /DeviceN eq level3 not and} bdf/Indexed_DeviceN{	/indexed_colorspace_dict AGMCORE_gget dup null ne {		/CSD known	}{		pop false	} ifelse} bdf/DeviceN_NoneName{		/Names where {		pop		false Names		{			(None) eq or		} forall	}{		false	}ifelse} bdf/DeviceN_PS2_inRip_seps{	/AGMCORE_in_rip_sep where	{		pop dup type dup /arraytype eq exch /packedarraytype eq or		{			dup 0 get /DeviceN eq level3 not and AGMCORE_in_rip_sep and			{				/currentcolorspace exch AGMCORE_gput				false			}			{				true			}ifelse		}		{			true		} ifelse	}	{		true	} ifelse} bdf/base_colorspace_type{	dup type /arraytype eq {0 get} if} bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 216 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/AGMCORE_currentbg nd/AGMCORE_currentucr nd/AGMCORE_gradientcache 32 dict def/AGMCORE_in_pattern false def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	2 dict begin	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	end	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/npth_clp{	newpath clip} def/add_grad{	AGMCORE_gradientcache 3 1 roll put}bdf/exec_grad{	AGMCORE_gradientcache exch get exec}bdf/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/dictstackcount countdictstack def	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	dictstackcount 1 countdictstack 1 sub {end}for	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont	/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def	clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto	/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show			0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp xpt				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf	errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if	/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def	AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if	/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_currentbg currentblackgeneration def	/AGMCORE_currentucr currentundercolorremoval def	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 10 def		/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr xpt		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	level3 /AGMCORE_&sysshfill AGMCORE_key_known not and	{		/AGMCORE_&sysshfill systemdict/shfill get def		/AGMCORE_&usrshfill /shfill load def		/AGMCORE_&sysmakepattern systemdict/makepattern get def		/AGMCORE_&usrmakepattern /makepattern load def	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/devicen_tints [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0] AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/devicen_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	<<	/MaxPatternItem currentsystemparams /MaxPatternCache get	>>	setuserparams	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_have_reported_unsupported_color_space false def	/AGMCORE_report_unsupported_color_space	{		AGMCORE_have_reported_unsupported_color_space false eq		{			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.) ==			Adobe_AGM_Core /AGMCORE_have_reported_unsupported_color_space true ddf		} if	}def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def	/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup map_alias {				/Name get exch pop			} if			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						Adobe_AGM_Core/AGMCORE_in_pattern known {Adobe_AGM_Core/AGMCORE_in_pattern get}{false} ifelse						not currentpagedevice/OverrideSeparations known and							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				dup true exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or						{pop}						{convert_spot_to_process and}ifelse					}				forall					{					true exch						{						dup (Cyan) eq exch						dup (Magenta) eq 3 -1 roll or exch						dup (Yellow) eq 3 -1 roll or exch						(Black) eq or and						}forall						not					}{pop false}ifelse				}{				false exch					{					dup (Cyan) eq exch					dup (Magenta) eq 3 -1 roll or exch					dup (Yellow) eq 3 -1 roll or exch					dup (Black) eq 3 -1 roll or					{pop}					{convert_spot_to_process or}ifelse					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/setcolortransfer		{ 			AGMCORE_cyan_plate{				pop pop pop			}{			  	AGMCORE_magenta_plate{			  		4 3 roll pop pop pop			  	}{			  		AGMCORE_yellow_plate{			  			4 2 roll pop pop pop			  		}{			  			4 1 roll pop pop pop			  		}ifelse			  	}ifelse			}ifelse			settransfer  		}			def		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/AGMCORE_RemoveProcessColorNames			{			1 dict begin			/filtername				{				dup /Cyan eq 1 index (Cyan) eq or					{pop (_cyan_)}if				dup /Magenta eq 1 index (Magenta) eq or					{pop (_magenta_)}if				dup /Yellow eq 1 index (Yellow) eq or					{pop (_yellow_)}if				dup /Black eq 1 index (Black) eq or					{pop (_black_)}if				}def			dup type /arraytype eq				{[exch {filtername}forall]}				{filtername}ifelse			end			}def		/AGMCORE_IsSeparationAProcessColor			{			dup (Cyan) eq exch dup (Magenta) eq exch dup (Yellow) eq exch (Black) eq or or or			}def		level3 {			/AGMCORE_IsCurrentColor				{				gsave				false setoverprint				1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor				currentgray 0 eq 				grestore				}def			/AGMCORE_filter_functiondatasource				{					5 dict begin				/data_in xdf				data_in type /stringtype eq					{					/ncomp xdf					/comp xdf					/string_out data_in length ncomp idiv string def					0 ncomp data_in length 1 sub						{						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put						}for					string_out					}{					string /string_in xdf					/string_out 1 string def					/component xdf					[					data_in string_in /readstring cvx						[component /get cvx 255 /exch cvx /sub cvx string_out /exch cvx 0 /exch cvx /put cvx string_out]cvx						[/pop cvx ()]cvx /ifelse cvx					]cvx /ReusableStreamDecode filter				}ifelse				end				}def			/AGMCORE_separateShadingFunction				{				2 dict begin				/paint? xdf				/channel xdf					begin					FunctionType 0 eq						{						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def						currentdict /Decode known							{/Decode Decode channel 2 mul 2 getinterval def}if						paint? not							{/Decode [1 1]def}if						}if					FunctionType 2 eq						{						paint?							{							/C0 [C0 channel get 1 exch sub] def							/C1 [C1 channel get 1 exch sub] def							}{							/C0 [1] def							/C1 [1] def							}ifelse									}if					FunctionType 3 eq						{						/Functions [Functions {channel paint? AGMCORE_separateShadingFunction} forall] def									}if					currentdict /Range known						{/Range [0 1] def}if					currentdict					end				end				}def			/AGMCORE_separateShading				{				3 -1 roll begin				currentdict /Function known					{					currentdict /Background known						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if					Function 3 1 roll AGMCORE_separateShadingFunction /Function xdf					/ColorSpace [/DeviceGray] def					}{					ColorSpace dup type /arraytype eq {0 get}if /DeviceCMYK eq						{						/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}] def						}{						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put						}ifelse					ColorSpace 0 get /Separation eq						{							{								[1 /exch cvx /sub cvx]cvx							}{								[/pop cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll put							pop						}{							{								[exch ColorSpace 1 get length 1 sub exch sub /index cvx 1 /exch cvx /sub cvx ColorSpace 1 get length 1 add 1 /roll cvx ColorSpace 1 get length{/pop cvx} repeat]cvx							}{								pop [ColorSpace 1 get length {/pop cvx} repeat cvx 1]cvx							}ifelse							ColorSpace 3 3 -1 roll bind put						}ifelse					ColorSpace 2 /DeviceGray put																							}ifelse				end				}def			/AGMCORE_separateShadingDict				{				dup /ColorSpace get				dup type /arraytype ne					{[exch]}if				dup 0 get /DeviceCMYK eq					{					exch begin 					currentdict					AGMCORE_cyan_plate						{0 true}if					AGMCORE_magenta_plate						{1 true}if					AGMCORE_yellow_plate						{2 true}if					AGMCORE_black_plate						{3 true}if					AGMCORE_plate_ndx 4 eq						{0 false}if							dup not currentoverprint and						{/AGMCORE_ignoreshade true def}if					AGMCORE_separateShading					currentdict					end exch					}if				dup 0 get /Separation eq					{					exch begin					ColorSpace 1 get dup /None ne exch /All ne and						{						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and							{							ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 								{								/ColorSpace									[									/Separation									ColorSpace 1 get									/DeviceGray										[										ColorSpace 3 get /exec cvx										4 AGMCORE_plate_ndx sub -1 /roll cvx										4 1 /roll cvx										3 [/pop cvx]cvx /repeat cvx										1 /exch cvx /sub cvx										]cvx																		]def								}{								AGMCORE_report_unsupported_color_space								AGMCORE_black_plate not									{									currentdict 0 false AGMCORE_separateShading									}if								}ifelse							}{							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor							0 exch 							dup not currentoverprint and								{/AGMCORE_ignoreshade true def}if							AGMCORE_separateShading							}ifelse							}if								currentdict					end exch					}if				dup 0 get /DeviceN eq					{					exch begin					ColorSpace 1 get convert_to_process						{						ColorSpace 2 get dup type /arraytype eq {0 get}if /DeviceCMYK eq 							{							/ColorSpace								[								/DeviceN								ColorSpace 1 get								/DeviceGray									[									ColorSpace 3 get /exec cvx									4 AGMCORE_plate_ndx sub -1 /roll cvx									4 1 /roll cvx									3 [/pop cvx]cvx /repeat cvx									1 /exch cvx /sub cvx									]cvx																	]def							}{							AGMCORE_report_unsupported_color_space							AGMCORE_black_plate not								{								currentdict 0 false AGMCORE_separateShading								/ColorSpace [/DeviceGray] def								}if							}ifelse						}{						currentdict						false -1 ColorSpace 1 get							{							AGMCORE_IsCurrentColor								{								1 add								exch pop true exch exit								}if							1 add							}forall						exch 						dup not currentoverprint and							{/AGMCORE_ignoreshade true def}if						AGMCORE_separateShading						}ifelse					currentdict					end exch					}if				dup 0 get dup /DeviceCMYK eq exch dup /Separation eq exch /DeviceN eq or or not					{					exch begin					ColorSpace dup type /arraytype eq						{0 get}if					/DeviceGray ne						{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate not							{							ColorSpace 0 get /CIEBasedA eq								{								/ColorSpace [/Separation /_ciebaseda_ /DeviceGray {}] def								}if							ColorSpace 0 get dup /CIEBasedABC eq exch dup /CIEBasedDEF eq exch /DeviceRGB eq or or								{								/ColorSpace [/DeviceN [/_red_ /_green_ /_blue_] /DeviceRGB {}] def								}if							ColorSpace 0 get /CIEBasedDEFG eq								{								/ColorSpace [/DeviceN [/_cyan_ /_magenta_ /_yellow_ /_black_] /DeviceCMYK {}]								}if							currentdict 0 false AGMCORE_separateShading							}if						}if					currentdict					end exch					}if				pop				dup /AGMCORE_ignoreshade known					{					begin					/ColorSpace [/Separation (None) /DeviceGray {}] def					currentdict end					}if				}def			/shfill				{				clonedict				AGMCORE_separateShadingDict 				dup /AGMCORE_ignoreshade known					{pop}					{AGMCORE_&sysshfill}ifelse				}def			/makepattern				{				exch				dup /PatternType get 2 eq					{					clonedict					begin					/Shading Shading AGMCORE_separateShadingDict def					currentdict end					exch AGMCORE_&sysmakepattern					}{					exch AGMCORE_&usrmakepattern					}ifelse				}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf	/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def	/map_index	{		1 index mul exch getinterval {255 div} forall	} bdf	/map_indexed_devn	{		Lookup Names length 3 -1 roll cvi map_index	} bdf	/n_color_components	{		base_colorspace_type		dup /DeviceGray eq{			pop 1		}{			/DeviceCMYK eq{				4			}{				3			}ifelse		}ifelse	}bdf	level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{			/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop								[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 xpt					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 xpt						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				DeviceN_PS2_inRip_seps {AGMCORE_&&&setcolorspace} if			}def		}if		}{		/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def		/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def		/setcolor_devicecolor		{			base_colorspace_type			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def		/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse	/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/devn /setdevicencolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/devncs /setdevicencolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/f /fill ldf	/ef /eofill ldf	/@ /stroke ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def/getrampcolor {/indx exch def0 1 NumComp 1 sub {dupSamples exch getdup type /stringtype eq { indx get } ifexchScaling exch get aload pop3 1 rollmul add} forColorSpaceFamily /Separation eq	{	sep	}	{	ColorSpaceFamily /DeviceN eq		{		devn		}		{		setcolor		}ifelse	}ifelse} bind def/sssetbackground { aload pop setcolor } bind def/RadialShade {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/r2 exch def/c2y exch def/c2x exch def/r1 exch def/c1y exch def/c1x exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifc1x c2x eq{c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse}{/slope c2y c1y sub c2x c1x sub div def/theta slope 1 atan defc2x c1x lt c2y c1y ge and { /theta theta 180 sub def} ifc2x c1x lt c2y c1y lt and { /theta theta 180 add def} if}ifelsegsaveclippathc1x c1y translatetheta rotate-90 rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{/max { 2 copy gt { pop } {exch pop} ifelse } bind def/min { 2 copy lt { pop } {exch pop} ifelse } bind deframpdict begin40 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavec1x c1y translatetheta rotate-90 rotate/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def/c1y 0 def/c1x 0 def/c2x 0 defext0 {0 getrampcolorc2y r2 add r1 sub 0.0001 lt{c1x c1y r1 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2y r1 add r2 le{c1x c1y r1 0 360 arcfill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r1 neg def/p1y c1y def/p2x r1 def/p2y c1y defp1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y p1x SS1 div neg def/SS2 90 theta sub dup sin exch cos div def/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y p2x SS2 div neg defr1 r2 gt{/L1maxX p1x yMin p1y sub SS1 div add def/L2maxX p2x yMin p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifc1x c2x sub dup mulc1y c2y sub dup muladd 0.5 exp0 dtransformdup mul exch dup mul add 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if pop/hires exch defhires mul/numpix exch def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} if/xInc c2x c1x sub numsteps div def/yInc c2y c1y sub numsteps div def/rInc r2 r1 sub numsteps div def/cx c1x def/cy c1y def/radius r1 defnewpathxInc 0 eq yInc 0 eq rInc 0 eq and and{0 getrampcolorcx cy radius 0 360 arcstrokeNumSamples 1 sub getrampcolorcx cy radius 72 hires div add 0 360 arc0 setlinewidthstroke}{0numsteps{dupsubsampling { round cvi } ifgetrampcolorcx cy radius 0 360 arc/cx cx xInc add def/cy cy yInc add def/radius radius rInc add defcx cy radius 360 0 arcneofillrampIndxInc add}repeatpop} ifelseext1 {c2y r2 add r1 lt{c2x c2y r2 0 360 arcfill}{c2y r1 add r2 sub 0.0001 le{c2x c2y r2 360 0 arcnpathbbox/aymax exch def/axmax exch def/aymin exch def/axmin exch def/bxMin xMin axmin min def/byMin yMin aymin min def/bxMax xMax axmax max def/byMax yMax aymax max defbxMin byMin movetobxMax byMin linetobxMax byMax linetobxMin byMax linetobxMin byMin linetoeofill}{c2x c2y r2 0 360 arc fillr1 r2 eq{/p1x r2 neg def/p1y c2y def/p2x r2 def/p2y c2y defp1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax linetofill}{/AA r2 r1 sub c2y div def/theta AA 1 AA dup mul sub sqrt div 1 atan def/SS1 90 theta add dup sin exch cos div def/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def/p1y c2y p1x SS1 div sub def/SS2 90 theta sub dup sin exch cos div def/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def/p2y c2y p2x SS2 div sub defr1 r2 lt{/L1maxX p1x yMax p1y sub SS1 div add def/L2maxX p2x yMax p2y sub SS2 div add def}{/L1maxX 0 def/L2maxX 0 def}ifelsep1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add linetoL1maxX L1maxX p1x sub SS1 mul p1y add linetofill}ifelse}ifelse} ifelse} ifgrestoregrestoreendendend} ifelse} bind def/GenStrips {40 dict begin/ColorSpaceFamily exch def/background exch def/ext1 exch def/ext0 exch def/BBox exch def/y2 exch def/x2 exch def/y1 exch def/x1 exch def/rampdict exch def/setinkoverprint where {pop /setinkoverprint{pop}def}ifgsaveBBox length 0 gt {newpathBBox 0 get BBox 1 get movetoBBox 2 get BBox 0 get sub 0 rlineto0 BBox 3 get BBox 1 get sub rlinetoBBox 2 get BBox 0 get sub neg 0 rlinetoclosepathclipnewpath} ifx1 x2 eq{y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse}{/slope y2 y1 sub x2 x1 sub div def/theta slope 1 atan defx2 x1 lt y2 y1 ge and { /theta theta 180 sub def} ifx2 x1 lt y2 y1 lt and { /theta theta 180 add def} if}ifelsegsaveclippathx1 y1 translatetheta rotate{ pathbbox } stopped{ 0 0 0 0 } if/yMax exch def/xMax exch def/yMin exch def/xMin exch defgrestorexMax xMin eq yMax yMin eq or{grestoreend}{rampdict begin20 dict beginbackground length 0 gt { background sssetbackground gsave clippath fill grestore } ifgsavex1 y1 translatetheta rotate/xStart 0 def/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def/ySpan yMax yMin sub def/numsteps NumSamples def/rampIndxInc 1 def/subsampling false defxStart 0 transformxEnd 0 transform3 -1 rollsub dup mul3 1 rollsub dup muladd 0.5 exp 72 div0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt1 index 1 index lt { exch } if popmul/numpix exch defnumpix 0 ne{NumSamples numpix div 0.5 gt{/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def/rampIndxInc NumSamples 1 sub numsteps div def/subsampling true def} if} ifext0 {0 getrampcolorxMin xStart lt{ xMin yMin xMin neg ySpan rectfill } if} if/xInc xEnd xStart sub numsteps div def/x xStart def0numsteps{dupsubsampling { round cvi } ifgetrampcolorx yMin xInc ySpan rectfill/x x xInc add deframpIndxInc add}repeatpopext1 {xMax xEnd gt{ xEnd yMin xMax xEnd sub ySpan rectfill } if} ifgrestoregrestoreendendend} ifelse} bind def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 	/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/setdevicencolor{ 	/devicen_colorspace_dict AGMCORE_gget begin		Names length copy		Names length 1 sub -1 0		{			/devicen_tints AGMCORE_gget 3 1 roll xpt		} for		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 	current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf	AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx							AGMCORE_host_sep{								AGMCORE_is_cmyk_sep								/Name cvx 								/AGMCORE_IsSeparationAProcessColor load /exec cvx								/not cvx /and cvx 							}{								Name inRip_spot_has_ink not							}ifelse							[		 						/pop cvx 1							] cvx /if cvx							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf						[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/additive_blend{  	3 dict begin  	/numarrays xdf  	/numcolors xdf  	0 1 numcolors 1 sub  		{  		/c1 xdf  		1  		0 1 numarrays 1 sub  			{			1 exch add /index cvx  			c1 /get cvx /mul cvx  			}for 		numarrays 1 add 1 /roll cvx   		}for 	numarrays [/pop cvx] cvx /repeat cvx  	end}def/subtractive_blend{	3 dict begin	/numarrays xdf	/numcolors xdf	0 1 numcolors 1 sub		{		/c1 xdf		1 1		0 1 numarrays 1 sub			{			1 3 3 -1 roll add /index cvx  			c1 /get cvx /sub cvx /mul cvx			}for		/sub cvx		numarrays 1 add 1 /roll cvx		}for	numarrays [/pop cvx] cvx /repeat cvx	end}def/exec_tint_transform{	/TintProc [		/TintTransform cvx /setcolor cvx	] cvx bdf	MappedCSA setcolorspace_opt} bdf/devn_makecustomcolor{	2 dict begin	/names_index xdf	/Names xdf	1 1 1 1 Names names_index get findcmykcustomcolor	/devicen_tints AGMCORE_gget names_index get setcustomcolor	Names length {pop} repeat	end} bdf/setdevicencolorspace{ 	dup /AliasedColorants known {false}{true}ifelse 	current_spot_alias and {		6 dict begin		/names_index 0 def		dup /names_len exch /Names get length def		/new_names names_len array def		/new_LookupTables names_len array def		/alias_cnt 0 def		dup /Names get		{			dup map_alias {				exch pop				dup /ColorLookup known {					dup begin					new_LookupTables names_index ColorLookup put					end				}{					dup /Components known {						dup begin						new_LookupTables names_index Components put						end					}{						dup begin						new_LookupTables names_index [null null null null] put						end					} ifelse				} ifelse				new_names names_index 3 -1 roll /Name get put				/alias_cnt alias_cnt 1 add def 			}{				/name xdf								new_names names_index name put				dup /LookupTables known {					dup begin					new_LookupTables names_index LookupTables names_index get put					end				}{					dup begin					new_LookupTables names_index [null null null null] put					end				} ifelse			} ifelse			/names_index names_index 1 add def 		} forall		alias_cnt 0 gt {			/AliasedColorants true def			0 1 names_len 1 sub {				/names_index xdf				new_LookupTables names_index get 0 get null eq {					dup /Names get names_index get /name xdf					name (Cyan) eq name (Magenta) eq name (Yellow) eq name (Black) eq					or or or not {						/AliasedColorants false def						exit					} if				} if			} for			AliasedColorants {				dup begin				/Names new_names def				/AliasedColorants true def				/LookupTables new_LookupTables def				currentdict /TTTablesIdx known not {					/TTTablesIdx -1 def				} if				currentdict /NComponents known not {					/NComponents TintMethod /Subtractive eq {4}{3}ifelse def				} if				end			} if		}if		end	} if	dup /devicen_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	currentdict /AliasedColorants known {		AliasedColorants	}{		false	} ifelse	/TintTransform load type /nulltype eq or {		/TintTransform [			0 1 Names length 1 sub				{				/TTTablesIdx TTTablesIdx 1 add def				dup LookupTables exch get dup 0 get null eq					{					1 index					Names exch get					dup (Cyan) eq						{						pop exch						LookupTables length exch sub						/index cvx						0 0 0						}						{						dup (Magenta) eq							{							pop exch							LookupTables length exch sub							/index cvx							0 /exch cvx 0 0							}							{							(Yellow) eq								{								exch								LookupTables length exch sub								/index cvx								0 0 3 -1 /roll cvx 0								}								{								exch								LookupTables length exch sub								/index cvx								0 0 0 4 -1 /roll cvx								} ifelse							} ifelse						} ifelse					5 -1 /roll cvx /astore cvx					}					{					dup length 1 sub					LookupTables length 4 -1 roll sub 1 add					/index cvx /mul cvx /round cvx /cvi cvx /get cvx					} ifelse					Names length TTTablesIdx add 1 add 1 /roll cvx				} for			Names length [/pop cvx] cvx /repeat cvx			NComponents Names length  			TintMethod /Subtractive eq  				{  				subtractive_blend  				}  				{  				additive_blend  				} ifelse		] cvx bdf	} if	AGMCORE_host_sep {		Names convert_to_process {			exec_tint_transform		}		{				currentdict /AliasedColorants known {				AliasedColorants not			}{				false			} ifelse			5 dict begin			/AvoidAliasedColorants xdf			/painted? false def			/names_index 0 def			/names_len Names length def			Names {				AvoidAliasedColorants {					/currentspotalias current_spot_alias def					false set_spot_alias				} if				AGMCORE_is_cmyk_sep {					dup (Cyan) eq AGMCORE_cyan_plate and exch					dup (Magenta) eq AGMCORE_magenta_plate and exch					dup (Yellow) eq AGMCORE_yellow_plate and exch					(Black) eq AGMCORE_black_plate and or or or {						/devicen_colorspace_dict AGMCORE_gget /TintProc [							Names names_index /devn_makecustomcolor cvx						] cvx ddf						/painted? true def					} if					painted? {exit} if				}{					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq {					/devicen_colorspace_dict AGMCORE_gget /TintProc [						Names names_index /devn_makecustomcolor cvx					] cvx ddf					/painted? true def					exit					} if				} ifelse				AvoidAliasedColorants {					currentspotalias set_spot_alias				} if				/names_index names_index 1 add def			} forall			painted? {				/devicen_colorspace_dict AGMCORE_gget /names_index names_index put			}{				/devicen_colorspace_dict AGMCORE_gget /TintProc [					names_len [/pop cvx] cvx /repeat cvx 1 /setseparationgray cvx					0 0 0 0 () /findcmykcustomcolor cvx 0 /setcustomcolor cvx				] cvx ddf			} ifelse			end		} ifelse	}	{		AGMCORE_in_rip_sep {			Names convert_to_process not		}{			level3		} ifelse		{			[/DeviceN Names MappedCSA /TintTransform load] setcolorspace_opt			/TintProc level3 not AGMCORE_in_rip_sep and {				[					Names /length cvx [/pop cvx] cvx /repeat cvx				] cvx bdf			}{				/setcolor ldf			} ifelse		}{			exec_tint_transform		} ifelse	} ifelse	set_crd	/AliasedColorants false def	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		currentdict /CSD known {			CSD get_csd /Names known {				CSD get_csd begin				currentdict devncs				AGMCORE_host_sep{					4 dict begin					/devnCompCnt Names length def					/NewLookup HiVal 1 add string def					0 1 HiVal {						/tableIndex xdf						Lookup dup type /stringtype eq {							devnCompCnt tableIndex map_index						}{							exec						} ifelse						setdevicencolor						currentgray						tableIndex exch						HiVal mul cvi 						NewLookup 3 1 roll put					} for					[/Indexed currentcolorspace HiVal NewLookup] setcolorspace_opt					end				}{					level3					{					[/Indexed [/DeviceN Names MappedCSA /TintTransform load] HiVal Lookup] setcolorspace_opt					}{					[/Indexed MappedCSA HiVal						[						Lookup dup type /stringtype eq							{/exch cvx CSD get_csd /Names get length dup /mul cvx exch /getinterval cvx {255 div} /forall cvx}							{/exec cvx}ifelse							/TintTransform load /exec cvx						]cvx					]setcolorspace_opt					}ifelse				} ifelse				end			}{			} ifelse			set_crd		}		{			/MappedCSA CSA map_csa def			AGMCORE_host_sep level2 not and{				0 0 0 0 setcmykcolor			}{				[/Indexed MappedCSA 				level2 not has_color not and{					dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{						pop [/DeviceGray]					}if					HiVal GrayLookup				}{					HiVal 					currentdict/RangeArray known{						{ 							/indexed_colorspace_dict AGMCORE_gget begin							Lookup exch 							dup HiVal gt{								pop HiVal							}if							NComponents mul NComponents getinterval {} forall							NComponents 1 sub -1 0{								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range								NComponents 1 roll							}for							end						} bind					}{						Lookup					}ifelse				}ifelse				] setcolorspace_opt				set_crd			}ifelse		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep {		/indexed_colorspace_dict AGMCORE_gget dup /CSD known {			begin			CSD get_csd begin			map_indexed_devn			devn			end			end		}{			AGMCORE_gget/Lookup get 4 3 -1 roll map_index			pop setcmykcolor		} ifelse	}{		level3 not AGMCORE_in_rip_sep and /indexed_colorspace_dict AGMCORE_gget /CSD known and {			/indexed_colorspace_dict AGMCORE_gget /CSD get get_csd begin			map_indexed_devn			devn			end		}		{			setcolor		} ifelse	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave		dup clonedict begin		1 setgray		/Decode [0 1] def		/DataSource <FF> def		/MultipleDataSources false def		/BitsPerComponent 8 def		currentdict end		systemdict /image get exec		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/get_csa_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		1 dict begin		/name xdf		AGMCORE_CSA_cache		{			0 get name eq {				exit			}{				pop			} ifelse		}forall		end		end	}{		pop	} ifelse}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/pattern_buf_init{	/count get 0 0 put} def/pattern_buf_next{	dup /count get dup 0 get	dup 3 1 roll	1 add 0 xpt	get				} def/cachepattern_compress{	5 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	/string_size 16000 def	/readbuffer string_size string def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	/LZWFilter 	{		exch		dup length 0 eq {			pop		}{			patarray dup length 1 sub 3 -1 roll put		} ifelse		{string_size}{0}ifelse string	} /LZWEncode filter def	{ 				ReadFilter readbuffer readstring		exch LZWFilter exch writestring		not {exit} if	} loop	LZWFilter closefile	patarray					end}def/cachepattern{	2 dict begin	currentfile exch 0 exch /SubFileDecode filter /ReadFilter exch def	/patarray 20 dict def	currentglobal true setglobal 	patarray 1 array dup 0 1 put /count xpt	setglobal	{		ReadFilter 16000 string readstring exch		patarray dup length 1 sub 3 -1 roll put		not {exit} if	} loop	patarray dup dup length 1 sub () put						end	}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get		dup wrap_paintproc	}if}def/wrap_paintproc{   statusdict /currentfilenameextend known{	  begin		/OldPaintProc /PaintProc load def		/PaintProc		{		  mark exch		  dup /OldPaintProc get stopped		  {closefile restore end} if		  cleartomark		}  def	  end  } {pop} ifelse} def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix			  1 index begin		BBox 0 get XStep div cvi XStep mul /xshift exch neg def		BBox 1 get YStep div cvi YStep mul /yshift exch neg def		BBox 0 get xshift add		BBox 1 get yshift add		BBox 2 get xshift add		BBox 3 get yshift add		4 array astore		/BBox exch def		[ xshift yshift /translate load null /exec load ] dup		3 /PaintProc load put cvx /PaintProc exch def		end	gsave 0 setgray	makepattern	grestore}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			currentoverprint sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{	currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse	Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse		currentcolorspace dup type /arraytype eq			{0 get}if		/DeviceRGB eq			{			currentdict/UCR known				{/UCR}{/AGMCORE_currentucr}ifelse			load setundercolorremoval			currentdict/BG known 				{/BG}{/AGMCORE_currentbg}ifelse			load setblackgeneration			}if	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias	/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput	Adobe_AGM_Core begin	/setcustomcolor	{		dup /customcolor_tint exch AGMCORE_gput		current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		/AGMIRS_&fill where {pop AGMIRS_&fill}{fill} ifelse grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if	/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.23 0%%Copyright: Copyright 1997-2003 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.23 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict /Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{ /Adobe_CoolType_Core userdict /Adobe_CoolType_Core get def }ifuserdict /Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.23 def/Level2?	systemdict /languagelevel known dup		{ pop systemdict /languagelevel get 2 ge }	if defLevel2? not	{	/currentglobal false def	/setglobal /pop load def	/gcheck { pop false } bind def	/currentpacking false def	/setpacking /pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpacking/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel		2 copy known not			{ 2 copy 3 dict dup /args 7 index 5 add array put put get }			{			get dup /args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch /args exch put				}				{ pop }			ifelse			}		ifelse			begin			count 2 sub 1 index lt				{ pop count 1 sub }			if			dup /argCount exch def			dup 0 gt				{				exch 1 index 2 add 1 roll				args exch 0 exch getinterval 			astore pop				}				{ pop }			ifelse			count 1 sub /restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		end	} bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{ { pop } repeat }				{ pop }			ifelse			args 0 argCount getinterval {} forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{ { end } repeat }		{ pop }	ifelse	} bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	} bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	} bind def/@ReRaise	{	cvx $error /errorname get errordict exch get exec	stop	} bind def/@Stopped	{	0 @#Stopped	} bind def/@#Stopped	{	@_SaveStackLevels	stopped		{ @_RestoreStackLevels true }		{ @_PopStackLevels false }	ifelse	} bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get /args get exch get		end	} bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup begin		mark			{				(*) { pop stop } 128 string /Category			resourceforall			}		stopped		cleartomark		currentdict eq dup			{ end }		if		not		}		{ false }	ifelse	def/CTHasResourceStatusBug	Level2?		{		mark			{ /steveamerige /Category resourcestatus }		stopped			{ cleartomark true }			{ cleartomark currentglobal not }		ifelse		}		{ false }	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec				{ cleartomark false }				{ { 3 2 roll pop true } { cleartomark false } ifelse }			ifelse			end		} bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad /ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup /CMap CTHasResourceStatusBug						{ CTResourceStatus }						{ resourcestatus }					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup /CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{ exit }								{ stop }							ifelse							}						ifelse						}						{ pop }					ifelse					}				128 string /CMap resourceforall				}			stopped				{ cleartomark }			stopped pop			setglobal			}		if		}	if	} bind def/doc_setup	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mov /moveto load def		/nfnt /newencodedfont load def		/mfnt /makefont load def		/sfnt /setfont load def		/ufnt /undefinefont load def		/chp /charpath load def		/awsh /awidthshow load def		/wsh /widthshow load def		/ash /ashow load def		/sh /show load def		end	userdict /Adobe_CoolType_Data 10 dict dup		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end put	} bind def/doc_trailer	{	currentdict Adobe_CoolType_Core eq		{ end }	if	} bind def/page_setup	{	Adobe_CoolType_Core begin	} bind def/page_trailer	{	end	} bind def/unload	{	systemdict /languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{ undef }				{ pop pop }			ifelse			}		if		}	if	} bind def/ndf	{	1 index where		{ pop pop pop }		{ dup xcheck { bind } if def }	ifelse	} def/findfont systemdict	begin	userdict		begin		/globaldict where { /globaldict get begin } if			dup where pop exch get		/globaldict where { pop end } if		end	endAdobe_CoolType_Core_Defined	{ /systemfindfont exch def }	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{ pop } ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq { 0 } { dup length } ifelse	2 index length add 1 add dict		begin		exch			{			1 index /FID eq				{ pop pop }				{ def }			ifelse			}		forall		dup null eq			{ pop }			{ { def } forall }		ifelse		currentdict		end	exch setglobal	} bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	} bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index  known			{ SharedFontDirectory 3 index get /FontReferenced known }			{ false }		ifelse		}		{		FontDirectory 3 index known			{ FontDirectory 3 index get /FontReferenced known }			{			SharedFontDirectory 3 index known				{ SharedFontDirectory 3 index get /FontReferenced known }				{ false }			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont /FontReferenced get		2 index dup type /nametype eq			{findfont}		if ne			{ pop false }		if		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{ 2 copy get 3 index 3 1 roll put }		for		pop pop pop		}		{		dup type /nametype eq		  { findfont }	  if		dup dup maxlength 2 add dict			begin			exch				{				1 index /FID ne					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type /stringtype eq { cvn } if def dup			currentdict			end		definefont def		}	ifelse	} bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type /dicttype ne			{ 0 dict }		if		currentdict /$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{ def } forall					{ def } forall					currentdict					dup /$Init known						{ dup /$Init get exec }					if					end				/$Strategy exch def				}				{ pop pop pop }			ifelse			}			{ pop pop }		ifelse		end	} bind def/scff	{	$SubstituteFont		begin		dup type /stringtype eq			{ dup length exch }			{ null }		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{ $sname }			ifelse def		end		{ findfont }	@Stopped		{		dup length 8 add string exch		1 index 0 (BadFont:) putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{ findfont }		@Stopped			{ pop /Courier findfont }		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	} bind def/isWidthsOnlyFont	{	dup /WidthsOnly known		{ pop pop true }		{		dup /FDepVector known			{ /FDepVector get { isWidthsOnlyFont dup { exit } if } forall }			{			dup /FDArray known				{ /FDArray get { isWidthsOnlyFont dup { exit } if } forall }				{ pop }			ifelse			}		ifelse		}	ifelse	} bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 4 index def		/$doSmartSub false def		end	3 index	currentglobal false setglobal exch	/CompatibleFonts /ProcSet resourcestatus		{		pop pop		/CompatibleFonts /ProcSet findresource			begin			dup /CompatibleFont currentexception			1 index /CompatibleFont true setexception			1 index /Font resourcestatus				{				pop pop				3 2 roll setglobal				end				exch				dup findfont				/CompatibleFonts /ProcSet findresource					begin					3 1 roll exch /CompatibleFont exch setexception					end				}				{				3 2 roll setglobal				1 index exch /CompatibleFont exch setexception				end				findfont				$SubstituteFont /$substituteFound true put				}			ifelse		}		{ exch setglobal findfont }	ifelse	$SubstituteFont		begin		$substituteFound			{		 false		 (%%[Using embedded font ) print		 5 index ?str1 cvs print		 ( to avoid the font substitution problem noted earlier.]%%\n) print		 }			{			dup /FontName known				{				dup /FontName get $fontname eq				1 index /DistillerFauxFont known not and				/currentdistillerparams where					{ pop false 2 index isWidthsOnlyFont not and }				if				}				{ false }			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		exch pop exch pop exch		2 dict dup /Found 3 index put		exch findfont exch		}		{		exch exec		exch dup findfont		dup /FontType get 3 eq	  {		  exch ?str1 cvs		  dup length 1 sub		  -1 0		{			  exch dup 2 index get 42 eq			{				 exch 0 exch getinterval cvn 4 1 roll 3 2 roll pop				 exit			  }			  {exch pop} ifelse		  }for		}		{		 exch pop	  } ifelse		2 dict dup /Downloaded 6 5 roll put		}	ifelse	dup /FontName 4 index put copyfont definefont pop	} bind def/?str2 256 string def/?add	{	1 index type /integertype eq		{ exch true 4 2 }		{ false 3 1 }	ifelse	roll	1 index findfont	dup /Widths known		{		Adobe_CoolType_Data /AddWidths? true put		gsave dup 1000 scalefont setfont		}	if	/Downloaded known		{		exec		exch			{			exch ?str2 cvs exch			findfont /Downloaded get 1 dict begin /Downloaded 1 index def ?str1 cvs length			?str1 1 index 1 add 3 index putinterval			exch length 1 add 1 index add			?str1 2 index (*) putinterval			?str1 0 2 index getinterval cvn findfont 			?str1 3 index (+) putinterval			2 dict dup /FontName ?str1 0 6 index getinterval cvn put			dup /Downloaded Downloaded put end copyfont			dup /FontName get exch definefont pop pop pop			}			{			pop			}		ifelse		}		{		pop		exch			{			findfont			dup /Found get			dup length exch ?str1 cvs pop			?str1 1 index (+) putinterval			?str1 1 index 1 add 4 index ?str2 cvs putinterval			?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add add getinterval cvn			1 dict exch 1 index exch /FontName exch put copyfont			dup /FontName get exch definefont pop			}			{			pop			}		ifelse		}	ifelse	Adobe_CoolType_Data /AddWidths? get		{ grestore Adobe_CoolType_Data /AddWidths? false put }	if	} bind def/?sh	{	currentfont /Downloaded known { exch } if pop	} bind def/?chp	{	currentfont /Downloaded known { pop } { false chp } ifelse	} bind def/?mv 	{	currentfont /Downloaded known { moveto pop pop } { pop pop moveto } ifelse	} bind defsetpackinguserdict /$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{ get }			{ pop pop { pop /Courier } bind }		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams /CannotEmbedFontPolicy 2 copy known			{ get /Error eq }			{ pop pop false }		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup /WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type /stringtype eq { cvn } if def								/FontType 3 def								/FontMatrix [ .001 0 0 .001 0 0 ] def								/Encoding 256 array dup 0 1 255 { /.notdef put dup } for pop def								/FontBBox [ 0 0 0 0 ] def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth /y exch def /x exch def											x y setcharwidth											$SubstituteFont /$Strategy get /$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									} bind def								currentdict								end							exch setglobal							} bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup /WMode known										{ dup /WMode get }										{ 0 }									ifelse									/$WMode exch def									$fontname exch									dup /FontName known										{										dup /FontName get										dup type /stringtype eq { cvn } if										}										{ /unnamedfont }									ifelse									exch									Adobe_CoolType_Data /InVMDeepCopiedFonts get									1 index /FontName get known										{										pop										Adobe_CoolType_Data /InVMDeepCopiedFonts get										1 index get										null copyfont										}										{ $deepcopyfont }									ifelse									exch 1 index exch /FontBasedOn exch put									dup /FontName $fontname dup type /stringtype eq { cvn } if put									definefont									Adobe_CoolType_Data /InVMDeepCopiedFonts get										begin										dup /FontBasedOn get 1 index def										end									} bind def								/$Underprint									{									gsave									x abs y abs gt										{ /y 1000 def }										{ /x -1000 def 500 120 translate }									ifelse									Level2?										{										[ /Separation (All) /DeviceCMYK { 0 0 0 1 pop } ]										setcolorspace										}										{ 0 setgray }									ifelse									10 setlinewidth									x .8 mul									[ 7 3 ]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{ .2 setcolor }											{ .8 setgray }										ifelse										fill grestore										stroke										}									forall									pop									grestore									} bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict /FontName known											{											FontName											dup type /stringtype eq { cvn } if											}											{ /unnamedfont }										ifelse										def										/FontName $fontname dup type /stringtype eq { cvn } if def										/currentdistillerparams where											{ pop }											{											/FontInfo currentdict /FontInfo known												{ FontInfo null copyfont }												{ 2 dict }											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[ 1 0 ItalicAngle dup sin exch cos div 1 0 0 ]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									} bind def								end def						/$None							1 dict dup								begin								/$BuildFont {} bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type /stringtype eq { cvn } if						dup /$fontname exch def						$sname null eq							{ $str cvs dup length $slen sub $slen getinterval }							{ pop $sname }						ifelse						$fontpat dup 0 (fonts/*) putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont /$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{ /$match exch def exit }							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont /$dstack get								{								exch									{									1 index eq										{ pop false }										{ true }									ifelse									}									{ begin false }								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{ $match (fonts/) anchorsearch pop pop cvn }							{ /Courier }						ifelse						} bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1  [ /Ryumin-Light /HeiseiMin-W3										  /GothicBBB-Medium /HeiseiKakuGo-W5										  /HeiseiMaruGo-W4 /Jun101-Light ] def							/Korea1  [ /HYSMyeongJo-Medium /HYGoThic-Medium ] def							/GB1	  [ /STSong-Light /STHeiti-Regular ] def							/CNS1	 [ /MKai-Medium /MHei-Medium ] def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup /FontType get 0 eq							{							1 dict dup /FontName /copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup /FontName /copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{ $Strategies /$Type3Underprint get exec }						ifelse						} bind def					/$buildfontname						{						dup /CIDFont findresource /CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index (-) putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy (-) putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{ pop pop 3 2 roll putinterval cvn /$cmapname exch def }							{ pop pop pop pop pop }						ifelse						length						$str 1 index (-) putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						} bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{ get }								{ pop pop [] }							ifelse							}							{ pop pop [] }						ifelse						false exch							{							dup /CIDFont resourcestatus								{								pop pop								save								1 index /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get }									{ false }								ifelse								exch pop								exch restore									{ pop }									{ exch pop true exit }								ifelse								}								{ pop }							ifelse							}						forall							{ $str cvs $buildfontname }							{							false (*)								{								save exch								dup /CIDFont findresource								dup /WidthsOnly known									{ dup /WidthsOnly get not }									{ true }								ifelse								exch /CIDSystemInfo get								dup /Registry get Registry eq								exch /Ordering get Ordering eq and and									{ exch restore exch pop true exit }									{ pop restore }								ifelse								}							$str /CIDFont resourceforall								{ $buildfontname }								{ $fontname $findfontByEnum }							ifelse							}						ifelse						} bind def					end				end				currentdict /$error known currentdict /languagelevel known and dup					{ pop $error /SubstituteFont known }				if				dup					{ $error }					{ Adobe_CoolType_Core }				ifelse				begin					{					/SubstituteFont					/CMap /Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{ dup $str cvs dup length $slen sub $slen getinterval cvn }									{ $sname }								ifelse								Adobe_CoolType_Data /InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{ exch pop true exit }												{ pop }											ifelse											}											{											FontDirectory 1 index known												{ exch pop true exit }												{												GlobalFontDirectory 1 index known													{ exch pop true exit }													{ pop }												ifelse												}											ifelse											}										ifelse										}									forall									}									{ pop pop false }								ifelse									{									exch pop exch pop									}									{									dup /CMap resourcestatus										{										pop pop										dup /$cmapname exch def										/CMap findresource /CIDSystemInfo get { def } forall										$findfontByROS										}										{										128 string cvs										dup (-) search											{											3 1 roll search												{												3 1 roll pop													{ dup cvi }												stopped													{ pop pop pop pop pop $findfontByEnum }													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup /CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup /$cmapname exch def															/CMap findresource /CIDSystemInfo get { def } forall															$findfontByROS															true exit															}															{ pop }														ifelse														}													for													dup type /booleantype eq														{ pop }														{ pop pop pop $findfontByEnum }													ifelse													}												ifelse												}												{ pop pop pop $findfontByEnum }											ifelse											}											{ pop pop $findfontByEnum }										ifelse										}									ifelse									}								ifelse								}								{ //SubstituteFont exec }							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{ $findfontByEnum }								{ //SubstituteFont exec }							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core /scfindfont /systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup /FontName known								{ dup /FontName get dup 3 index ne }								{ /noname true }							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def /$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{ 1 index /FID eq { pop pop } { def } ifelse }										forall										currentdict										end									definefont									dup /FontName known { dup /FontName get } { null } ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using ) print										dup /FontName known											{ dup /FontName get } { (unspecified font) }										ifelse										$str cvs print (.\n) print										}									if									}									{ exch pop }								ifelse								}								{ exch pop }							ifelse							end						} bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core /findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type /stringtype ne { $str cvs } if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{ dup $inVMIndex $AddInVMFont }						if						$doSmartSub							{							currentdict /$Strategy known								{ $Strategy /$BuildFont get exec }							if							}						if						}					if					end				} bind put			}		if		}	if	end/$AddInVMFont	{	exch /FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data /InVMFontsByCMap get exch		$DictAdd		}		{ pop pop pop }	ifelse	} bind def/$DictAdd	{	2 copy known not		{ 2 copy 4 index length dict put }	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get { forall } def				2 copy currentdict put				end			}			{ pop }		ifelse		}	if	get		begin			{ def }		forall		end	} bind defendend%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.19 0systemdict /languagelevel known dup	{ currentglobal false setglobal }	{ false }ifelseexchuserdict /Adobe_CoolType_Utility 2 copy known	{ 2 copy get dup maxlength 25 add dict copy }	{ 25 dict }ifelse putAdobe_CoolType_Utility	begin	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch /eCCRun known not			ct_Level2? and or defct_Level2?	{ globaldict begin currentglobal true setglobal }if	/ct_AddStdCIDMap		ct_Level2?			{ {			((Hex) 57 StartData			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec			} }			{ {			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec			} }		ifelse bind defuserdict /cid_extensions knowndup { cid_extensions /cid_UpdateDB known and } if	 {	 cid_extensions	 begin	 /cid_GetCIDSystemInfo		 {		 1 index type /stringtype eq			 { exch cvn exch }		 if		 cid_extensions			 begin			 dup load 2 index known				 {				 2 copy				 cid_GetStatusInfo				 dup null ne					 {					 1 index load					 3 index get					 dup null eq						  { pop pop cid_UpdateDB }						  {						  exch						  1 index /Created get eq							  { exch pop exch pop }							  { pop cid_UpdateDB }						  ifelse						  }					 ifelse					 }					 { pop cid_UpdateDB }				 ifelse				 }				 { cid_UpdateDB }			 ifelse			 end		 } bind def	 end	 }ifct_Level2?	{ end setglobal }if	/ct_UseNativeCapability?  systemdict /composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring () def		/usewidths? true def		end def	ct_Level2? { setglobal } { pop } ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict /languagelevel known				{ pop /CIDFont findresource /GlyphDirectory get }				{				1 index /CIDFont findresource /GlyphDirectory				get dup type /dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			} def		/+			{			systemdict /languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{ 1 dict begin }			ifelse			/$ exch def			systemdict /languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			? { $ begin } if			} def		/? { $ type /dicttype eq } def		/| {			userdict /Adobe_CoolType_Data known				{			Adobe_CoolType_Data /AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					  begin						AddWidths?								{								Adobe_CoolType_Data /CC 3 index put								? { def } { $ 3 1 roll put } ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont /Widths get exch CC exch put								}								{ ? { def } { $ 3 1 roll put } ifelse }							ifelse					end				end				}				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse				}				{ ? { def } { $ 3 1 roll put } ifelse }			ifelse			} def		/!			{			? { end } if			systemdict /languagelevel known				{ gvm setglobal }			if			end			} def		/: { string currentfile exch readstring pop } executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx [.001 0 0 .001 0 0] def		/ct_1000Mtx [1000 0 0 1000 0 0] def		/ct_raise {exch cvx exch errordict exch get exec stop} bind def		/ct_reraise			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print					errordict exch get exec stop			} bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			} bind def		/ct_GetInterval			{			Adobe_CoolType_Utility /ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{ dup string /dst_string exch def }				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex  get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string  dst_index 2 index putinterval						length dst_index add /dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string  dst_index 2 index putinterval						pop dup dst_index add /dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							  { arrayIndex get }							  {							  pop							  exit							  }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			} bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{ /unknowninstancename /Category resourcestatus }			stopped				{ cleartomark setglobal true }				{ cleartomark currentglobal not exch setglobal }			ifelse				{					{					mark 3 1 roll /Category findresource						begin						ct_Vars /vm currentglobal put						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec							{ cleartomark false }							{ { 3 2 roll pop true } { cleartomark false } ifelse }						ifelse						ct_Vars /vm get setglobal						end					}				}				{ { resourcestatus } }			ifelse bind def			/CIDFont /Category ct_resourcestatus				{ pop pop }				{				currentglobal  true setglobal				/Generic /Category findresource				dup length dict copy				dup /InstanceType /dicttype put				/CIDFont exch /Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit /ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				  /Registry (Adobe) def				  /Ordering (Identity) def				  /Supplement 0 def				end def				/CMapName /Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000> <FFFF>				endcodespacerange				1 begincidrange				<0000> <FFFF> 0				endcidrange				endcmap				CMapName currentdict /CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont  10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{ pop pop /defineresource /undefined ct_raise }				ifelse				} bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{ get 3 1 roll pop pop}						{ pop pop /findresource /undefinedresource ct_raise }					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{ pop pop /findresource /undefined ct_raise }				ifelse				} bind def			/ct_resourcestatus /resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup (Binary) eq						{						pop						null						currentfile						ct_Level2?							{								{ cid_BYTE_COUNT () /SubFileDecode filter }							stopped								{ pop pop pop }							if							}						if						/readstring load						exit						}					if					dup (Hex) eq						{						pop						currentfile						ct_Level2?							{								{ null exch /ASCIIHexDecode filter /readstring }							stopped								{ pop exch pop (>) exch /readhexstring }							if							}							{ (>) exch /readhexstring }						ifelse						load						exit						}					if					/StartData /typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch /GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop /readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				} bind def			/StartData				{				mark					{					currentdict					dup /FDArray get 0 get /FontMatrix get					0 get 0.001 eq						{						dup /CDevProc known not							{							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known								{ get }								{								pop pop								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }								}							ifelse							def							}						if						}						{						 /CDevProc							 {							 pop pop pop pop pop							 0							 1 cid_temp /cid_CIDFONT get							 /FDArray get 0 get							 /FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							 } def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup /cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup /SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup /SubrMapOffset undef										dup /SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{ pop }								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict /CIDFont defineresource pop					end end					}				stopped					{ cleartomark /StartData ct_reraise }				if				} bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit /ProcSet ct_resourcestatus				{ true }				{ /CIDInitC /ProcSet ct_resourcestatus }			ifelse				{				pop pop				/CIDInit /ProcSet findresource				ct_UseNativeCapability?					{ pop null }					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }				ifelse				}				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }			ifelse			ct_Vars exch /ct_oldCIDInit exch put			} bind def		/ct_restoreCIDInit			{			ct_Vars /ct_oldCIDInit get dup null ne				{ /CIDInit exch /ProcSet defineresource pop }				{ pop }			ifelse			} bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility /ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{ pop 0 }						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{ get }								{ pop pop nullstring }							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{ 0 FDBytes ct_cvnsi }									{ pop 0 }								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{ /charstring nullstring def exit }								if								/cid 0 def								}							ifelse							}						loop			} def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			} def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont /Widths get cid					2 copy known						{ get exch pop aload pop }						{ pop pop stringwidth }					ifelse					}					{ stringwidth }				ifelse				setcharwidth				0 0 moveto				}			ifelse			} def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{ get }				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup /FontMatrix 2 copy known						{ get }						{ pop pop ct_defaultFontMtx }					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont /Widths get def					/CharStrings 1 dict dup /.notdef						<d841272cf18f54fc13> dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup /CharStrings get 1 index /Encoding get			ct_dfCharCode get charstring put			rootfont /WMode 2 copy known				{ get }				{ pop pop 0 }			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ ct_str1 show }			ifelse			} def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ ct_1000Mtx matrix concatmatrix concat }				{ pop }			ifelse			/Private get			Adobe_CoolType_Utility /ct_Level2? get not				{				ct_dfDict /Private				3 -1 roll					{ put }				1183615869 internaldict /superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility /ct_Level2? get				{ 1 index }				{ 3 index /Private get mark 6 1 roll }			ifelse			dup /RunInt known				{ /RunInt get }				{ pop /CCRun }			ifelse			get exec			Adobe_CoolType_Utility /ct_Level2? get not				{ cleartomark }			if			} bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility /ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{ stop }			if			end			end			end			end			} bind def		/BaseFontNameStr (BF00) def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix  [0.001 0 0 0.001 0 0] def			/FontBBox  [-250 -250 1250 1250] def			/Encoding ct_cHexEncoding def			/BuildChar /ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString /ct_Type3ShowCharString load def				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup /lenIV 4 put def				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def				/PaintType 0 def				/ct_ShowCharString /ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{ exit }				if				}			for			exch pop exch pop			} bind def		/ct_makeocf			{			15 dict				begin				exch /WMode exch def				exch /FontName exch def				/FontType 0 def				/FMapType 2 def			dup /FontMatrix known				{ dup /FontMatrix get /FontMatrix exch def }				{ /FontMatrix matrix def }			ifelse				/bfCount 1 index /CIDCount get 256 idiv 1 add					dup 256 gt { pop 256} if def				/Encoding					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for					bfCount 1 255 { 2 copy bfCount put pop } for					def				/FDepVector bfCount dup 256 lt { 1 add } if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont /FontBBox known						{ CIDFont /FontBBox get /FontBBox exch def }					if					CIDFont /CDevProc known						{ CIDFont /CDevProc get /CDevProc exch def }					if					currentdict					end				BaseFontNameStr 3 (0) putinterval				0 1 bfCount dup 256 eq { 1 sub } if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup /CIDFirstByte exch 256 mul def						FontType 3 eq							{ /ct_FDDict 2 dict def }						if						currentdict						end					1 index  16					BaseFontNameStr  2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont /Widths get						begin						exch /CIDFont get /GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{ exch pop }			ifelse			} bind def		/ct_ComposeFont			{			ct_UseNativeCapability?				{				2 index /CMap ct_resourcestatus					{ pop pop exch pop }					{					/CIDInit /ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch /WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry (Adobe) def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-) search									{									pop pop									(-) search										{										dup length string copy										exch pop exch pop										}										{ pop (Identity)}									ifelse									}									{ pop  (Identity)  }								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000> <FFFF>							endcodespacerange							1 begincidrange							<0000> <FFFF> 0							endcidrange							endcmap							CMapName currentdict /CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index /CMap ct_resourcestatus					{ pop pop }					{					/CIDInit /ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry (Adobe) def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-) search							{							pop pop							(-) search								{ dup length string copy exch pop exch pop }								{ pop (Identity) }							ifelse							}							{ pop (Identity) }						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000> <FFFF>					endcodespacerange					1 begincidrange					<0000> <FFFF> 0					endcidrange					endcmap					CMapName currentdict /CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get /CIDFont findresource				ct_makeocf				}			ifelse			} bind def		currentdict readonly pop		end	end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.%%Version: 1.0 0userdict /ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{  version  cvi  2015  ge} bind def/AllocGlyphStorage{  Is2015?  {			pop  }   { 		{string} forall  } ifelse} bind def/Type42DictBegin{	25 dict begin  /FontName exch def  /CharStrings 256 dict 	begin		  /.notdef 0 def		  currentdict 	end def  /Encoding exch def  /PaintType 0 def  /FontType 42 def  /FontMatrix [1 0 0 1 0 0] def  4 array  astore cvx /FontBBox exch def  /sfnts} bind def/Type42DictEnd  {	 currentdict dup /FontName get exch definefont end	ct_T42Dict exch	dup /FontName get exch put} bind def/RD {string currentfile exch readstring pop} executeonly def/PrepFor2015{	Is2015?	{		  		 /GlyphDirectory 		 16		 dict def		 sfnts 0 get		 dup		 2 index		 (glyx)		 putinterval		 2 index  		 (locx)		 putinterval		 pop		 pop	}	{		 pop		 pop	} ifelse			} bind def/AddT42Char{	Is2015?	{		/GlyphDirectory get 		begin		def		end		pop		pop	}	{		/sfnts get		4 index		get		3 index	  2 index		putinterval		pop		pop		pop		pop	} ifelse} bind defend%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2003 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 75 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd/AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/devnimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/devnimg /devn_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				use_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint {		0 get dup type /nametype eq {			dup /DeviceGray eq{				pop AGMCORE_black_plate not			}{				/DeviceCMYK eq{					AGMCORE_is_cmyk_sep not				}if			}ifelse		}{			false exch			{				 AGMOHS_sepink eq or			} forall			not		} ifelse	}{		pop false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict dup /MaskWidth known {/MaskWidth}{/Width} ifelse get def			/Height DataDict dup /MaskHeight known {/MaskHeight}{/Height} ifelse get def			/ImageMatrix [Width 0 0 Height neg 0 Height] def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [0 1] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/use_mask{	dup type /dicttype eq	{		dup /Mask known	{			dup /Mask get {				level3				{true}				{					dup /MaskWidth known {dup /MaskWidth get 1 index /Width get eq}{true}ifelse exch					dup /MaskHeight known {dup /MaskHeight get 1 index /Height get eq}{true}ifelse					3 -1 roll and				} ifelse			}			{false} ifelse		}		{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin	dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf	begin	gsave	0 1 translate 1 -1 Height div scale	1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse		<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [0 1]		>>		imagemask		grestore		0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc {			currentdict consumeimagedata		}		{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq DeviceN_PS2 not and {					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					use_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 						{							Names convert_to_process not {								2 dict begin								/imageDict xdf								/names_index 0 def								gsave								imageDict write_image_file {									Names {										dup (None) ne {											[/Separation 3 -1 roll /DeviceGray {1 exch sub}] setcolorspace											Operator imageDict read_image_file											names_index 0 eq {true setoverprint} if											/names_index names_index 1 add def										}{											pop										} ifelse									} forall									close_image_file								} if								grestore								end							}{								Operator /imagemask eq {									imagemask								}{									image								} ifelse							} ifelse						}{							Operator /imagemask eq {								imagemask							}{								image							} ifelse						} ifelse					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					/Adobe_AGM_OnHost_Seps where {						pop imagemask					}{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								AGMCORE_is_cmyk_sep{									MultipleDataSources{										/DataSource [											DataSource 0 get /exec cvx											DataSource 1 get /exec cvx											DataSource 2 get /exec cvx											DataSource 3 get /exec cvx											/AGMCORE_get_ink_data cvx										] cvx def									}{										/DataSource 										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 										/DataSource load										filter_cmyk 0 () /SubFileDecode filter def									}ifelse									/Decode [ Decode 0 get Decode 1 get ] def									/MultipleDataSources false def									/NComponents 1 def									/Operator /image def									invert_image_samples						 			1 AGMCORE_&setgray									currentdict imageormask_sys								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{									MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								use_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentcolorspace overprint_plate not{									knockout_unitsq								}if							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}ifelse	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentdict/ImageMatrix get concat						knockout_unitsq					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end}def/decode_image_sample{	4 1 roll exch dup 5 1 roll	sub 2 4 -1 roll exp 1 sub div mul add} bdf/colorSpaceElemCnt{	currentcolorspace 0 get dup /DeviceCMYK eq {		pop 4	}	{		/DeviceRGB eq {			pop 3		}{			1		} ifelse	} ifelse} bdf/devn_sep_datasource{	1 dict begin	/dataSource xdf	[		0 1 dataSource length 1 sub {			dup currentdict /dataSource get /exch cvx /get cvx /exec cvx			/exch cvx names_index /ne cvx [ /pop cvx ] cvx /if cvx		} for	] cvx bind	end} bdf		/devn_alt_datasource{	11 dict begin	/srcDataStrs xdf	/dstDataStr xdf	/convProc xdf	/origcolorSpaceElemCnt xdf	/origMultipleDataSources xdf	/origBitsPerComponent xdf	/origDecode xdf	/origDataSource xdf	/dsCnt origMultipleDataSources {origDataSource length}{1}ifelse def	/samplesNeedDecoding		0 0 1 origDecode length 1 sub {			origDecode exch get add		} for		origDecode length 2 div div		dup 1 eq {			/decodeDivisor 2 origBitsPerComponent exp 1 sub def		} if		2 origBitsPerComponent exp 1 sub ne	def	[		0 1 dsCnt 1 sub [			currentdict /origMultipleDataSources get {				dup currentdict /origDataSource get exch get dup type			}{				currentdict /origDataSource get dup type			} ifelse			dup /filetype eq {				pop currentdict /srcDataStrs get 3 -1 /roll cvx /get cvx /readstring cvx /pop cvx			}{				/stringtype ne {					/exec cvx				} if				currentdict /srcDataStrs get /exch cvx 3 -1 /roll cvx /xpt cvx			} ifelse		] cvx /for cvx		currentdict /srcDataStrs get 0 /get cvx /length cvx 0 /ne cvx [			0 1 Width 1 sub [				Adobe_AGM_Utils /AGMUTIL_ndx /xddf cvx				currentdict /origMultipleDataSources get {					0 1 dsCnt 1 sub [						Adobe_AGM_Utils /AGMUTIL_ndx1 /xddf cvx						currentdict /srcDataStrs get /AGMUTIL_ndx1 /load cvx /get cvx /AGMUTIL_ndx /load cvx /get cvx						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvxs								BitsPerComponent /decode_image_sample load /exec cvx							} ifelse						} if					] cvx /for cvx				}{					Adobe_AGM_Utils /AGMUTIL_ndx1 0 /ddf cvx					currentdict /srcDataStrs get 0 /get cvx /AGMUTIL_ndx /load cvx							currentdict /origDecode get length 2 idiv dup 3 1 /roll cvx /mul cvx /exch cvx /getinterval cvx 					[						samplesNeedDecoding {							currentdict /decodeDivisor known {								currentdict /decodeDivisor get /div cvx							}{								currentdict /origDecode get /AGMUTIL_ndx1 /load cvx 2 /mul cvx 2 /getinterval cvx /aload cvx /pop cvx								BitsPerComponent /decode_image_sample load /exec cvx								Adobe_AGM_Utils /AGMUTIL_ndx1 /AGMUTIL_ndx1 /load cvx 1 /add cvx /ddf cvx							} ifelse						} if					] cvx /forall cvx				} ifelse				currentdict /convProc get /exec cvx				currentdict /origcolorSpaceElemCnt get 1 sub -1 0 [					currentdict /dstDataStr get 3 1 /roll cvx /AGMUTIL_ndx /load cvx currentdict /origcolorSpaceElemCnt get /mul cvx /add cvx /exch cvx					currentdict /convProc get /filter_indexed_devn load ne {						255 /mul cvx /cvi cvx 					} if					/put cvx 				] cvx /for cvx			] cvx /for cvx			currentdict /dstDataStr get		] cvx /if cvx	] cvx bind	end} bdf/devn_imageormask{ 	/devicen_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	2 dict begin	dup dup	/dstDataStr exch /Width get colorSpaceElemCnt mul string def	/srcDataStrs [ 3 -1 roll begin		currentdict /MultipleDataSources known {MultipleDataSources {DataSource length}{1}ifelse}{1} ifelse		{			Width Decode length 2 div mul cvi string		} repeat		end ] def	begin	SkipImageProc {		currentdict consumeimagedata	}	{		save mark 		AGMCORE_producing_seps not {			level3 not {				Operator /imagemask ne {					/DataSource [						DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse						colorSpaceElemCnt /devicen_colorspace_dict AGMCORE_gget /TintTransform get 						dstDataStr srcDataStrs devn_alt_datasource /exec cvx						] cvx 0 () /SubFileDecode filter def					/MultipleDataSources false def					/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				} if			}if			currentdict imageormask 		}{			AGMCORE_host_sep{				Names convert_to_process {					CSA map_csa 0 get /DeviceCMYK eq {						/DataSource							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 							[							DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse							4 /devicen_colorspace_dict AGMCORE_gget /TintTransform get 							dstDataStr srcDataStrs devn_alt_datasource /exec cvx							] cvx						filter_cmyk 0 () /SubFileDecode filter def						/MultipleDataSources false def						/Decode [1 0] def						/DeviceGray setcolorspace			 			currentdict imageormask_sys 					}{						AGMCORE_report_unsupported_color_space						AGMCORE_black_plate {							/DataSource [								DataSource Decode BitsPerComponent currentdict /MultipleDataSources known {MultipleDataSources}{false} ifelse								CSA map_csa 0 get /DeviceRGB eq{3}{1}ifelse /devicen_colorspace_dict AGMCORE_gget /TintTransform get								dstDataStr srcDataStrs devn_alt_datasource /exec cvx								] cvx 0 () /SubFileDecode filter def							/MultipleDataSources false def							/Decode colorSpaceElemCnt [ exch {0 1} repeat ] def				 			currentdict imageormask_sys				 		}						{	 						gsave 	 						knockout_unitsq	 						grestore							currentdict consumeimagedata 						} ifelse 					} ifelse				}				{						/devicen_colorspace_dict AGMCORE_gget /names_index known {	 					Operator/imagemask ne{	 						MultipleDataSources {		 						/DataSource [ DataSource devn_sep_datasource /exec cvx ] cvx def								/MultipleDataSources false def	 						}{								/DataSource /DataSource load dstDataStr srcDataStrs 0 get filter_devn def	 						} ifelse							invert_image_samples	 					} if			 			currentdict imageormask_sys	 				}{	 					currentoverprint not Operator/imagemask eq and{							currentdict imageormask_sys 							}{							currentoverprint not								{	 							gsave 	 							knockout_unitsq	 							grestore								}if							currentdict consumeimagedata 			 			}ifelse	 				}ifelse	 			}ifelse 			}{				currentdict imageormask			}ifelse		}ifelse		cleartomark restore	}ifelse	end	end	end}def/imageormask_l2_overprint{	currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 						currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace				AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 						mark exch						dup	dup dup						AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse						AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse			imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark  		currentdict 		AGMCORE_host_sep{			Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget dup /CSA known {					/CSA get map_csa				}{					/CSD get get_csd /Names get				} ifelse				overprint_plate not{					knockout_unitsq				}if			}{				Indexed_DeviceN {					/devicen_colorspace_dict AGMCORE_gget /names_index known {			 			indexed_image_lev2_sep					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					} ifelse				}{		 			AGMCORE_is_cmyk_sep{						Operator /imagemask eq{							imageormask_sys						}{							level2{								indexed_image_lev2_sep							}{								indexed_image_lev1_sep							}ifelse						}ifelse					}{						currentoverprint not{							knockout_unitsq			 			}if			 			currentdict consumeimagedata					}ifelse				}ifelse			}ifelse 		}{			level2{				Indexed_DeviceN {					/indexed_colorspace_dict AGMCORE_gget begin					CSD get_csd begin				}{					/indexed_colorspace_dict AGMCORE_gget begin					CSA map_csa 0 get /DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and {						[/Indexed [/DeviceN [/Cyan /Magenta /Yellow /Black] /DeviceCMYK {}] HiVal Lookup]						setcolorspace					} if					end				} ifelse				imageormask				Indexed_DeviceN {					end					end				} if			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin		Indexed_DeviceN not {			currentcolorspace 			dup 1 /DeviceGray put			dup 3			currentcolorspace 2 get 1 add string			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub			{			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put			}for 			put	setcolorspace		} if		currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			use_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse	end end}def  /OPIimage  {  	dup type /dicttype ne{  		10 dict begin  			/DataSource xdf  			/ImageMatrix xdf  			/BitsPerComponent xdf  			/Height xdf  			/Width xdf  			/ImageType 1 def  			/Decode [0 1 def]  			currentdict  		end  	}if  	dup begin  		/NComponents 1 cdndf  		/MultipleDataSources false cdndf  		/SkipImageProc {false} cdndf  		/HostSepColorImage false cdndf  		/Decode [  				0   				currentcolorspace 0 get /Indexed eq{  					2 BitsPerComponent exp 1 sub  				}{  					1  				}ifelse  		] cdndf  		/Operator /image cdndf  	end  	/sep_colorspace_dict AGMCORE_gget null eq{  		imageormask  	}{  		gsave  		dup begin invert_image_samples end  		sep_imageormask  		grestore  	}ifelse  }def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def	/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def	{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}def/snap_to_device{	6 dict begin	matrix currentmatrix	dup 0 get 0 eq 1 index 3 get 0 eq and	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop	{		1 1 dtransform 0 gt exch 0 gt /AGMIMG_xSign? exch def /AGMIMG_ySign? exch def		0 0 transform		AGMIMG_ySign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		AGMIMG_xSign? {floor 0.1 sub}{ceiling 0.1 add} ifelse exch		itransform /AGMIMG_llY exch def /AGMIMG_llX exch def		1 1 transform		AGMIMG_ySign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		AGMIMG_xSign? {ceiling 0.1 add}{floor 0.1 sub} ifelse exch		itransform /AGMIMG_urY exch def /AGMIMG_urX exch def					[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub  AGMIMG_llX AGMIMG_llY] concat	}{	}ifelse	end} deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse					Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 						currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{					MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop				Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 				{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{				{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{				MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}			AGMCORE_get_ink_data currenttransfer addprocs settransfer			currentdict imageormask_sys		end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: StaggerLoc3D.svg 1%%EndPageComments%%BeginPageSetup/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 3.0-29, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>

 <rdf:Description rdf:about=''
  xmlns:pdf='http://ns.adobe.com/pdf/1.3/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:tiff='http://ns.adobe.com/tiff/1.0/'>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:xap='http://ns.adobe.com/xap/1.0/'
  xmlns:xapGImg='http://ns.adobe.com/xap/1.0/g/img/'>
  <xap:CreateDate>2008-03-27T23:03:56Z</xap:CreateDate>
  <xap:ModifyDate>2008-03-27T23:03:56Z</xap:ModifyDate>
  <xap:CreatorTool>Illustrator</xap:CreatorTool>
  <xap:Thumbnails>
   <rdf:Alt>
    <rdf:li rdf:parseType='Resource'>
     <xapGImg:format>JPEG</xapGImg:format>
     <xapGImg:width>256</xapGImg:width>
     <xapGImg:height>192</xapGImg:height>
     <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYqkuv+cfLvl+e2h1e5e2a6SWWNxBPLGsVvw9aSWSJHSJI/VUs0hUAb1oDirWledvK&#xA;GrXCWmn6zZ3F7IKpZJPGbinEtX0eXqfZHLp036YqjLDXdMv7/ULC2kc3mlukd7E8UsRUyLzQqZFU&#xA;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</xapGImg:image>
    </rdf:li>
   </rdf:Alt>
  </xap:Thumbnails>
 </rdf:Description>

 <rdf:Description rdf:about=''
  xmlns:dc='http://purl.org/dc/elements/1.1/'>
  <dc:format>application/postscript</dc:format>
 </rdf:Description>

</rdf:RDF>
</x:xmpmeta>
xpacket end='w'?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -261 translate[1 0 0 1 0 0 ]  concat% page clipgsavenewpathgsave % PSGState0 0 mo0 261 li351 261 li351 0 liclp[1 0 0 1 0 0 ] concat9 0 mo342 0 li342 261 li9 261 li9 0 lifalse sop/0 [/DeviceCMYK] add_csa0 0 0 0 cmykf252 58.5 mo216 94.5 li216 201.78 li252 165.78 li252 58.5 li0.117648 0.0862746 0.0117648 0 cmykf252 58.5 mo251.748 58.248 li215.748 94.248 li215.676 94.311 215.64 94.401 215.64 94.5 cv215.64 201.78 li215.64 201.924 215.73 202.059 215.865 202.113 cv216 202.168 216.154 202.14 216.252 202.032 cv252.252 166.032 li252.324 165.97 252.36 165.88 252.36 165.78 cv252.36 58.5 li252.36 58.356 252.27 58.221 252.136 58.167 cv252 58.113 251.847 58.14 251.748 58.248 cv252 58.5 li251.64 58.5 li251.64 165.78 li252 165.78 li251.748 165.528 li215.748 201.528 li216 201.78 li216.36 201.78 li216.36 94.5 li216 94.5 li216.252 94.752 li252.252 58.752 li252 58.5 li251.64 58.5 li252 58.5 li0 0 0 1 cmykf87.8755 217.487 mo81.0025 219.778 li83.2935 212.905 li87.8755 217.487 lif272.52 162.541 mo279 165.781 li272.52 169.02 li272.52 162.541 lif131.76 37.2598 mo135 30.7803 li138.241 37.2598 li131.76 37.2598 lif216 94.5 mo99 94.5 li135 58.5 li252 58.5 li216 94.5 li0.0117648 0.960785 0.913726 0 cmykf99 95.103 mo98.9823 95.103 98.9647 95.102 98.9472 95.1004 cv98.9647 95.1019 98.9822 95.103 99 95.103 cv98.9219 95.0974 mo98.9149 95.0964 98.908 95.0954 98.901 95.0942 cv98.908 95.0954 98.9149 95.0965 98.9219 95.0974 cv98.4863 94.8145 mo98.4831 94.8096 98.4803 94.8046 98.4773 94.7997 cv98.4801 94.8047 98.4832 94.8096 98.4863 94.8145 cv98.4689 94.7856 mo98.4593 94.7688 98.4502 94.7517 98.442 94.734 cv98.4283 94.6998 98.4184 94.6646 98.4112 94.6292 cv98.4233 94.6845 98.4428 94.7371 98.4689 94.7856 cv98.4077 94.6109 mo98.4068 94.6059 98.4061 94.601 98.4054 94.596 cv98.4062 94.6009 98.4067 94.606 98.4077 94.6109 cv98.628 94.0261 mo134.578 58.077 li134.686 57.96 134.838 57.897 135 57.897 cv252 57.897 li252.018 57.897 252.035 57.898 252.052 57.8995 cv252.035 57.8981 252.018 57.897 252 57.897 cv251.838 57.897 251.686 57.96 251.578 58.077 cv251.154 58.5 li135 58.5 li99.603 93.897 li99 93.897 li98.8595 93.897 98.7305 93.9455 98.628 94.0261 cv252.594 58.3981 mo252.594 58.3968 252.594 58.3955 252.594 58.3941 cv252.594 58.3955 252.594 58.3968 252.594 58.3981 cv252.589 58.3696 mo252.573 58.2974 252.544 58.2293 252.503 58.1691 cv252.524 58.1997 252.543 58.232 252.558 58.266 cv252.572 58.2999 252.582 58.3345 252.589 58.3696 cv252.499 58.1637 mo252.477 58.1325 252.452 58.1034 252.423 58.077 cv252.411 58.064 252.399 58.0519 252.386 58.0403 cv252.429 58.0761 252.467 58.1176 252.499 58.1637 cv252.37 58.027 mo252.369 58.0265 252.369 58.026 252.368 58.0256 cv252.369 58.026 252.369 58.0265 252.37 58.027 cv252.096 57.9052 mo252.091 57.9044 252.086 57.9036 252.081 57.9029 cv252.086 57.9037 252.091 57.9044 252.096 57.9052 cv0.490197 0.364706 0.345099 0.219608 cmykf216 95.103 mo216.021 95.103 216.042 95.102 216.062 95.0999 cv216.042 95.102 216.021 95.103 216 95.103 cv216.068 95.0991 mo216.126 95.0926 216.182 95.078 216.234 95.0562 cv216.181 95.0784 216.125 95.0927 216.068 95.0991 cv0 0 0 1 cmykf215.757 93.897 mo99.603 93.897 li135 58.5 li251.154 58.5 li215.757 93.897 li100.45 93.897 mo215.757 93.897 li250.552 59.103 li135.244 59.103 li100.45 93.897 li0.37255 0.94902 0.909804 0.360785 cmykf252 58.5 mo216 94.5 li252 58.5 li0.0117648 0.960785 0.913726 0 cmykf252.36 58.986 mo252.36 58.986 li252.423 58.923 li252.562 58.7847 252.623 58.5875 252.594 58.3981 cv252.6 58.4315 252.604 58.4655 252.604 58.5 cv252.604 58.662 252.54 58.815 252.423 58.923 cv252.36 58.986 li252.594 58.3941 mo252.592 58.3859 252.591 58.3778 252.589 58.3696 cv252.591 58.3777 252.592 58.3859 252.594 58.3941 cv252.503 58.1691 mo252.502 58.1673 252.5 58.1654 252.499 58.1637 cv252.5 58.1655 252.502 58.1673 252.503 58.1691 cv252.386 58.0403 mo252.38 58.0359 252.375 58.0312 252.37 58.027 cv252.375 58.0314 252.38 58.0357 252.386 58.0403 cv252.368 58.0256 mo252.289 57.9644 252.196 57.922 252.096 57.9052 cv252.197 57.9212 252.29 57.9619 252.368 58.0256 cv252.081 57.9029 mo252.071 57.9016 252.062 57.9004 252.052 57.8995 cv252.062 57.9004 252.071 57.9017 252.081 57.9029 cv0.490197 0.364706 0.345099 0.219608 cmykf252.36 58.986 mo252.36 58.5 li252.36 58.356 252.27 58.221 252.136 58.167 cv252.09 58.149 252.044 58.14 251.997 58.14 cv251.905 58.14 251.814 58.176 251.748 58.248 cv251.496 58.5 li251.154 58.5 li251.578 58.077 li251.686 57.96 251.838 57.897 252 57.897 cv252.018 57.897 252.035 57.8981 252.052 57.8995 cv252.062 57.9004 252.071 57.9016 252.081 57.9029 cv252.086 57.9036 252.091 57.9044 252.096 57.9052 cv252.196 57.922 252.289 57.9644 252.368 58.0256 cv252.369 58.026 252.369 58.0265 252.37 58.027 cv252.375 58.0312 252.38 58.0359 252.386 58.0403 cv252.399 58.0519 252.411 58.064 252.423 58.077 cv252.452 58.1034 252.477 58.1325 252.499 58.1637 cv252.5 58.1654 252.502 58.1673 252.503 58.1691 cv252.544 58.2293 252.573 58.2974 252.589 58.3696 cv252.591 58.3778 252.592 58.3859 252.594 58.3941 cv252.594 58.3955 252.594 58.3968 252.594 58.3981 cv252.623 58.5875 252.562 58.7847 252.423 58.923 cv252.36 58.986 li0.647059 0.509804 0.517648 0.552942 cmykf216.474 94.8725 mo216.555 94.7699 216.604 94.6408 216.604 94.5 cv216.604 94.4689 216.6 94.4386 216.596 94.4087 cv251.64 59.364 li251.64 59.706 li216.474 94.8725 li0.690197 0.552942 0.494118 0.552942 cmykf216.596 94.4087 mo216.576 94.2789 216.516 94.1624 216.427 94.0737 cv252 58.5 li216.427 94.0737 li252 58.5 li251.496 58.5 li251.748 58.248 li251.814 58.176 251.905 58.14 251.997 58.14 cv252.044 58.14 252.09 58.149 252.136 58.167 cv252.27 58.221 252.36 58.356 252.36 58.5 cv252.36 58.986 li251.64 59.706 li251.64 59.364 li216.596 94.4087 li252 58.5 mo252 58.5 li0 0 0 1 cmykf216.427 94.0737 mo216.318 93.9646 216.167 93.897 216 93.897 cv215.757 93.897 li251.154 58.5 li251.496 58.5 li252 58.5 li216.427 94.0737 li0.458824 0.913726 0.854902 0.705883 cmykf216.427 94.0737 mo216.427 94.0737 li252 58.5 li216.427 94.0737 li0.37255 0.94902 0.909804 0.360785 cmykf216 94.5 mo99 94.5 li216 94.5 li0.0117648 0.960785 0.913726 0 cmykf98.9472 95.1004 mo98.9387 95.0996 98.9303 95.0985 98.9219 95.0974 cv98.9303 95.0985 98.9387 95.0996 98.9472 95.1004 cv98.901 95.0942 mo98.7254 95.0652 98.5758 94.9605 98.4863 94.8145 cv98.5798 94.9596 98.7299 95.0645 98.901 95.0942 cv98.4773 94.7997 mo98.4745 94.7949 98.4715 94.7904 98.4689 94.7856 cv98.4716 94.7903 98.4744 94.795 98.4773 94.7997 cv98.4112 94.6292 mo98.4099 94.6231 98.4088 94.617 98.4077 94.6109 cv98.4087 94.617 98.41 94.6231 98.4112 94.6292 cv98.4054 94.596 mo98.4004 94.5647 98.397 94.5328 98.397 94.5 cv98.397 94.3076 98.4876 94.1365 98.628 94.0261 cv98.577 94.077 li98.4402 94.2139 98.3785 94.4084 98.4054 94.596 cv0.490197 0.364706 0.345099 0.219608 cmykf216.36 94.9829 mo216.36 94.9803 li216.383 94.9628 216.404 94.9441 216.423 94.923 cv216.474 94.8725 li216.441 94.9142 216.403 94.9512 216.36 94.9829 cv0.568628 0.435295 0.325491 0.2 cmykf216.062 95.0999 mo216.064 95.0997 216.066 95.0993 216.068 95.0991 cv216.066 95.0993 216.064 95.0997 216.062 95.0999 cv216.234 95.0562 mo216.279 95.0368 216.322 95.0111 216.36 94.9803 cv216.36 94.9829 li216.321 95.012 216.279 95.0371 216.234 95.0562 cv0 0 0 1 cmykf215.64 95.103 mo99 95.103 li98.9822 95.103 98.9647 95.1019 98.9472 95.1004 cv98.9387 95.0996 98.9303 95.0985 98.9219 95.0974 cv98.9149 95.0965 98.908 95.0954 98.901 95.0942 cv98.7299 95.0645 98.5798 94.9596 98.4863 94.8145 cv98.4832 94.8096 98.4801 94.8047 98.4773 94.7997 cv98.4744 94.795 98.4716 94.7903 98.4689 94.7856 cv98.4428 94.7371 98.4233 94.6845 98.4112 94.6292 cv98.41 94.6231 98.4087 94.617 98.4077 94.6109 cv98.4067 94.606 98.4062 94.6009 98.4054 94.596 cv98.3785 94.4084 98.4402 94.2139 98.577 94.077 cv98.628 94.0261 li98.7305 93.9455 98.8595 93.897 99 93.897 cv99.603 93.897 li99 94.5 li215.402 94.5 li99 94.5 li215.402 94.5 li215.402 94.653 215.46 94.806 215.578 94.923 cv215.597 94.943 215.619 94.9605 215.64 94.9771 cv215.64 95.103 li0.647059 0.509804 0.517648 0.552942 cmykf216.36 94.9803 mo216.36 94.9771 li216.382 94.9605 216.404 94.943 216.423 94.923 cv216.404 94.9441 216.383 94.9628 216.36 94.9803 cv0.690197 0.552942 0.494118 0.552942 cmykf216 95.103 mo215.64 95.103 li215.64 94.9771 li215.747 95.0576 215.874 95.0985 216 95.0985 cv216.127 95.0985 216.254 95.0576 216.36 94.9771 cv216.36 94.9803 li216.322 95.0111 216.279 95.0368 216.234 95.0562 cv216.182 95.078 216.126 95.0926 216.068 95.0991 cv216.066 95.0993 216.064 95.0997 216.062 95.0999 cv216.042 95.102 216.021 95.103 216 95.103 cv0 0 0 1 cmykf215.402 94.5 mo99 94.5 li99.603 93.897 li215.757 93.897 li215.578 94.077 li215.46 94.194 215.402 94.347 215.402 94.5 cv0.458824 0.913726 0.854902 0.705883 cmykf215.64 94.9771 mo215.619 94.9605 215.597 94.943 215.578 94.923 cv215.46 94.806 215.402 94.653 215.402 94.5 cv215.64 94.5 li215.64 94.9771 li0.69804 0.560785 0.580393 0.792157 cmykf216.36 94.9771 mo216.36 94.644 li216.596 94.4087 li216.6 94.4386 216.604 94.4689 216.604 94.5 cv216.604 94.6408 216.555 94.7699 216.474 94.8725 cv216.423 94.923 li216.404 94.943 216.382 94.9605 216.36 94.9771 cv0.603922 0.49804 0.470589 0.815687 cmykf216 95.0985 mo215.874 95.0985 215.747 95.0576 215.64 94.9771 cv215.64 94.5 li216 94.5 li215.64 94.5 li216 94.5 li216.427 94.0737 li216 94.5 li216.427 94.0737 li216.516 94.1624 216.576 94.2789 216.596 94.4087 cv216.36 94.644 li216.36 94.9771 li216.254 95.0576 216.127 95.0985 216 95.0985 cv0 0 0 1 cmykf216 94.5 mo215.64 94.5 li215.402 94.5 li215.402 94.347 215.46 94.194 215.578 94.077 cv215.757 93.897 li216 93.897 li216 94.5 li216 94.5 mo216 93.897 li216.167 93.897 216.318 93.9646 216.427 94.0737 cv216 94.5 li0.286275 0.447059 0.392157 0.901961 cmykf216 94.5 mo216.427 94.0737 li216 94.5 li0.458824 0.913726 0.854902 0.705883 cmykf216 94.5 mo215.64 94.5 li215.402 94.5 li99 94.5 li215.402 94.5 li215.64 94.5 li216 94.5 li0.37255 0.94902 0.909804 0.360785 cmykf216 147.78 mo99 147.78 li135 111.78 li252 111.78 li216 147.78 li0.0117648 0.960785 0.913726 0 cmykf99 148.384 mo98.9823 148.384 98.9647 148.382 98.9472 148.381 cv98.9647 148.382 98.9822 148.384 99 148.384 cv98.9219 148.378 mo98.9149 148.377 98.908 148.376 98.901 148.375 cv98.908 148.376 98.9149 148.377 98.9219 148.378 cv98.4863 148.095 mo98.4831 148.09 98.4803 148.085 98.4773 148.08 cv98.4801 148.085 98.4832 148.09 98.4863 148.095 cv98.4689 148.066 mo98.4593 148.049 98.4502 148.032 98.442 148.014 cv98.4283 147.98 98.4184 147.945 98.4112 147.91 cv98.4233 147.965 98.4428 148.018 98.4689 148.066 cv98.4077 147.891 mo98.4068 147.886 98.4061 147.881 98.4054 147.876 cv98.4062 147.881 98.4067 147.886 98.4077 147.891 cv98.628 147.307 mo134.578 111.357 li134.686 111.24 134.838 111.177 135 111.177 cv215.64 111.177 li215.64 111.78 li135 111.78 li99.603 147.178 li99 147.178 li98.8595 147.178 98.7305 147.226 98.628 147.307 cv0.490197 0.364706 0.345099 0.219608 cmykf251.154 111.78 mo216.36 111.78 li216.36 111.177 li251.64 111.177 li251.64 111.3 li251.618 111.318 251.597 111.336 251.578 111.357 cv251.154 111.78 li0.568628 0.435295 0.325491 0.2 cmykf216.36 111.78 mo215.64 111.78 li215.64 111.177 li216.36 111.177 li216.36 111.78 li251.64 111.3 mo251.64 111.177 li252 111.177 li252.018 111.177 252.035 111.178 252.052 111.18 cv252.035 111.179 252.018 111.177 252 111.177 cv251.868 111.177 251.741 111.22 251.64 111.3 cv0 0 0 1 cmykf252.437 111.372 mo252.434 111.368 252.431 111.365 252.427 111.361 cv252.431 111.365 252.434 111.368 252.437 111.372 cv252.41 111.345 mo252.407 111.342 252.405 111.339 252.402 111.336 cv252.405 111.339 252.407 111.342 252.41 111.345 cv0.490197 0.364706 0.345099 0.219608 cmykf252.096 111.186 mo252.091 111.185 252.086 111.184 252.081 111.183 cv252.086 111.184 252.091 111.185 252.096 111.186 cv0 0 0 1 cmykf215.757 147.178 mo99.603 147.178 li135 111.78 li215.64 111.78 li216.36 111.78 li251.154 111.78 li215.757 147.178 li100.45 147.178 mo215.757 147.178 li250.552 112.383 li135.244 112.383 li100.45 147.178 li0.37255 0.94902 0.909804 0.360785 cmykf252 111.78 mo216 147.78 li252 111.78 li0.0117648 0.960785 0.913726 0 cmykf216 148.384 mo216.021 148.384 216.042 148.382 216.062 148.38 cv216.042 148.382 216.021 148.384 216 148.384 cv0 0 0 1 cmykf216.068 148.38 mo216.126 148.373 216.182 148.358 216.234 148.337 cv216.181 148.359 216.125 148.373 216.068 148.38 cvf252.36 112.266 mo252.36 112.266 li252.423 112.203 li252.594 112.032 252.648 111.772 252.558 111.556 cv252.528 111.487 252.487 111.425 252.437 111.372 cv252.545 111.479 252.604 111.625 252.604 111.78 cv252.604 111.942 252.54 112.095 252.423 112.203 cv252.36 112.266 li0.490197 0.364706 0.345099 0.219608 cmykf252.427 111.361 mo252.422 111.356 252.416 111.35 252.41 111.345 cv252.415 111.349 252.419 111.353 252.423 111.357 cv252.425 111.359 252.426 111.36 252.427 111.361 cv252.402 111.336 mo252.388 111.324 252.375 111.313 252.36 111.302 cv252.36 111.3 li252.375 111.311 252.388 111.324 252.402 111.336 cvf252.36 111.302 mo252.283 111.243 252.193 111.202 252.096 111.186 cv252.193 111.201 252.284 111.24 252.36 111.3 cv252.36 111.302 li252.081 111.183 mo252.071 111.182 252.062 111.181 252.052 111.18 cv252.062 111.181 252.071 111.182 252.081 111.183 cv0 0 0 1 cmykf252.36 112.266 mo252.36 111.302 li252.375 111.313 252.388 111.324 252.402 111.336 cv252.405 111.339 252.407 111.342 252.41 111.345 cv252.416 111.35 252.422 111.356 252.427 111.361 cv252.431 111.365 252.434 111.368 252.437 111.372 cv252.487 111.425 252.528 111.487 252.558 111.556 cv252.648 111.772 252.594 112.032 252.423 112.203 cv252.36 112.266 li0.647059 0.509804 0.517648 0.552942 cmykf216.474 148.153 mo216.555 148.05 216.604 147.921 216.604 147.78 cv216.604 147.614 216.536 147.463 216.427 147.354 cv251.64 112.14 li251.64 112.986 li216.474 148.153 li251.64 111.78 mo251.154 111.78 li251.578 111.357 li251.597 111.336 251.618 111.318 251.64 111.3 cv251.64 111.78 li0.690197 0.552942 0.494118 0.552942 cmykf251.64 112.986 mo251.64 112.14 li252 111.78 li251.64 112.14 li252 111.78 li251.64 111.78 li251.64 111.3 li251.741 111.22 251.868 111.177 252 111.177 cv252.018 111.177 252.035 111.179 252.052 111.18 cv252.062 111.181 252.071 111.182 252.081 111.183 cv252.086 111.184 252.091 111.185 252.096 111.186 cv252.193 111.202 252.283 111.243 252.36 111.302 cv252.36 112.266 li251.64 112.986 li0 0 0 1 cmykf216.427 147.354 mo216.318 147.245 216.167 147.178 216 147.178 cv215.757 147.178 li251.154 111.78 li251.64 111.78 li252 111.78 li251.64 112.14 li216.427 147.354 li0.458824 0.913726 0.854902 0.705883 cmykf216.427 147.354 mo216.427 147.354 li251.64 112.14 li252 111.78 li251.64 112.14 li216.427 147.354 li0.37255 0.94902 0.909804 0.360785 cmykf216 147.78 mo99 147.78 li216 147.78 li0.0117648 0.960785 0.913726 0 cmykf98.9472 148.381 mo98.9387 148.38 98.9303 148.379 98.9219 148.378 cv98.9303 148.379 98.9387 148.38 98.9472 148.381 cv98.901 148.375 mo98.7254 148.346 98.5758 148.241 98.4863 148.095 cv98.5798 148.24 98.7299 148.345 98.901 148.375 cv98.4773 148.08 mo98.4745 148.075 98.4715 148.071 98.4689 148.066 cv98.4716 148.071 98.4744 148.075 98.4773 148.08 cv98.4112 147.91 mo98.4099 147.904 98.4088 147.897 98.4077 147.891 cv98.4087 147.897 98.41 147.904 98.4112 147.91 cv98.4054 147.876 mo98.4004 147.845 98.397 147.813 98.397 147.78 cv98.397 147.588 98.4876 147.417 98.628 147.307 cv98.577 147.358 li98.4402 147.494 98.3785 147.689 98.4054 147.876 cv0.490197 0.364706 0.345099 0.219608 cmykf215.64 148.384 mo99 148.384 li98.9822 148.384 98.9647 148.382 98.9472 148.381 cv98.9387 148.38 98.9303 148.379 98.9219 148.378 cv98.9149 148.377 98.908 148.376 98.901 148.375 cv98.7299 148.345 98.5798 148.24 98.4863 148.095 cv98.4832 148.09 98.4801 148.085 98.4773 148.08 cv98.4744 148.075 98.4716 148.071 98.4689 148.066 cv98.4428 148.018 98.4233 147.965 98.4112 147.91 cv98.41 147.904 98.4087 147.897 98.4077 147.891 cv98.4067 147.886 98.4062 147.881 98.4054 147.876 cv98.3785 147.689 98.4402 147.494 98.577 147.358 cv98.628 147.307 li98.7305 147.226 98.8595 147.178 99 147.178 cv99.603 147.178 li99 147.78 li215.402 147.78 li99 147.78 li215.402 147.78 li215.402 147.934 215.46 148.086 215.578 148.204 cv215.597 148.225 215.618 148.243 215.64 148.261 cv215.64 148.384 li0.647059 0.509804 0.517648 0.552942 cmykf216 148.384 mo215.64 148.384 li215.64 148.261 li215.741 148.341 215.868 148.384 216 148.384 cv0 0 0 1 cmykf215.402 147.78 mo99 147.78 li99.603 147.178 li215.757 147.178 li215.578 147.358 li215.46 147.474 215.402 147.628 215.402 147.78 cv0.458824 0.913726 0.854902 0.705883 cmykf216.062 148.38 mo216.064 148.38 216.066 148.38 216.068 148.38 cv216.066 148.38 216.064 148.38 216.062 148.38 cv0 0 0 1 cmykf216.36 148.263 mo216.36 148.261 li216.383 148.243 216.404 148.225 216.423 148.204 cv216.474 148.153 li216.441 148.195 216.403 148.232 216.36 148.263 cv0.568628 0.435295 0.325491 0.2 cmykf216.234 148.337 mo216.279 148.317 216.322 148.292 216.36 148.261 cv216.36 148.263 li216.321 148.292 216.279 148.318 216.234 148.337 cv0 0 0 1 cmykf215.64 148.261 mo215.618 148.243 215.597 148.225 215.578 148.204 cv215.46 148.086 215.402 147.934 215.402 147.78 cv215.64 147.78 li215.64 148.261 li0.69804 0.560785 0.580393 0.792157 cmykf216.36 148.261 mo216.36 147.42 li216.427 147.354 li216.536 147.463 216.604 147.614 216.604 147.78 cv216.604 147.921 216.555 148.05 216.474 148.153 cv216.423 148.204 li216.404 148.225 216.383 148.243 216.36 148.261 cv0.603922 0.49804 0.470589 0.815687 cmykf216 148.384 mo216 148.384 li215.868 148.384 215.741 148.341 215.64 148.261 cv215.64 147.78 li216 147.78 li215.64 147.78 li216 147.78 li216.36 147.42 li216 147.78 li216.36 147.42 li216.36 148.261 li216.322 148.292 216.279 148.317 216.234 148.337 cv216.182 148.358 216.126 148.373 216.068 148.38 cv216.066 148.38 216.064 148.38 216.062 148.38 cv216.042 148.382 216.021 148.384 216 148.384 cv0 0 0 1 cmykf216 147.78 mo215.64 147.78 li215.402 147.78 li215.402 147.628 215.46 147.474 215.578 147.358 cv215.757 147.178 li216 147.178 li216 147.78 li216 147.78 mo216 147.178 li216.167 147.178 216.318 147.245 216.427 147.354 cv216.36 147.42 li216 147.78 li0.286275 0.447059 0.392157 0.901961 cmykf216 147.78 mo216.36 147.42 li216.427 147.354 li216.36 147.42 li216 147.78 li0.458824 0.913726 0.854902 0.705883 cmykf216 147.78 mo215.64 147.78 li215.402 147.78 li99 147.78 li215.402 147.78 li215.64 147.78 li216 147.78 li0.37255 0.94902 0.909804 0.360785 cmykf216 201.78 mo99 201.78 li135 165.78 li252 165.78 li216 201.78 li0.0117648 0.960785 0.913726 0 cmykf99 202.384 mo98.9823 202.384 98.9647 202.382 98.9472 202.381 cv98.9647 202.382 98.9822 202.384 99 202.384 cv98.9219 202.378 mo98.9149 202.377 98.908 202.376 98.901 202.375 cv98.908 202.376 98.9149 202.377 98.9219 202.378 cv98.4863 202.095 mo98.4831 202.09 98.4803 202.085 98.4773 202.08 cv98.4801 202.085 98.4832 202.09 98.4863 202.095 cv98.4689 202.066 mo98.4593 202.049 98.4502 202.032 98.442 202.014 cv98.4283 201.98 98.4184 201.945 98.4112 201.91 cv98.4233 201.965 98.4428 202.018 98.4689 202.066 cv98.4077 201.891 mo98.4068 201.886 98.4061 201.881 98.4054 201.876 cv98.4062 201.881 98.4067 201.886 98.4077 201.891 cv98.628 201.307 mo134.578 165.358 li134.686 165.24 134.838 165.178 135 165.178 cv215.64 165.178 li215.64 165.78 li135 165.78 li99.603 201.177 li99 201.177 li98.8595 201.177 98.7305 201.226 98.628 201.307 cv252.421 165.356 mo252.402 165.336 252.382 165.319 252.36 165.303 cv252.36 165.302 li252.382 165.319 252.402 165.336 252.421 165.356 cv0.490197 0.364706 0.345099 0.219608 cmykf251.154 165.78 mo216.36 165.78 li216.36 165.178 li251.64 165.178 li251.64 165.303 li251.619 165.32 251.597 165.338 251.578 165.358 cv251.154 165.78 li0.568628 0.435295 0.325491 0.2 cmykf216.36 165.78 mo215.64 165.78 li215.64 165.178 li216.36 165.178 li216.36 165.78 li252.36 165.303 mo252.254 165.223 252.127 165.182 252 165.182 cv251.874 165.182 251.747 165.223 251.64 165.303 cv251.64 165.178 li252 165.178 li252.134 165.178 252.258 165.224 252.36 165.302 cv252.36 165.303 li0 0 0 1 cmykf252.437 165.372 mo252.434 165.368 252.431 165.365 252.427 165.361 cv252.431 165.365 252.434 165.368 252.437 165.372 cv0.490197 0.364706 0.345099 0.219608 cmykf215.757 201.177 mo99.603 201.177 li135 165.78 li215.64 165.78 li216.36 165.78 li251.154 165.78 li215.757 201.177 li100.45 201.177 mo215.757 201.177 li250.552 166.384 li135.244 166.384 li100.45 201.177 li0.37255 0.94902 0.909804 0.360785 cmykf252 165.78 mo216 201.78 li252 165.78 li0.0117648 0.960785 0.913726 0 cmykf216 202.384 mo216.021 202.384 216.042 202.382 216.062 202.38 cv216.042 202.382 216.021 202.384 216 202.384 cv0.647059 0.509804 0.517648 0.552942 cmykf216.068 202.38 mo216.126 202.373 216.182 202.358 216.234 202.337 cv216.181 202.359 216.125 202.373 216.068 202.38 cvf216.474 202.153 mo216.474 202.153 li252.423 166.203 li252.594 166.032 252.648 165.772 252.558 165.556 cv252.528 165.487 252.487 165.425 252.437 165.372 cv252.545 165.479 252.604 165.625 252.604 165.78 cv252.604 165.942 252.54 166.096 252.423 166.203 cv216.474 202.153 li252.427 165.361 mo252.425 165.359 252.423 165.358 252.421 165.356 cv252.422 165.356 252.423 165.357 252.423 165.358 cv252.425 165.359 252.426 165.36 252.427 165.361 cv0.490197 0.364706 0.345099 0.219608 cmykf216.474 202.153 mo216.555 202.05 216.604 201.921 216.604 201.78 cv216.604 201.749 216.6 201.719 216.596 201.689 cv252.252 166.032 li252.324 165.97 252.36 165.88 252.36 165.78 cv252.36 165.303 li252.382 165.319 252.402 165.336 252.421 165.356 cv252.423 165.358 252.425 165.359 252.427 165.361 cv252.431 165.365 252.434 165.368 252.437 165.372 cv252.487 165.425 252.528 165.487 252.558 165.556 cv252.648 165.772 252.594 166.032 252.423 166.203 cv216.474 202.153 li0.647059 0.509804 0.517648 0.552942 cmykf251.496 165.78 mo251.154 165.78 li251.578 165.358 li251.597 165.338 251.619 165.32 251.64 165.303 cv251.64 165.636 li251.496 165.78 li0.690197 0.552942 0.494118 0.552942 cmykf216.596 201.689 mo216.576 201.559 216.516 201.443 216.427 201.354 cv252 165.78 li216.427 201.354 li252 165.78 li251.496 165.78 li251.64 165.636 li251.64 165.303 li251.747 165.223 251.874 165.182 252 165.182 cv252.127 165.182 252.254 165.223 252.36 165.303 cv252.36 165.78 li252.36 165.88 252.324 165.97 252.252 166.032 cv216.596 201.689 li252 165.78 mo252 165.78 li0 0 0 1 cmykf216.427 201.354 mo216.318 201.245 216.167 201.177 216 201.177 cv215.757 201.177 li251.154 165.78 li251.496 165.78 li252 165.78 li216.427 201.354 li0.458824 0.913726 0.854902 0.705883 cmykf216.427 201.354 mo216.427 201.354 li252 165.78 li216.427 201.354 li0.37255 0.94902 0.909804 0.360785 cmykf216 201.78 mo99 201.78 li216 201.78 li0.0117648 0.960785 0.913726 0 cmykf98.9472 202.381 mo98.9387 202.38 98.9303 202.379 98.9219 202.378 cv98.9303 202.379 98.9387 202.38 98.9472 202.381 cv98.901 202.375 mo98.7254 202.346 98.5758 202.241 98.4863 202.095 cv98.5798 202.24 98.7299 202.345 98.901 202.375 cv98.4773 202.08 mo98.4745 202.075 98.4715 202.071 98.4689 202.066 cv98.4716 202.071 98.4744 202.075 98.4773 202.08 cv98.4112 201.91 mo98.4099 201.904 98.4088 201.897 98.4077 201.891 cv98.4087 201.897 98.41 201.904 98.4112 201.91 cv98.4054 201.876 mo98.4004 201.845 98.397 201.813 98.397 201.78 cv98.397 201.588 98.4876 201.417 98.628 201.307 cv98.577 201.358 li98.4402 201.494 98.3785 201.689 98.4054 201.876 cv0.490197 0.364706 0.345099 0.219608 cmykf216 202.384 mo99 202.384 li98.9822 202.384 98.9647 202.382 98.9472 202.381 cv98.9387 202.38 98.9303 202.379 98.9219 202.378 cv98.9149 202.377 98.908 202.376 98.901 202.375 cv98.7299 202.345 98.5798 202.24 98.4863 202.095 cv98.4832 202.09 98.4801 202.085 98.4773 202.08 cv98.4744 202.075 98.4716 202.071 98.4689 202.066 cv98.4428 202.018 98.4233 201.965 98.4112 201.91 cv98.41 201.904 98.4087 201.897 98.4077 201.891 cv98.4067 201.886 98.4062 201.881 98.4054 201.876 cv98.3785 201.689 98.4402 201.494 98.577 201.358 cv98.628 201.307 li98.7305 201.226 98.8595 201.177 99 201.177 cv99.603 201.177 li99 201.78 li215.402 201.78 li99 201.78 li215.402 201.78 li215.402 201.934 215.46 202.086 215.578 202.203 cv215.686 202.32 215.838 202.384 216 202.384 cv0.647059 0.509804 0.517648 0.552942 cmykf215.402 201.78 mo99 201.78 li99.603 201.177 li215.757 201.177 li215.578 201.358 li215.46 201.474 215.402 201.628 215.402 201.78 cv0.458824 0.913726 0.854902 0.705883 cmykf216.062 202.38 mo216.064 202.38 216.066 202.38 216.068 202.38 cv216.066 202.38 216.064 202.38 216.062 202.38 cv216.234 202.337 mo216.305 202.306 216.37 202.262 216.423 202.203 cv216.474 202.153 li216.411 202.233 216.329 202.297 216.234 202.337 cv0.490197 0.364706 0.345099 0.219608 cmykf216 202.384 mo216 202.384 li215.838 202.384 215.686 202.32 215.578 202.203 cv215.46 202.086 215.402 201.934 215.402 201.78 cv215.64 201.78 li215.64 201.924 215.73 202.059 215.865 202.113 cv215.91 202.132 215.957 202.14 216.004 202.14 cv216.096 202.14 216.186 202.104 216.252 202.032 cv216.596 201.689 li216.6 201.719 216.604 201.749 216.604 201.78 cv216.604 201.921 216.555 202.05 216.474 202.153 cv216.423 202.203 li216.37 202.262 216.305 202.306 216.234 202.337 cv216.182 202.358 216.126 202.373 216.068 202.38 cv216.066 202.38 216.064 202.38 216.062 202.38 cv216.042 202.382 216.021 202.384 216 202.384 cv0.69804 0.560785 0.580393 0.792157 cmykf216.004 202.14 mo215.957 202.14 215.91 202.132 215.865 202.113 cv215.73 202.059 215.64 201.924 215.64 201.78 cv216 201.78 li215.64 201.78 li216 201.78 li216.427 201.354 li216 201.78 li216.427 201.354 li216.516 201.443 216.576 201.559 216.596 201.689 cv216.252 202.032 li216.186 202.104 216.096 202.14 216.004 202.14 cv0 0 0 1 cmykf216 201.78 mo215.64 201.78 li215.402 201.78 li215.402 201.628 215.46 201.474 215.578 201.358 cv215.757 201.177 li216 201.177 li216 201.78 li216 201.78 mo216 201.177 li216.167 201.177 216.318 201.245 216.427 201.354 cv216 201.78 li0.286275 0.447059 0.392157 0.901961 cmykf216 201.78 mo216.427 201.354 li216 201.78 li0.458824 0.913726 0.854902 0.705883 cmykf216 201.78 mo215.64 201.78 li215.402 201.78 li99 201.78 li215.402 201.78 li215.64 201.78 li216 201.78 li0.37255 0.94902 0.909804 0.360785 cmykf0 0 0 1 cmyk%ADOBeginSubsetFont: TimesNewRomanPSMT Initial%ADOt1write: (1.0.21)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /TimesNewRomanPSMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 0 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdup 67 /C putdup 69 /E putdup 70 /F putdup 78 /N putdup 79 /O putdup 82 /R putdup 86 /V putdup 95 /underscore putdef/FontBBox {-167 -216 1009 913} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings10 dict dup begin/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB222483BD74F8B> |-/A <1C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C495B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F15A9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A63AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D73985071102DFA93B6532> |-/C <1C60D8A8C9B64EDFFBA6F0CF8A2CDA79A069460245F5373797A9E71DEA345031885496623E7C65FDB470FC6BFF7BE37B20FF363C43CAB08BA8E918FCBA9DEB0021B12355971EB2945D0594E78D2EE4D593C49790304E106026BC942097158DDBF12F8B83C9752B02212C28957008FA70A685356583CB4C7D6F55B12AC7399ECFE4B69C91B472A6132E65C9F7B697AE783582C9D65C392064A7C49C83B283409DD22AD16B7DD28B54D5FC454C> |-/E <1C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7BFCA94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE52C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74CDB92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F2A3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC1949558757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A215FA79B98816AEC20BC3F> |-/F <1C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91CB335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB18A6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44FB014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC7745E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8B4D7DDC1356637FA048F199EDF19A428> |-/N <1C60D8A8C9B6079FEBDAFCF29D322161AC3F52EDD22433113CAA67ECAF0B056592AA81FE2842CB172B65A1B8C599C7080F0FEEDF52AD2A1E3DD4CF5B5A3ABC5E3E3936B6025ECB4BBB9A6B9E506B790F934302A34C91233D5C7DD4480C8E57FB7AE58D5F049C8795FEC67FB4BCA555E2CC51B9B80AEAE5214780F4B92D63E63AE746DB94B9539BA648935E38> |-/O <1C60D8A8C9B6079F6288DCC34B8AB15434B53D5CBCF7E29104F391BE1572E1D4E07ABEE690B714C43DA0F68F9B727CD1B8007FE243EEEBD45E7815504A3113BAFAC54AC3D3B019A1C9ACF716BD3362CCEE1A09F2069AE9AF5406AA47EF076128BEB6A74EB29D02BFBE8F43F41B56E48CC0FA84987A887327DB516D9441F2C6BDCB9AC2AD82E8> |-/R <1C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B03BD344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687DE6B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF919356C91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B78271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235A69A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC20DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |-/V <1C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777BDE67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD4A5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712B502AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC078154F7D9BB4AB2053> |-/underscore <1C60D8A8C9B7A73DB62B3DDADB4A842090F7415C025CC5> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont/JGGOIN+TimesNewRomanPSMT /TimesNewRomanPSMT findfont def/JGGOIN+TimesNewRomanPSMT*1 [65{/.notdef}repeat /A /.notdef /C /.notdef /E /F 7{/.notdef}repeat /N /O 2{/.notdef}repeat /R 3{/.notdef}repeat /V 8{/.notdef}repeat /underscore 160{/.notdef}repeat] JGGOIN+TimesNewRomanPSMT nfntJGGOIN+TimesNewRomanPSMT*1  [5.99989 0 -0 -5.99989 0 0 ]mfnt sfnt255.5 60.2998 mov0.000244141 0 82 (CORN) wsh272.169 60.2998 mov0.000274658 0 86 (ER_VF) wsh290.061 60.2998 mov0.000457764 0 67 -0.000396729 0 (ACE) awsh98.4 94.5 mo98.4 201.78 li98.4 202.111 98.6687 202.38 99 202.38 cv99.3314 202.38 99.6 202.111 99.6 201.78 cv99.6 94.5 li99.6 94.1687 99.3314 93.9 99 93.9 cv98.6687 93.9 98.4 94.1687 98.4 94.5 cvf215.4 94.5 mo215.4 201.78 li215.4 202.111 215.669 202.38 216 202.38 cv216.332 202.38 216.6 202.111 216.6 201.78 cv216.6 94.5 li216.6 94.1687 216.332 93.9 216 93.9 cv215.669 93.9 215.4 94.1687 215.4 94.5 cvf251.4 58.5 mo251.4 165.78 li251.4 166.111 251.669 166.38 252 166.38 cv252.332 166.38 252.6 166.111 252.6 165.78 cv252.6 58.5 li252.6 58.1687 252.332 57.9 252 57.9 cv251.669 57.9 251.4 58.1687 251.4 58.5 cvf216 112.5 mo216 147.781 li252 112.5 li216 112.5 li0.0745098 0.478432 0.568628 0.00784314 cmykf216 112.5 mo215.64 112.5 li215.64 147.781 li215.64 147.925 215.728 148.057 215.861 148.113 cv215.994 148.169 216.149 148.139 216.252 148.038 cv252.252 112.758 li252.357 112.655 252.389 112.5 252.334 112.364 cv252.278 112.229 252.147 112.14 252 112.14 cv216 112.14 li215.802 112.14 215.64 112.302 215.64 112.5 cv216 112.5 li216 112.86 li252 112.86 li252 112.5 li251.749 112.243 li215.749 147.524 li216 147.781 li216.36 147.781 li216.36 112.5 li216 112.5 li216 112.86 li216 112.5 li0 0 0 1 cmykf216 166.5 mo216 201.781 li252 166.5 li216 166.5 li0.0745098 0.478432 0.568628 0.00784314 cmykf216 166.5 mo215.64 166.5 li215.64 201.781 li215.64 201.925 215.728 202.057 215.861 202.113 cv215.994 202.169 216.149 202.139 216.252 202.038 cv252.252 166.758 li252.357 166.655 252.389 166.5 252.334 166.364 cv252.278 166.229 252.147 166.14 252 166.14 cv216 166.14 li215.802 166.14 215.64 166.302 215.64 166.5 cv216 166.5 li216 166.86 li252 166.86 li252 166.5 li251.749 166.243 li215.749 201.524 li216 201.781 li216.36 201.781 li216.36 166.5 li216 166.5 li216 166.86 li216 166.5 li0 0 0 1 cmykf252 58.5005 mo252.933 58.5005 253.688 59.2559 253.688 60.188 cv253.688 61.1202 252.933 61.8755 252 61.8755 cv251.069 61.8755 250.313 61.1202 250.313 60.188 cv250.313 59.2559 251.069 58.5005 252 58.5005 cvf252 58.5005 mo252 58.8605 li252.734 58.8619 253.327 59.4547 253.328 60.188 cv253.327 60.9214 252.734 61.5142 252 61.5155 cv251.268 61.5142 250.674 60.9211 250.673 60.188 cv250.674 59.455 251.268 58.8619 252 58.8605 cv252 58.5005 li252 58.1405 li250.87 58.1408 249.953 59.0569 249.953 60.188 cv249.953 61.3192 250.87 62.2353 252 62.2355 cv253.132 62.2354 254.048 61.3189 254.048 60.188 cv254.048 59.0571 253.132 58.1407 252 58.1405 cv252 58.5005 lif234 74.8126 mo234.933 74.8126 235.688 75.5679 235.688 76.5 cv235.688 77.4322 234.933 78.1876 234 78.1876 cv233.069 78.1876 232.313 77.4322 232.313 76.5 cv232.313 75.5679 233.069 74.8126 234 74.8126 cvf234 74.8126 mo234 75.1725 li234.734 75.1739 235.327 75.7667 235.328 76.5 cv235.327 77.2334 234.734 77.8262 234 77.8276 cv233.268 77.8262 232.674 77.2331 232.673 76.5 cv232.674 75.767 233.268 75.1739 234 75.1725 cv234 74.8126 li234 74.4526 li232.87 74.4528 231.953 75.3689 231.953 76.5 cv231.953 77.6312 232.87 78.5473 234 78.5475 cv235.132 78.5474 236.048 77.6309 236.048 76.5 cv236.048 75.3692 235.132 74.4527 234 74.4526 cv234 74.8126 lif216 92.8126 mo216.933 92.8126 217.688 93.5679 217.688 94.5 cv217.688 95.4322 216.933 96.1876 216 96.1876 cv215.069 96.1876 214.313 95.4322 214.313 94.5 cv214.313 93.5679 215.069 92.8126 216 92.8126 cvf216 92.8126 mo216 93.1725 li216.734 93.1739 217.327 93.7667 217.328 94.5 cv217.327 95.2334 216.734 95.8262 216 95.8276 cv215.268 95.8262 214.674 95.2331 214.673 94.5 cv214.674 93.767 215.268 93.1739 216 93.1725 cv216 92.8126 li216 92.4526 li214.87 92.4528 213.953 93.3689 213.953 94.5 cv213.953 95.6312 214.87 96.5473 216 96.5475 cv217.132 96.5474 218.048 95.6309 218.048 94.5 cv218.048 93.3692 217.132 92.4527 216 92.4526 cv216 92.8126 lif216 145.126 mo216.933 145.126 217.688 145.881 217.688 146.813 cv217.688 147.746 216.933 148.5 216 148.5 cv215.069 148.5 214.313 147.746 214.313 146.813 cv214.313 145.881 215.069 145.126 216 145.126 cvf216 145.126 mo216 145.485 li216.734 145.487 217.327 146.08 217.328 146.813 cv217.327 147.547 216.734 148.139 216 148.14 cv215.268 148.139 214.674 147.547 214.673 146.813 cv214.674 146.08 215.268 145.487 216 145.485 cv216 145.126 li216 144.766 li214.87 144.766 213.953 145.682 213.953 146.813 cv213.953 147.945 214.87 148.86 216 148.86 cv217.132 148.86 218.048 147.944 218.048 146.813 cv218.048 145.683 217.132 144.766 216 144.766 cv216 145.126 lif235.688 127.126 mo236.62 127.126 237.376 127.881 237.376 128.813 cv237.376 129.746 236.62 130.501 235.688 130.501 cv234.756 130.501 234 129.746 234 128.813 cv234 127.881 234.756 127.126 235.688 127.126 cvf235.688 127.126 mo235.688 127.486 li236.421 127.487 237.014 128.08 237.016 128.813 cv237.014 129.547 236.421 130.14 235.688 130.141 cv234.955 130.14 234.362 129.547 234.36 128.813 cv234.362 128.08 234.955 127.487 235.688 127.486 cv235.688 127.126 li235.688 126.766 li234.557 126.766 233.641 127.682 233.64 128.813 cv233.641 129.945 234.557 130.861 235.688 130.861 cv236.819 130.861 237.735 129.945 237.735 128.813 cv237.735 127.682 236.819 126.766 235.688 126.766 cv235.688 127.126 lif252 110.813 mo252.933 110.813 253.688 111.568 253.688 112.5 cv253.688 113.433 252.933 114.188 252 114.188 cv251.069 114.188 250.313 113.433 250.313 112.5 cv250.313 111.568 251.069 110.813 252 110.813 cvf252 110.813 mo252 111.173 li252.734 111.174 253.327 111.767 253.328 112.5 cv253.327 113.234 252.734 113.827 252 113.828 cv251.268 113.827 250.674 113.234 250.673 112.5 cv250.674 111.767 251.268 111.174 252 111.173 cv252 110.813 li252 110.453 li250.87 110.453 249.953 111.369 249.953 112.5 cv249.953 113.632 250.87 114.548 252 114.548 cv253.132 114.548 254.048 113.631 254.048 112.5 cv254.048 111.37 253.132 110.453 252 110.453 cv252 110.813 lif216 199.126 mo216.933 199.126 217.688 199.881 217.688 200.813 cv217.688 201.746 216.933 202.5 216 202.5 cv215.069 202.5 214.313 201.746 214.313 200.813 cv214.313 199.881 215.069 199.126 216 199.126 cvf216 199.126 mo216 199.485 li216.734 199.487 217.327 200.08 217.328 200.813 cv217.327 201.547 216.734 202.139 216 202.14 cv215.268 202.139 214.674 201.547 214.673 200.813 cv214.674 200.08 215.268 199.487 216 199.485 cv216 199.126 li216 198.766 li214.87 198.766 213.953 199.682 213.953 200.813 cv213.953 201.945 214.87 202.86 216 202.86 cv217.132 202.86 218.048 201.944 218.048 200.813 cv218.048 199.683 217.132 198.766 216 198.766 cv216 199.126 lif235.688 181.126 mo236.62 181.126 237.376 181.881 237.376 182.813 cv237.376 183.746 236.62 184.5 235.688 184.5 cv234.756 184.5 234 183.746 234 182.813 cv234 181.881 234.756 181.126 235.688 181.126 cvf235.688 181.126 mo235.688 181.485 li236.421 181.487 237.014 182.08 237.016 182.813 cv237.014 183.547 236.421 184.139 235.688 184.14 cv234.955 184.139 234.362 183.547 234.36 182.813 cv234.362 182.08 234.955 181.487 235.688 181.485 cv235.688 181.126 li235.688 180.766 li234.557 180.766 233.641 181.682 233.64 182.813 cv233.641 183.945 234.558 184.86 235.688 184.86 cv236.818 184.86 237.735 183.945 237.735 182.813 cv237.735 181.682 236.819 180.766 235.688 180.766 cv235.688 181.126 lif160.313 200.813 mo161.245 200.813 162 201.569 162 202.5 cv162 203.432 161.245 204.188 160.313 204.188 cv159.381 204.188 158.626 203.432 158.626 202.5 cv158.626 201.569 159.381 200.813 160.313 200.813 cvf160.313 200.813 mo160.313 201.173 li161.046 201.174 161.639 201.768 161.64 202.5 cv161.639 203.233 161.046 203.827 160.313 203.828 cv159.58 203.827 158.987 203.233 158.985 202.5 cv158.987 201.768 159.58 201.174 160.313 201.173 cv160.313 200.813 li160.313 200.453 li159.182 200.453 158.266 201.37 158.266 202.5 cv158.266 203.631 159.182 204.548 160.313 204.548 cv161.444 204.548 162.36 203.631 162.36 202.5 cv162.36 201.37 161.444 200.453 160.313 200.453 cv160.313 200.813 lif99.0005 199.126 mo99.9327 199.126 100.688 199.881 100.688 200.813 cv100.688 201.746 99.9327 202.5 99.0005 202.5 cv98.0684 202.5 97.313 201.746 97.313 200.813 cv97.313 199.881 98.0684 199.126 99.0005 199.126 cvf99.0005 199.126 mo99.0005 199.485 li99.7336 199.487 100.327 200.08 100.328 200.813 cv100.327 201.547 99.7339 202.139 99.0005 202.14 cv98.2672 202.139 97.6744 201.547 97.673 200.813 cv97.6744 200.08 98.2674 199.487 99.0005 199.485 cv99.0005 199.126 li99.0005 198.766 li97.8694 198.766 96.9533 199.682 96.953 200.813 cv96.9532 201.944 97.8696 202.86 99.0005 202.86 cv100.132 202.86 101.048 201.944 101.048 200.813 cv101.048 199.682 100.132 198.766 99.0005 198.766 cv99.0005 199.126 lif189 163.126 mo189.933 163.126 190.688 163.881 190.688 164.813 cv190.688 165.746 189.933 166.5 189 166.5 cv188.069 166.5 187.313 165.746 187.313 164.813 cv187.313 163.881 188.069 163.126 189 163.126 cvf189 163.126 mo189 163.485 li189.734 163.487 190.327 164.08 190.328 164.813 cv190.327 165.547 189.734 166.139 189 166.14 cv188.268 166.139 187.674 165.547 187.673 164.813 cv187.674 164.08 188.268 163.487 189 163.485 cv189 163.126 li189 162.766 li187.87 162.766 186.953 163.682 186.953 164.813 cv186.953 165.945 187.87 166.86 189 166.86 cv190.132 166.86 191.048 165.944 191.048 164.813 cv191.048 163.683 190.132 162.766 189 162.766 cv189 163.126 lif117.001 181.126 mo117.933 181.126 118.688 181.881 118.688 182.813 cv118.688 183.746 117.933 184.5 117.001 184.5 cv116.069 184.5 115.313 183.746 115.313 182.813 cv115.313 181.881 116.069 181.126 117.001 181.126 cvf117.001 181.126 mo117.001 181.485 li117.734 181.487 118.327 182.08 118.328 182.813 cv118.327 183.547 117.734 184.139 117.001 184.14 cv116.268 184.139 115.675 183.547 115.673 182.813 cv115.675 182.08 116.268 181.487 117.001 181.485 cv117.001 181.126 li117.001 180.766 li115.87 180.766 114.954 181.682 114.953 182.813 cv114.954 183.944 115.87 184.86 117.001 184.86 cv118.132 184.86 119.048 183.944 119.048 182.813 cv119.048 181.682 118.132 180.766 117.001 180.766 cv117.001 181.126 lif135.001 163.126 mo135.933 163.126 136.688 163.881 136.688 164.813 cv136.688 165.746 135.933 166.5 135.001 166.5 cv134.069 166.5 133.313 165.746 133.313 164.813 cv133.313 163.881 134.069 163.126 135.001 163.126 cvf135.001 163.126 mo135.001 163.485 li135.734 163.487 136.327 164.08 136.328 164.813 cv136.327 165.547 135.734 166.139 135.001 166.14 cv134.268 166.139 133.675 165.547 133.673 164.813 cv133.675 164.08 134.268 163.487 135.001 163.485 cv135.001 163.126 li135.001 162.766 li133.87 162.766 132.954 163.682 132.953 164.813 cv132.954 165.944 133.87 166.86 135.001 166.86 cv136.132 166.86 137.048 165.944 137.048 164.813 cv137.048 163.682 136.132 162.766 135.001 162.766 cv135.001 163.126 lif172.688 181.126 mo173.62 181.126 174.376 181.881 174.376 182.813 cv174.376 183.746 173.62 184.5 172.688 184.5 cv171.756 184.5 171 183.746 171 182.813 cv171 181.881 171.756 181.126 172.688 181.126 cvf172.688 181.126 mo172.688 181.485 li173.421 181.487 174.014 182.08 174.016 182.813 cv174.014 183.547 173.421 184.139 172.688 184.14 cv171.955 184.139 171.362 183.547 171.36 182.813 cv171.362 182.08 171.955 181.487 172.688 181.485 cv172.688 181.126 li172.688 180.766 li171.557 180.766 170.641 181.682 170.64 182.813 cv170.641 183.944 171.557 184.86 172.688 184.86 cv173.819 184.86 174.735 183.944 174.735 182.813 cv174.735 181.682 173.819 180.766 172.688 180.766 cv172.688 181.126 lif172.688 127.126 mo173.62 127.126 174.376 127.881 174.376 128.813 cv174.376 129.746 173.62 130.501 172.688 130.501 cv171.756 130.501 171 129.746 171 128.813 cv171 127.881 171.756 127.126 172.688 127.126 cvf172.688 127.126 mo172.688 127.486 li173.421 127.487 174.014 128.08 174.016 128.813 cv174.014 129.547 173.421 130.14 172.688 130.141 cv171.955 130.14 171.362 129.547 171.36 128.813 cv171.362 128.08 171.955 127.487 172.688 127.486 cv172.688 127.126 li172.688 126.766 li171.557 126.766 170.641 127.682 170.64 128.813 cv170.641 129.945 171.557 130.861 172.688 130.861 cv173.819 130.861 174.735 129.945 174.735 128.813 cv174.735 127.682 173.819 126.766 172.688 126.766 cv172.688 127.126 lif160.313 145.126 mo161.245 145.126 162 145.881 162 146.813 cv162 147.746 161.245 148.5 160.313 148.5 cv159.381 148.5 158.626 147.746 158.626 146.813 cv158.626 145.881 159.381 145.126 160.313 145.126 cvf160.313 145.126 mo160.313 145.485 li161.046 145.487 161.639 146.08 161.64 146.813 cv161.639 147.547 161.046 148.139 160.313 148.14 cv159.58 148.139 158.987 147.547 158.985 146.813 cv158.987 146.08 159.58 145.487 160.313 145.485 cv160.313 145.126 li160.313 144.766 li159.182 144.766 158.266 145.682 158.266 146.813 cv158.266 147.944 159.182 148.86 160.313 148.86 cv161.444 148.86 162.36 147.944 162.36 146.813 cv162.36 145.682 161.444 144.766 160.313 144.766 cv160.313 145.126 lif189 109.126 mo189.933 109.126 190.688 109.881 190.688 110.813 cv190.688 111.746 189.933 112.501 189 112.501 cv188.069 112.501 187.313 111.746 187.313 110.813 cv187.313 109.881 188.069 109.126 189 109.126 cvf189 109.126 mo189 109.486 li189.734 109.487 190.327 110.08 190.328 110.813 cv190.327 111.547 189.734 112.14 189 112.141 cv188.268 112.14 187.674 111.547 187.673 110.813 cv187.674 110.08 188.268 109.487 189 109.486 cv189 109.126 li189 108.766 li187.87 108.766 186.953 109.682 186.953 110.813 cv186.953 111.945 187.87 112.861 189 112.861 cv190.132 112.861 191.048 111.944 191.048 110.813 cv191.048 109.683 190.132 108.766 189 108.766 cv189 109.126 lif99.0005 92.8126 mo99.9327 92.8126 100.688 93.5679 100.688 94.5 cv100.688 95.4322 99.9327 96.1876 99.0005 96.1876 cv98.0684 96.1876 97.313 95.4322 97.313 94.5 cv97.313 93.5679 98.0684 92.8126 99.0005 92.8126 cvf99.0005 92.8126 mo99.0005 93.1725 li99.7338 93.1739 100.327 93.7668 100.328 94.5 cv100.327 95.2333 99.7338 95.8262 99.0005 95.8276 cv98.2673 95.8262 97.6744 95.2333 97.673 94.5 cv97.6744 93.7668 98.2673 93.1739 99.0005 93.1725 cv99.0005 92.8126 li99.0005 92.4526 li97.8695 92.4527 96.9532 93.369 96.953 94.5 cv96.9532 95.6311 97.8695 96.5474 99.0005 96.5475 cv100.132 96.5474 101.048 95.6311 101.048 94.5 cv101.048 93.369 100.132 92.4527 99.0005 92.4526 cv99.0005 92.8126 lif135.001 56.8126 mo135.933 56.8126 136.688 57.5679 136.688 58.5 cv136.688 59.4322 135.933 60.1876 135.001 60.1876 cv134.069 60.1876 133.313 59.4322 133.313 58.5 cv133.313 57.5679 134.069 56.8126 135.001 56.8126 cvf135.001 56.8126 mo135.001 57.1725 li135.734 57.1739 136.327 57.7668 136.328 58.5 cv136.327 59.2333 135.734 59.8262 135.001 59.8276 cv134.268 59.8262 133.675 59.2333 133.673 58.5 cv133.675 57.7668 134.268 57.1739 135.001 57.1725 cv135.001 56.8126 li135.001 56.4526 li133.87 56.4527 132.954 57.369 132.953 58.5 cv132.954 59.6311 133.87 60.5474 135.001 60.5475 cv136.132 60.5474 137.048 59.6311 137.048 58.5 cv137.048 57.369 136.132 56.4527 135.001 56.4526 cv135.001 56.8126 lif99.0005 145.126 mo99.9327 145.126 100.688 145.881 100.688 146.813 cv100.688 147.746 99.9327 148.5 99.0005 148.5 cv98.0684 148.5 97.313 147.746 97.313 146.813 cv97.313 145.881 98.0684 145.126 99.0005 145.126 cvf99.0005 145.126 mo99.0005 145.485 li99.7336 145.487 100.327 146.08 100.328 146.813 cv100.327 147.547 99.7339 148.139 99.0005 148.14 cv98.2672 148.139 97.6744 147.547 97.673 146.813 cv97.6744 146.08 98.2674 145.487 99.0005 145.485 cv99.0005 145.126 li99.0005 144.766 li97.8694 144.766 96.9533 145.682 96.953 146.813 cv96.9532 147.944 97.8696 148.86 99.0005 148.86 cv100.132 148.86 101.048 147.944 101.048 146.813 cv101.048 145.682 100.132 144.766 99.0005 144.766 cv99.0005 145.126 lif135.001 110.813 mo135.933 110.813 136.688 111.568 136.688 112.5 cv136.688 113.433 135.933 114.188 135.001 114.188 cv134.069 114.188 133.313 113.433 133.313 112.5 cv133.313 111.568 134.069 110.813 135.001 110.813 cvf135.001 110.813 mo135.001 111.173 li135.734 111.174 136.327 111.767 136.328 112.5 cv136.327 113.234 135.734 113.827 135.001 113.828 cv134.268 113.827 133.675 113.234 133.673 112.5 cv133.675 111.767 134.268 111.174 135.001 111.173 cv135.001 110.813 li135.001 110.453 li133.87 110.453 132.954 111.369 132.953 112.5 cv132.954 113.632 133.87 114.548 135.001 114.548 cv136.132 114.548 137.048 113.632 137.048 112.5 cv137.048 111.369 136.132 110.453 135.001 110.453 cv135.001 110.813 lif118.688 127.126 mo119.62 127.126 120.376 127.881 120.376 128.813 cv120.376 129.746 119.62 130.501 118.688 130.501 cv117.756 130.501 117 129.746 117 128.813 cv117 127.881 117.756 127.126 118.688 127.126 cvf118.688 127.126 mo118.688 127.486 li119.421 127.487 120.014 128.08 120.016 128.813 cv120.014 129.547 119.421 130.14 118.688 130.141 cv117.955 130.14 117.362 129.547 117.36 128.813 cv117.362 128.08 117.955 127.487 118.688 127.486 cv118.688 127.126 li118.688 126.766 li117.557 126.766 116.641 127.682 116.64 128.813 cv116.641 129.945 117.557 130.861 118.688 130.861 cv119.819 130.861 120.735 129.945 120.735 128.813 cv120.735 127.682 119.819 126.766 118.688 126.766 cv118.688 127.126 lif118.688 73.1255 mo119.62 73.1255 120.376 73.8809 120.376 74.813 cv120.376 75.7452 119.62 76.5005 118.688 76.5005 cv117.756 76.5005 117 75.7452 117 74.813 cv117 73.8809 117.756 73.1255 118.688 73.1255 cvf118.688 73.1255 mo118.688 73.4855 li119.421 73.4869 120.014 74.0798 120.016 74.813 cv120.014 75.5463 119.421 76.1392 118.688 76.1405 cv117.955 76.1392 117.362 75.5463 117.36 74.813 cv117.362 74.0798 117.955 73.4869 118.688 73.4855 cv118.688 73.1255 li118.688 72.7655 li117.557 72.7657 116.641 73.682 116.64 74.813 cv116.641 75.9441 117.557 76.8603 118.688 76.8605 cv119.819 76.8603 120.735 75.9441 120.735 74.813 cv120.735 73.682 119.819 72.7657 118.688 72.7655 cv118.688 73.1255 lif172.688 74.8126 mo173.62 74.8126 174.376 75.5679 174.376 76.5 cv174.376 77.4322 173.62 78.1876 172.688 78.1876 cv171.756 78.1876 171 77.4322 171 76.5 cv171 75.5679 171.756 74.8126 172.688 74.8126 cvf172.688 74.8126 mo172.688 75.1725 li173.421 75.1739 174.014 75.7668 174.016 76.5 cv174.014 77.2333 173.421 77.8262 172.688 77.8276 cv171.955 77.8262 171.362 77.2333 171.36 76.5 cv171.362 75.7668 171.955 75.1739 172.688 75.1725 cv172.688 74.8126 li172.688 74.4526 li171.557 74.4527 170.641 75.369 170.64 76.5 cv170.641 77.6311 171.557 78.5474 172.688 78.5475 cv173.819 78.5474 174.735 77.6311 174.735 76.5 cv174.735 75.369 173.819 74.4527 172.688 74.4526 cv172.688 74.8126 lif160.313 92.8126 mo161.245 92.8126 162 93.5679 162 94.5 cv162 95.4322 161.245 96.1876 160.313 96.1876 cv159.381 96.1876 158.626 95.4322 158.626 94.5 cv158.626 93.5679 159.381 92.8126 160.313 92.8126 cvf160.313 92.8126 mo160.313 93.1725 li161.046 93.1739 161.639 93.7668 161.64 94.5 cv161.639 95.2333 161.046 95.8262 160.313 95.8276 cv159.58 95.8262 158.987 95.2333 158.985 94.5 cv158.987 93.7668 159.58 93.1739 160.313 93.1725 cv160.313 92.8126 li160.313 92.4526 li159.182 92.4527 158.266 93.369 158.266 94.5 cv158.266 95.6311 159.182 96.5474 160.313 96.5475 cv161.444 96.5474 162.36 95.6311 162.36 94.5 cv162.36 93.369 161.444 92.4527 160.313 92.4526 cv160.313 92.8126 lif189 56.8126 mo189.933 56.8126 190.688 57.5679 190.688 58.5 cv190.688 59.4322 189.933 60.1876 189 60.1876 cv188.069 60.1876 187.313 59.4322 187.313 58.5 cv187.313 57.5679 188.069 56.8126 189 56.8126 cvf189 56.8126 mo189 57.1725 li189.734 57.1739 190.327 57.7667 190.328 58.5 cv190.327 59.2334 189.734 59.8262 189 59.8276 cv188.268 59.8262 187.674 59.2331 187.673 58.5 cv187.674 57.767 188.268 57.1739 189 57.1725 cv189 56.8126 li189 56.4526 li187.87 56.4528 186.953 57.3689 186.953 58.5 cv186.953 59.6312 187.87 60.5473 189 60.5475 cv190.132 60.5474 191.048 59.6309 191.048 58.5 cv191.048 57.3692 190.132 56.4527 189 56.4526 cv189 56.8126 lif%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs%ADOt1write: (1.0.21)%%Copyright: Copyright 2008 Adobe System Incorporated. All rights reserved.systemdict beginJGGOIN+TimesNewRomanPSMT dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B8707C25> |-/period <1C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED94985BC6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375C6ADD098717CA70F621> |-/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F589D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C02720FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF41DB28C0847307B8DCBC66> |-/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11EC41D90433CE0F55F0A42A96AF852FD50FA> |-/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FEB71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA143A> |-/D <1C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E407CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D500379950803F077453028FB6169> |-/G <1C60D8A8C9B6079F6D6E36005945EC7274CF8CD5EF5B42D280E6D8A4F6086ADC4B88F4BA16F6A237691F3F760A6129A67DCE9322616B1D7BB21115511238376B94C01432A999E95ACF02B9743B28C7A3C8109C25013AEA47EC71807E3BFE6B26986496C6B96A2458AF130FF55F6939E40BA894719E24A717462CC4A00B11ADE5809AB1E0B4D7805897BE50087CD64F5AEA7744526E08B0D657538988C41BFE39A8735842D620E001E1A863F676AFB361CF4C81718CBC4A0CC5AC0D51A34ACA7D8BBE5B5D6E8D466D858B118FBBA2161DB0F7E151EB0958EF2C5C3F> |-/T <1C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E48F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |-/i <1C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE365B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A640085090E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCBCB8CA3E9F85837FAC6> |-/m <1C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE11167932D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA1816E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D18CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE955617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FAFEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B517996> |-systemdict /gcheck known {setglobal} if end {end} ifendJGGOIN+TimesNewRomanPSMT /Encoding getdup 32 /space putdup 46 /period putdup 49 /one putdup 50 /two putdup 51 /three putdup 68 /D putdup 71 /G putdup 84 /T putdup 105 /i putdup 109 /m putpop%ADOEndSubsetFont/JGGOIN+TimesNewRomanPSMT*1 [32{/.notdef}repeat /space 13{/.notdef}repeat /period 2{/.notdef}repeat /one /two /three 13{/.notdef}repeat /A /.notdef /C /D /E /F /G 6{/.notdef}repeat /N /O 2{/.notdef}repeat /R /.notdef /T /.notdef /V 8{/.notdef}repeat /underscore 9{/.notdef}repeat /i 3{/.notdef}repeat /m 146{/.notdef}repeat] JGGOIN+TimesNewRomanPSMT nfntJGGOIN+TimesNewRomanPSMT*1  [5.99989 0 -0 -5.99989 0 0 ]mfnt sfnt237.92 78.2998 mov-0.000228882 0 71 (EDGE1_V) wsh264.249 78.2998 mov0.445343 0 65 -0.445251 0 (FAC) awsh275.475 78.2998 mov(E) sh219.5 96.2998 mov0.000244141 0 82 (CORN) wsh236.169 96.2998 mov0.000213623 0 95 (ER_VF) wsh254.061 96.2998 mov0.000457764 0 67 -0.000396729 0 (ACE) awsh220 150.3 mov0.000244141 0 82 (CORN) wsh236.669 150.3 mov0.000213623 0 95 (ER_VCE) wsh259.336 150.3 mov0.000244141 0 69 (NTER) wsh240.67 132.3 mov-0.000228882 0 71 (EDGE1_V) wsh266.999 132.3 mov-0.000274658 0 78 (CENTER) wsh256 114.3 mov0.000244141 0 82 (CORN) wsh272.669 114.3 mov0.000274658 0 86 (ER_VCE) wsh295.336 114.3 mov0.000244141 0 69 (NTER) wsh219.5 204.3 mov0.000244141 0 82 (CORN) wsh236.169 204.3 mov0.000213623 0 95 (ER_VF) wsh254.061 204.3 mov0.000457764 0 67 -0.000396729 0 (ACE) awsh242.42 186.3 mov-0.000228882 0 71 (EDGE1_V) wsh268.749 186.3 mov0.445343 0 65 -0.445251 0 (FAC) awsh279.975 186.3 mov(E) sh138.92 208.8 mov-0.000228882 0 71 (EDGE2_V) wsh165.249 208.8 mov0.445343 0 65 -0.445251 0 (FAC) awsh176.475 208.8 mov(E) sh48.5 204.3 mov0.000244141 0 82 (CORN) wsh65.1694 204.3 mov0.000213623 0 95 (ER_VF) wsh83.061 204.3 mov0.000473022 0 67 -0.000396729 0 (ACE) awsh168.17 172.8 mov-0.000228882 0 71 (EDGE2_V) wsh194.499 172.8 mov0.445343 0 65 -0.445251 0 (FAC) awsh205.725 172.8 mov(E) sh71.4199 186.3 mov-0.000228882 0 71 (EDGE1_V) wsh97.7485 186.3 mov0.445343 0 65 -0.445251 0 (FAC) awsh108.975 186.3 mov(E) sh84.5 168.3 mov0.000244141 0 82 (CORN) wsh101.169 168.3 mov0.000213623 0 95 (ER_VF) wsh119.061 168.3 mov0.000473022 0 67 -0.000396729 0 (ACE) awsh148 190.8 mov0.000244141 0 78 (CENT) wsh163.665 190.8 mov0.000213623 0 95 (ER_VF) wsh181.556 190.8 mov0.000473022 0 67 -0.000396729 0 (ACE) awsh144 136.8 mov0.000244141 0 78 (CENT) wsh159.665 136.8 mov0.000213623 0 95 (ER_VCE) wsh182.331 136.8 mov0.000244141 0 69 (NTER) wsh134.92 154.8 mov-0.000228882 0 71 (EDGE2_V) wsh161.249 154.8 mov-0.000244141 0 78 (CENTER) wsh161.92 118.8 mov-0.000228882 0 71 (EDGE2_V) wsh188.249 118.8 mov-0.000244141 0 78 (CENTER) wshJGGOIN+TimesNewRomanPSMT*1  [7.99995 0 -0 -7.99995 0 0 ]mfnt sfnt283.64 168.9 mov(Dim. 1) sh60.8901 227.4 mov(Dim. 2) sh126.14 24.9004 mov(Dim. 3) shJGGOIN+TimesNewRomanPSMT*1  [5.99989 0 -0 -5.99989 0 0 ]mfnt sfnt48.5 96.2998 mov0.000244141 0 82 (CORN) wsh65.1694 96.2998 mov0.000213623 0 95 (ER_VF) wsh83.061 96.2998 mov0.000473022 0 67 -0.000396729 0 (ACE) awsh84.5 60.2998 mov0.000244141 0 82 (CORN) wsh101.169 60.2998 mov0.000213623 0 95 (ER_VF) wsh119.061 60.2998 mov0.000473022 0 67 -0.000396729 0 (ACE) awsh76 114.3 mov0.000244141 0 82 (CORN) wsh92.6694 114.3 mov0.000213623 0 95 (ER_VCE) wsh115.336 114.3 mov0.000244141 0 69 (NTER) wsh40 150.3 mov0.000244141 0 82 (CORN) wsh56.6694 150.3 mov0.000213623 0 95 (ER_VCE) wsh79.3359 150.3 mov0.000244141 0 69 (NTER) wsh65.1699 132.3 mov-0.000228882 0 71 (EDGE1_V) wsh91.4985 132.3 mov-0.000244141 0 78 (CENTER) wsh71.4199 78.2998 mov-0.000228882 0 71 (EDGE1_V) wsh97.7485 78.2998 mov0.445343 0 65 -0.445251 0 (FAC) awsh108.975 78.2998 mov(E) sh148 82.7998 mov0.000244141 0 78 (CENT) wsh163.665 82.7998 mov0.000213623 0 95 (ER_VF) wsh181.556 82.7998 mov0.000473022 0 67 -0.000396729 0 (ACE) awsh138.92 100.8 mov-0.000228882 0 71 (EDGE2_V) wsh165.249 100.8 mov0.445343 0 65 -0.445251 0 (FAC) awsh176.475 100.8 mov(E) sh168.17 64.7998 mov-0.000228882 0 71 (EDGE2_V) wsh194.499 64.7998 mov0.445343 0 65 -0.445251 0 (FAC) awsh205.725 64.7998 mov(E) sh%ADOBeginClientInjection: EndPageContent "AI11EPS"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI11EPS"% page clipgrestoregrestore % PSGState/JGGOIN+TimesNewRomanPSMT*1 ufntAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 11.0%%AI8_CreatorVersion: 11.0.0%%For: (Don Stark) (NCAR)%%Title: (StaggerLoc3D.eps)%%CreationDate: 3/27/08 5:04 PM%AI9_DataStream%Gb",K#ClS2cfk</I"tTh)$N@ZUPo`cV$gJ<#A"$1bA)S!SF_.)CY;jDKEOp)pY>ZC[m*pQfWm'OOt=^-(Gf>lHGdjTRJra@T]t)p%31`0e-/o0W#\A(fWl&V$DGl4[G*c]fZD\/[/jGtpVPC+E:EPi#Bho3kg&lGpIIP==7aqAW0V`gc9D&QLSLdUbk&APj0DYWQ:WMio%rT9iR.WVkcbsk(7B3_fg)Ja?1&^O1*EI2\e#Z>Und_^Oic4L0b)#-iYT2)tmAWO#>;#&o3(u:e$NC4/(^Yot:e5b!r(]dLFGW\oK%.t'\As6tU&q3iB6k6mus(euH^?;c!2+4!FD"ckAQV5RegJ52rf]B["1&cmqaL#YHK:5'5<5rqWc#Dlt*I`Dq-WCS]T9-m/L"ipOJ%6iK=7K.>dHnH.s&;-;T^s,22kUo8o*7?OY&b7QD_:549V)D7il7P:Q$IY><\50Jr>csNbbPk7`Y1u#lt?Q^hcNgA$lg^:T7\K%6N%s5A[B=BheJ2<-(/koGL4&.M,>&h-4##N9V/I8,G,kW#^`;%>1d(<.q`^qf""YZ,B>%7)!Db*=Y#$n#cS+:oke<=ssKAY]t26'Alh%k^uIW.j_k7J>fZ0"[<S"::-H3bAh1C*We[lj?Y8EJ.V-Xd*PP?p7dQ3N[<]kfmb(ts"&[s..e=4^jA0Rn#7#6QV,]V8-D+$&\&d:%^thP7guUM?RQM=G6`G;MI`:>D.NX@CnMnQ\Ff&&5-C'0<.J*j@Vc$>@Q%Dp'%GmdXW<B%i-$Z^pJifeAPi4U3bAm&34O%kbTB"!K%"C_EcJVUU'm_Y19rCFlhJp/UHI=cYk"auP[9(#!+i#Ts*O5M&T/Ra5n$[mVNp]Wg4GGpAVM:;qsJp6E;I)8nI'=:?88_SqtcnBX!%1)pPNV""K,$'#<-$'sM?4@sioTI6rWfLY<.\MQcR$1\=tTRZG@23AIr]dEKpLqtI'K)S=d9X$jTL&SnMr.<dfnV;;i3F%,Z-jBR%%G;>&/8dJ`pqp;'*!s#l"5LPo2p^#HE'Z$8l(Xd@+4[;d#,41P^V=>`UUd$70]osiXH3[60?B`"J5Bqr]KYF.0"=N85G_\'$4.Am;%Ch`;Kb`NYHF\=PBd>C>/!'-_e64;5SON*OCSNo]L:>."="3@;NOnqOTLJh%9Uiu;k\PN21jCDj8C*mFcE'nBun/n?2A[[e8CbBG1%.Pj`7P=#/"\g=phkRX7cBLnTVas]nb<lP._Ot[2</(fqkQ/Iq]-2!EK_dNoP_'e3!@I]DUaW9K,r'dCA\+3,iCp$m!>Z!],?Qqdb%/"blUR3]P28ZD*QpfB#043ArH@i4c@q':GJ(X%slas[!8QcX1-PPe;K+5uB:G488HQ2HqsO\aIk3a.E\30jYoY.QPZNf29k(1%<5%j,1qqc*<*.I"SISZuFKN(gTg%3HQVTG?/$$a,na5DAed59&JQ@\A$fPeAJOjS?r\^62T"=HibS8.*(%H@2eEc<l,.k,McGD8^@un%3As2qYX?/ce/p^Ps%l2]Sm^M9qF/AeWCWOHYEdEn#?1_rkW]sJBF:$C^S$8PWV7ZcdM1q)DF&*.9@=+J(&8<2cmo1"p4Ym:^lNjh%_58C^>:$EdNREW#Tage[9(=1;!nXqmZ@kgnXMK&CV7I0-_RNhg]dQ,W-;VL"2AajHs5Yt=;SGYr\/`DOOpI4=)34b:_gR%sFGdGb%7mDT@k5]gK:V)2!0nK1--;[60!i:dLbpf8U!gTC<V2?]gM+SZI)g[s4TE`q+8+2s'$4'i51r:5j.'!Jq6f4W6h_8rXA<N143n4p3%-V42hcDVRV+cIk7Je94AM+:1V&<r>s7m<.3\qKHa'O`FZW!3-dkp2s>dP<9c"oLh,1/`o276F5-5Xle;`tY!'8oTK3LMp'^^j7^]%]uYT=UQYhNMkaV`QoY):`36!3.DKh=A.5<gd*jFhXAe[l-RB+^9#<f,)gW2mP+KIFiK8iIN_AB:'^I*R7UiEgK&@Lp5f=T1J9XtH%gY`a)`6'I7D=@Zn:7$OC@hHQsd=2:,Vo;f/?nlT9Z^3pE3"8[l-W5Ua2c'SN7j9S!J@?rAi!'//B9])'gA=?8'<5)S)U.GDKO1?h%/Z/VAQ+-gf??uMnHGb-#.rtKi,cm90X^j8SJkp)3@O]`<oPX.DiQshAM6d%O!ff^<OQJ;;PrV$^Y7b^Zpk?/M,jDG\DbQFd8CK$L%,uKgrRrQ;LJGL[j2<]*Tb7Q1(KNG&)@Z&Mm\O*f-1bR<KA%H$<A#iRf3Kq[F-1";'<\Q20F>7#-Xoc)LD<o`2HQ?GUmeDj>J5`aq%;<kWD29a+(&fuTK9'[(d*00Ns@MiUT"PeQ'6lCNO(a`$(''h2b?:aaNFViaYo2]UqgaA2?UP?<!).S8NebKYM7iBN,2>d_\VPNtn%0WT[*Db1RZ'oR_BWI:$l<Ek-;OA>q1`*3phcj5@4-8E`;4)fl%'CLdg/`F5dOB[5iM]=\`lZ=V>.[F`nqpOu;Hm5)<oI3]dQD?7T%nLC97^!cbN?CTn0MV#$UkU/4<5A9Ts?AZ29F-RN("SPj*R$."s4Jg7Aq721R>Zff'GpQqh$pZG)C8<7LPH[qWoM4PT`%uteV6q.@%?p'H\$l.8B65D.BR7%q_iWsiX1b71TN1J$1=IRI5,b[+kP_05NE_1sX,FOq8X1tNKFjGTQ!hVfe,g!]]37+ZNL\d!W8oq&>O[rkj%N=_p#H";I]a>edi74;=X;.YFNW\<@aN"?jGb_NE]9k6\h/[\!#a!%:n/(#ot%9*^P"/Q(d&ssqiP#/Qn@ObKBg4u"WhJ.Kf[DH\A%X*1n)'j-bQiX.9;>?L"G;@A"Bcq=XLET#Cu;?l+.C9#<rRtN]LPe+G(LiaT%W(Z,TGa2FB7VGNU=BnadP?0uV09FQfXf^L.IUZKu%1'i0Q8XKMY3GDV**J'_UOVoOgVa1(+Di%LLergZ4_uH8#;rW2HW*7Z%?]();N9WQ/":8AIet?/uo^=&a#+$Ts92Z,4+ftj(<hc\9%o(j=Rg^!B!'%&>ZdteMW-(U?&(Ie%[C8Jl!"g?ofnc5'[ccL2^WQ6'"MkW+]T.MK)-\4WfM53qDND8_&Tg+,d`+^E+7`,!sj9mQa%W[-Z8":Z9SPb*8tBd]Wo*<NVmm4%r5`ipiu#b+"dI"<)Afg39RQ&)e'%C?e&c]L(aC)^qCPeo@*:+Ss[>Z.;-OH`V-L_G<'9>3ui%X"WC.9PO0'S4G;%OHEITeW@-b7H,JZ5?SZ<=]:W2[7![9r)W&#@<a.tL6d_u+&t9Y>U;Ltb[\NCj%0@oraSRC-c<mG8:JJBWe*7(%20fs14=MK'-=EC&-RJ^gCCPg&=6or<CPVJKLdB3]C$!,c5uCeh3OSR9V5k?1MtC\*rJ)28\r:>^,t"/`TG;#I'a4"J-X(1\lF3SL%i[8iE$k0O+mq(/\e%*C'76.+oXmSU#(Zc!hZig.gWC`9H86r8S-B*G#P>qXT#-,MA0FEhJ#)TX"</!ELMFLp1Mt:/8Slb;JOrc&L%Jhj+Q=+B"s-ohoU!*RKBS[/3McqGGF,lipV(G[16FA7ctPpog\`0</_guGmgRmPs$jD'2)A]ZDIE^fN_E'fck5Q]s[87Ih54%p=Y%MN@YZ7TZsh<B-gN^nG;&5d2t6<Y=^mU-uHhN$ndi[8e)eJ:`_=iE)12M:`)n?e>_(@1-NW+IB0e7PE\"@!TQ#/<9QXCV6B)<S$<a%obZk][)0"eG$4+hUbO4-];gl*B_Ihad'qPj!TAE;XcR\!W*\6<bRl9N/F%i03\<oNFBPliEblr$N/=p5M/B:MoN6rt-K#ZE=CZf_%I)gGpdY^ES[j\:(M1&UU<YM4A0A4#RksJYQodn`"2JiSrX$#X_hC\P(RZ:h6HnOgOeqN@%3["1Xn+b0;^KActcaH@ooY$bIq"\ka%)"@j1G\A5,s5II:3)o5RGlc`hLPc/E*@c4-hJb;dLW]#PEl!M`(W0+2%p_cGCnY)/M)Hg2`jLNSh4`2$Nr((#mnd4;6_85Vb.CR5%4FY]oilRt.l;:l:F@`DROtoC)RA!ktJucA7VPNRCPb"hs:?Ac[!m6Z??':pTV5PuQPfrdSK)mWYH3cd-%s8Ju6h:I7N1^u.^'ef\%U!@[8iYS:k>6#)U5!nIiEI6."N"D9Xlq;nEl\2q!fg!>mn?E6NKQ`Cu[tV!sJO+0+312CFHp:R]LT]d7pADfT?^ct?oC6e*<!l3h%s6u6!GcAAm>:V(L:5*#H7o^!G4FA6[kM>5*IRjXrkdoFCpQD.9-[X>B9LA[7h,/NX^EVq]G2"86JG`Ar1e!&/%`Vn5L702[(F-Z/%:js!Mn>"BM#!JU)g0HmA,_Jr.M,!mrLSd<]P9'cS`/jEn-=hd=>cI@Je;8Z(f?)"gn?3uHLl=/.kE#2C^<e2O>$_P7$n7bs1>MX@%Y0IgJ%oJ*Nnj"d^AuM87%gW<![5-&hm5Zg%Lju(lMi[+CN_%)(.]Q%HXSQ6KPYm`t.hgF&P3]#\E]oZqSWZ<@UsPC,5,mF@Ur4i6%EN?8)QJCcA8Bp>8OQpO8&E@q8!.#H+;QS]n'7rnl18A][O6'p!(7*uXHauE5E&usm6JXPGcIOOV?^OrteXS;5I/;b6h'>`\Qq`hn%h'k<nV%6aF^/-lI;9ts/@\NH"M9A]dM)9m1UX[LR;crV8IqH@\3?/Qf;u@c.LkH>>q!Vd@KRUj,_atqEQ,Ptf#mfb2"VC^pgG%RT%_\Q"%@3-UVYSaf=]j\Yt6N%m62lb4uR.chO`$L/:`Wbin<.-M:\f10mp44fcMM2U?J2q``:*i6o)1(4Z&W0OC`:BZlqg]/H77'HW%nA"m3^`Up#$4;h*Bt&!Z)0_sQ<eu.+oK5T>gd3EmU[\E[,2;2fmNc$0d1Y98#h.o%FOHf84N60a_]RCET1G>S:!f5f"%HD<57X.2%l,\4U>!T_hC4Vkk6="nI)lTiXrCTL?eQlo7hLZX9YcCj=c@*5DULuMDaGnmTYLJ,Qb+BWF]]im)l9Vt,9<MO_M9RV[Or2Kb9#[e\%b',Y!5Q`l1N-HsV6[gM8SIba`/oIhNjnhtbX;Y8i[648C+&-At1s/l2]0*TA$T"Pm!BN&;HO),\bMe%S#'r>%JY2,Abt!*bQe+im%)1m*cH@>tuRjUsgg]851`BT/)fKs3aZo$ba#AM]4aV;Q5\nmH'K4A-LAiN8d<4Y^C>hN06&g,gceW54,NuIlcM(\bi+F8!HnGGm!%o[)-DCL$9.XW@'m!pCb:4$`/+O$7[d!/FSi&4Nt?r?VOXOtac_7mKc3RF2>?o7.Mt=1oHDOBCRGn"C]-&q"QnOG0!fp3bLm2^;#2%pl1?]q"s8I&Bge?fHFSMgVQ/[BnV<,igT<[WJBs$6,CN.I%Zq2[=_@^*L&5rPV<M<O@I,#=WJ8+#K),uj1oir;:Y)'X^qtr0R1Cu%BT^[+,+^c`Og;5Vpj&\t<%r3HTG3KQ$4J'6!.5*0M.epf!5@DX(pY6*)BMuVN94-%$AYmACn/?aiCH9VdiG<RN#]AO^^YmV6#?;2%F$&R.J+8`'?>k1Tm<Q@<?hAe;gD2:=c$-FBZl,c5:k(IL+&;E_e,8/]^WpQ1IlP[p:@j7ir8BKIc=uK,SE:?[q86qGE11.s1m("m%jq"Bc_eK*hRU>57d6F/`&#]6@C&W(??fs8N5FgjHVtn5Erc"<5k;;]nSE:?[q86qGE11.s1l4Gejq"Bc_eK*hRc!-^cff+j3Ej(!%n/mlm%H;pmRr96l&N4SX`1E"N8Pekt1j,+c[n$@*_.-U4*=YQnoTK"#_gcN=fBZ^HSWOkTlJ0B*o,Lc.7cml]E.M;B5Jn2G73#s6%Rf=U=7MTVi)H8?+.]'m*EBUFcoG`cEr)++Wr-l.8^RY"Br57RYM.I9a+P$fNm@M)5UBrC]J@>iZ*2#Z#9E4uumEnf_O?*Z<U,H(j%0E.ArG=+ebB^7tR=1Y;?8;4:&+[>ue0O_#tA<\k*O5[#bn.W(N7_J\b*jmAJ;q;X\:RI#-$qdMWV=tJ'WaL1))Xf3nJCn@P97d+F%Vf.YboqF$c/SF5ElaKB*rnl?oFXN3ob-,;`bV.[51njmRBi-YpD.2)bN$.<Os5\he"QFnOL4:LRfTN969$c7r"p:q*+!0&T3?:4l%%]790RCBcNq-lD1r;2k4fSB.Y^c0\k=mI-'_th'TF3k.b9Q&JTXt:c:]u112_c:?*o:^s>IAg'<@\"?*e*\%01[cD`iW"T>Sco"1%;Sa-]i86Y"G*3*mrVuf!Xap#jYl"I>nqT;I1L1>n*Zpm@YO'^faT%WZ(lfikkF-=Mr\[[SO7$1ag(?<Winr:K^\'YYT4)[.@G7,?%/Gq0eN!T0(LH]t(#@K_XnUFc(,f&$De<qqN.!X&3(Z]ZFo1:3qmf"M<>OTABA77pmd/W.llM_Qc4TV`AK#&0o`*Mmi*'TI$BfH.=%_0LA_=LJJ46%(eX$k"iTiWn`M5Nda8pk'pnpYqk$)_Tj8iFo_4H#c"_Mo=Z\;?q&Id@%FshE_rQT/d0!#a,a3=qYjM9IuLsaHR:3%UNFqo.'3JW>#GNSC"^ecK"YK,Q#u!a6>00WZSi`RmQ[Y\@IISfr%B]6PD&YZ_5of["a"gu*+@U*\->co`%dt4eT*BK/e5&=OA'<^%?X3(c3P.ca0=LGq"[E#@H%K3;Iu0I$L8\'u_5!Un=<H7!phPK"pF-/]!6GMbl2H(HpP-krWkhcebh"(8nGjYa$;?24"-p$aR1`@/%bm<nbiY)seHa@-W")WBAS80a:g[d'1c#F&"ZZ],A6&MQF`T:PY@o""m8i=G`K>%c"JBJ,qik#Rd17e-;4mB,1ou\Kb@utis@"II/%[?>UDs#4;W\a%&fd;Xh2&e$XI+$fOrl,;Y>R5F6-J+:AaN:\lP$)oh<1rH!B4#4LON.+=V@j.Nnb_*k/U(s-KMR=gqksFeG)7?k=%;SVAc<K=RqE&m0O'LD%$RK5QE,cuOjmo`Iiq=JDl"fAW_d\O\6XG6.bPq?\W!%D_:0V+j[?P'g&fToW;TiK<OoL^=I]#nJ+PX.l,%>;?f>0=Wd.F@UdL`dRHWUI'd=XHle)=`)Os3/3FM>i-q<1Te@C=:!l'J^#edbD]jJcIIkVYM=dQ[)(j5A"h0Zk+L?m"2O`IplTPB%rQ-6C?ZtQN3X/$!URBK$b5=Seb"/clP$Z)W?5MFMnQ-:m_9JnVIZTAhQAZ-.*,hPC@QLi#()!7]#V[Zcp]KF&6>`F+$>KsFAZ.2F%?%I<Mm%Gtr=?:;-'6-B"6+%qS;KRWrbMf6]2/?>kogHP#mYFslW+bj>ja):r<^i9cWm?WDiQl4N0jK[g$o@2Lih`S<*,V-R:iJ%t%3G^+MZ@;#&l3b5_@Q9Ms/A2o(A`hh:ACG'7AS._*5:S[)*H.`UHc-0hZ<6O)"5,u>WA'G!g/phG7utJROkFh?ge;6T$B=fH@k.CX%PdM/ojefm+N[?W_E$PQtJYrUJQYnE+Xd-6W@`,R(Op\PEV_^`!-K5&jkR89fp.W(d)O8=UB[=df(5bjG;n-)8,?d,e($tJ^iF$,L%mb(8>@[1U?[6UDr`5Lg9-JjQ:rPr(r[@(YpAYr-('iN%&O[oXS;-hJ#apm=:fp24QQ:_;oq?r<g?F:o/_ksib$UU3jdO&Oj"X0#&%NJab+'Fu,u;^"bo=$_riEAuUe)GqZ!M1<5VM5=gjSoKZb9PdQYB3ZT0!jcsDB;8fa$hVaQ.qZMTc'.^]ZCl5Hdq\t9_'>+-=&F#p%Z5EjOd#(`["44)j']F0Lb@lVsA*nulI#"f#_OQD8"QKtZanaP-L,e>VbDaVq:k5G@5du6NBa57eWd:RF:Jda*rT<$1UQDY27)UkD%TG^+'9ZW9Nm8b1.,2uN982^g`#C)-Y8W8lGq&*WL#i-(5T/"da7F4Jo]r>[=L1P7]oQjE:"<)\[eEF*d)SHk9$e2DsZk?DDU*`gX%#&l8d?o%kcbjtP2;4QVf\a%6@9bRar5_*t&(4tl;.mV(mS'pP81<-&7Hf42Ro&o!5B4:4V3+U?Mh*1"=d)Ej\oB(nlYMO>WqZt`q%n7gJWs3-uW=e0n(?QO31s"gL^k0Mq-652Rd`/</@Y$"<A?;pBlq"Vtnap-_5.BX)eQ^JY.QFEIFUbeBrcfDg\`O#HI6P/h^-1cSj%]I6h@h5do01A"RUMi.Z6`805`648ZD^L"1oeGDt5LoPdGQ2Tm^W^$NgLtGreHcb#ucKY-.\omHRqi^Dgd;1%UbE]tsP<Ef5hk@YG%#KmM!ZL#=c^Ltkfm5N/QAa+eV@sM^l=e+9a'D4\hfiSGGo2mmChQ363mhu,Yjsl&HK5@JiHodIBR`_:&0IT-i"L>ESJ.`fDb29/Z%=LD7jV-Roos7+=G?d^liZU4X.rTja\Tnsgt_`&o"ijpeBGfAFF\^9i9=0or.JUAU[58t<+:"MP8f.8g5HI6b;G]rnNl25S`g=$WT%piJK0^\".'a$50<o2N/Co/5s&]D)+R'J>^V+!lF%;m8L@>g+U9m8`GfcNl2kk9rG`qf<La>=-nH&p5s4TpLi/*V@hHV0_Q"<htoQ%BgE:co*=7)b?e$(^h4S[%msiJAXMcrO.Q#/71\Xi0AbW8Id$9dWmTGQ3,@/[X:b7@N#I*\?G@;c2OC:DWR4TkIbbL\\rG"!pL0gd%X3m04pn_[=[6g>,*kLN)cKS$+;.98AFF$!nlPI6(rE9!PW2FWjj6l.eL?H9G?_`ZX'Z\.qFF/>TI3tMK8>`QA.)kkk<DB6u'sUn#%*ITIX2;4fT(#`"3^"i?6?#"OfW6rENg6`q@dl*QFD#NQg1TD&G0(a]6%Ju$Ro'3/;$a8o&*?*2(O(n5D\d7-sPX]LBFgJDhc*5Uj%-'`He2;/f%P2QZE7PDqKS'1=B?XDshFmbVOS5H'34?X!8kr0OR55I(1gInA?e/'tkSToR:HXC!\;2S#3Es@WD*R:-9+_/m_j"$j7%m^7ACgXef1SoK14mV[+cXW/uI%3%Ii#DF\);++ooB!_2m0V?mdctIS3_%"\V:DE/G?7MUboK9rPMN'e(4IS_O\%Fa$\g,Ic?bX%8%^-3:1oB1-f\'`+YpH8!-BZ,$4^$l=qV,9'%X3DEo>,@rZUX*93-I'm0)a+SASFu[;KjLNf>]*a@N+$'H?`H!'W6l6#GP%!HDtMhi%]GYg;8_b^sOk"ln3tG*r)niA,.O1]Xc`"HYUnH><c%VV2HgfhZhi#&O^<_"NL5iWF`PoMVUG#L0or@8qN<5)RqKdEEpj?JU52A\8%(Vti7UZ8rCrLhc@blu@4<3,P[eOT+/_(.Vak9\qRbFa?q6)2Q%rVhs@a,SeXiV)6)Z8u^j_Xd[d$B:XY9q!S&`r!1a[nrjiOLEP\%hmHC!oIK$%)FZb+aX\HNlJaRRS#)0dT'C'c6")sU3M=dt3dWgsg0Yh>%Q0]Lf%/?;BaQd+j5ML0CCk;8E`Yc,dFUgu[`SqqrL)qB%%2ph$YGo"i5iUStM&OXf8u&="goN3RHV%T9ksfWgd9-(-EOiEcd7F91r-Y?=Not\ho8H`hAtA1agkQDu`i0C_31lL6$:;!R\b3QY%=oGs+o'#W;r2$9;GM0E;WRD[`6Fj_Nq:eEME-ko8kWOpFJ313O(af]8FkBl1&l3Jl0\k1k%Euu[a"0D7MF[=,UUq0_EV3Lp);JLK%P2Y1p6N?JQgKqD$0/j0VFRCe;B;[W->lX40om6'#a-HpRj/pKkDL&&5<FZHn5O6qMM7\<+e&fe2Yh,(gIYGDEFnS?djcS%j4Q^-n%pMKf<SC>*2mUeV+V<iWHi%F'%G7$^Wi,84t<Ji_B#fbHa?PL&s'5tgiJ+rO1j)a',q[MsWI#]HC&?X_n`Rs;IHQ)\=PPS'>^=HlK%H2[03mocN*4cHe_mj*@\o5sk\4uk`#E;FeSLJ)N)GfB"+m8L218"Z]7"rMF;2gTZhqdj+&Xrs7A)NdA(j+4grot*&%HIZECE4<>@%.tqGJ4L`'HZ-*%#baY0FlJ)fQRH$<jI2"f/7;Fg?Z<T&a<QB/.1RCSuZam="Qh=;IHElE:]noF_>BI4MR5\AeeeUpG[Bg,,!ju*6%ZGET&X<>jtV]G=(P!)W74kbr]5+D$WKPR+VR(Y-*>jua:V\ZSNYPcJMDfY$2=/`tSkWIkWYJ;=5>.d7C&$c3XD(jJ@c$J&-O15ot%6i?#OF'@u7$63'(7=Che;3(fq2aHseJ$!*];c6o(*hk3N6TV]&>RX8W)A]PR,:]#i)jX^mb9?UlV++Fe(U@*01Mj$DW8oL=WQ'fY%B!F"S5Y>&In1f5dId2CV6c5+J(L&!"ofVW6bKFb%3;pSaqK%\H+anH1cN2G'Lpm6NELp&"9#m;LokV[r7?()N>=pX?1l?h?lp8SA%cOrjIk4Ap1.69g/%W2JG>ke3MbkTm+4JZ%'`U-*W$B0Ln5!Eb4Zao_D6_cB5/`;ZKVTktAi+t%?3WIJ_#EQ?E4#Gn7%sl%E>[$X>%Qd6BS6OQqKQ8rmn%%O-`Ko]\]Cqn(]TO\aObUO'TO-),oU9UQ`6kNbYim%"['D83l(`GH`a"'=GB5s\[>XWnDB2gkDVGSTZVi.#`%<CU>3<pH`p:)Y\fI+JWYk7<8'kA#o/UgfsMpgePHa:9!sfW83Kqg-*<<B,JhXt:1'EWaplGj@>gj7u"^(2lZcJL`+O6R%l3m!ehQ%gerZ'9(@T_/?/m'm&`\:D.YhA#da`O>ks1>b#>5-XOb1cdeM,?e(tC7K^.uF,1F'%K?]aKNI]XMN<M*M(kdpa\5GM=K2EnPc#[R@%-,970K^&7"H<RcL7[sp12sTh![MrXfO&^>_K4eK\gGN`V*Z$[fYo?aOE.G465\5<3N.>-M0`WTSPVh<l3HW"R4OCN3c%/5lF`N+Z%1=5,=Y#2R>l-tM'WABIgF\1E&81EA[m4b?R8+o*+"t3^m(c\"#0;C7uWpL%W9Vb5<#p_"08!LiY<"H*?[?sU9Mu%HM:N%lNe[RAk%pSHc$Gphr/B)LD-(QF@Cpf?g[d-.-ac-75]c,ONm""TnP<9:P`<SuUbr$G4\e+NYEBE]-#AuYdWpV[!OGoCQ^O/`Ng0o&W$E,,T2%/0N<J`<</^juXb`jtNP%]Y`&;O!dC:XfTFf8qo=6\]h;UG\kBe-$jSFU,!Yc[kd3ARbSoRlXR>b_+QYKqHfN4R:c*aC)#RDdDr\#%S^B+*4<A7W.Q.[2lC+u`_.\,MGj62T/E#.s`[JRW]!XA\Pr#nZ9'^Y[%HrA=bP@-K+s=!`@2"a<Su`IPg2,L^:Ei>DcP%@JA"_V]%q?/)f6=pClLt;pBYW9_#rY&joP6n[pZfS_QHTUlLB_HIkp6tVb$QdupQ\IK.\Pu[3Uar^i>10(`aJ$RM,Duuu$f[:ZCM&Pr6AJcs%ah6XM[ild;TL-#kB7Xckbu+F;n9GD!:ca&h;0?+XHu[D6%nP`!p)qH2L!iJc3b-L]^6r6+lMQlMmT$4B;7gYSW*A2#R_JDD@3>*_%D5pI9%$@6oPZ>OdV3],[,r\ISFs9r"qT(kk:,Q4</Ua'fb_U#K;JT74=kV'MMm[QPX?SokQ[JSpI)"\cMlcdpQV)[B6);>\b=;8a%aD:<pr&V#M/`-`6aK7o_8mYk(_jqK8-d>]/7M!`[Mo+d<W-nElT[MsX7&ECPdaf[GbPWETP%L:`[I$g?mT4:.#T($iUP5pe<ACsc%>6l%U[=ut(2o:1F.NO>G(`JQ'<MOZ'W>oZJq3AO@lO6PM7Bep<<NRas2IlE*"_2i0^+^>Eh_d(\J?a7JUH`*"IEI?_k13RI&L8W]%DZFNF*SCuLd)9;SQ$qS)NNX`Q@ElYM;!U03\UKNkC42MBAfb.'m>)+mNl4p_hKVqDga/HXUPhb9A_*crbfbMG?JceSgGPeSfD/gZ%[1Ze'>k^HY[iD8>=sjC>RqS?Nf8ed'JD31oMG;4Xb(j^g'6D`hCmb*S*F=!G58aoiNr416-$(dYN=W-d$@>A,'Pa;sS6BJ72Tt-m%P6jtEn`u?9hSUtS>gLV*(q"4kDO;SDhh3>&F]tLV*SDYZY0Dr:O.%8>W%>VD/)a%!2c5u[/o.>EEU>,#1lZ^j<9)^!hV!PtEMgWD%2O=RlRY_=[@Ec&2N;^\J-LOomSP+C7ak")VWt7h&;jc4%G-L9588HDJ&P+gH),P%ne$`kd'jHNj=-=/s/_AMW6d!ida,(FhH5#fL%D^!h>\snLHfj3A$0sjZC>49dZGMdQ]VYk;`GZ(L%0roUAW\JL(D489[RV$)8N)l4s=i?^g41?tGHp-[OOurbTlNW.#0]pe@^TQ<C%c">_sN8j#-pY1=rp9p6;Z96l85jF+8+"aWKApB2;!,6l%C.4jtNM,-KCIhSH6gVf5/#9`o9'F'b]iHM`c,.s^+n1(eZ"pC_8E++Z%pO9TR*c;ZTh26;_Wi%'I2p^?GIH4,o(XQ2bmYJ=%STbq=^$K$5g/)U285%[-5=,=^CKokSo4?r-7`21"B(&E'qcS?toh!m[>=l%<%p-.uk#K;2`*^-crnDk54F.\h:k%qBN6$nhO?kSH9gi1uG:B6(?R^LgF[T(jl^bTnh<];d8r@X&Q)NmtX:%0)`9Hh)ih1i<q.;\;o%Q@\c4/<dZ7`"nXtNJ6HP<l__L7sn?3RjBn]k=_kEKdcM.&pOt@Yh,TSTlt(ePX!F-,28ke:DX,?X]mc/:nKFYJCJ(K+5*`FrcNkF%DX.[TfU,@HD.ma6j&g)#=kPbmkF6Zof]?8j37c_`XLJo,W%N3<XlOMIgXtXlh`-(pgWFNVCqlb937G2]n$6[P\?E7De=YtYTE&3H%V(Hs)PcT3"Cn<Z6$:<OZ7<(i)Z+@flp0K\F2V.5NS,6jZTo/]U]aKnK+<JEMVR7K5MC_AX/D4j<ebC\/1*p3BSrJIqM8i5Uji+*.%q;ltpZFm#8-`Dna\4Pqf0DG?MQE^kIZ8h<S/Bdd6bHgQ=W$u_@%qAh;D0<<kK=3opb:e[hltDF+l!M5f]gF-(D'iWen7$8*m7q0g%?'[3@7[*,hQ=]F-ATJaaF$2YPEEU;0BaLZ[Z6q*I^m4$2^fqD8a0<+?[,S3db\fcXMTU).HX?Hq*igVEC[409n]SJ<]h6UP!=cML%$`4YqZ6^o2&BgNP_2M0:K'Q0+CQr=MWG0CpR08j"@oKG%T.@0PR!Q>E3cef3+.CS(/),q.DJo-BR>7B%q+A\m<2VBaNqTF3gphte%WQ%-QdIF=5O]h2dRh[N%%\&q&4**cqiqiL\mSXM3S_.\$7TUX8*U]4nD,StS8b"!T5rKO`\'u`:m9?gd>@4fQcB*rC,/rk^U!8N/%BB-(c@c+DKVNP@YdKma<=a&-!1BB5Z2\7cnD@[up/\CI&'?4J0p>`co)uFWUf<fmr]hA-$(ZVXD=tuBtn\\Mgmc_Y>Y,)\nfneE/%EQTk_mUZ//G:$49&k=MXDndVB^q*gmbef-Oc0pH[l`>G<S?d'.9gkk<`+1oHB;9*R[.I"SYhVT,S[)'EQS(Ec.ckJ!K9EJM88Rs1%>%?p:kK;MVS'0L'fN_'tM*%5aC[\<hEp@o"%=O'p>Z\h$[Y5XUiEE9tW@pc>S`%:7<]4af=pj>ma0\^`2O@a?nbafo(1c\g$KR1p%5l-D$BcsVR($Fp="n.OgS&Auu6-s8t\fPg87:$jkkU$+D*bX96"C/n`=8OHaK3)bHSkO-jXKIZ-)K9^ZEqJnU>)`1.SJBqFbI<uM%*"2Z@VP2BmNMUh-N4-9MAYc-_os#-j/bT,)ghNT0mT%f=5<W;:("34Q0+/kuO(\p=^qo<RQFlg%>[/UFK4VUja?Pc%dY<Z*?ua@%%hMqVqXna]:bk:oZI77X7ITMa\n:_P+VT&fZ8DQG:jNi>(n``VfWX*JkN3[oND:JN+j;R'Wd;N:.k1UE[2;em0?SHFW[:jJ1W-,h&%/;29U_1BAh[dNt*EW:u"iE.*6NH&KhBm5WFY&O[FQBk%Y>'Pq'-#F,q-6^S1-\&TMn``H=5gZg5a:uQ^XbA;2XSH((8"dTfpmSso%AH]/SD-MkXg(<po/KSI*!bHk1[3=a["%R]#?;'UWVeE0kfJp1N]H>0L]J3o1=4F7$#1[srC\#mI[P]r+^6Q0J/2N<m..>3]%.D<>%c^,ZiN]1-^D6@`+g=*2Q`'R*Hk>1VY_=,6-r3HU;9gQ;m@lp-!D`5hr%fL7hLVt*lj=G,BfXBL)iH.DqXB9A!p@qI>9s%(>D9O,.%!)9g202+<A/_QM6p=)97?d(3UkNM!XCeMSgQP97JC4%^,b[Fo-1CfURXOGf[;62f9R`K?O=/Y-u;jPkjBNMGJ!N_3,D<&cV7D7',%bD0TBj-"HNHX'Gqo%*NpOq]fe!n&k/'<AN\]Wsu:eV$@'?NiGrfhsBM2UT[379s^;<#UKIBron:6bb3FYh&DN<NIMO1.7sPl.&oB%D`95#MjuZd;ITWh"l<W1XBNhCVPo*X_?SH-R"l3SfVsW97F!TC=3V[sH!&=7;L\rs&kEh`k\60'>/?TVrQ=EVb-N82*Y5B+;4:rF%2`G81Re\/n;oW7d2j<Vpda=0h:g<5+`ZRFi/4J/o^lsI+8Xi/A9H>D0okWSm2hS-@DhO->`lusPdFdct_\fmPI%FLLTO1^9fAd(3%FoQSJfo?)L%[+5g(X<FO$+P\G:a4VX/?aH)$^Xn22[k;h.+roQ2kR#6CA&1L]C<!oEW0K*F<X$CZd>dOW56b9%U%YC4kNHF<Zu/0%9%F]YHFV,X<KbepjpVY[+A`h=9JTCI7c7klRQ>3!OCE<BO*bBi!s1g@/\SbHiAIY_1n/1jD;&L=K4sl3?B#Xo#IS@=mQQcnRPM@%%'`D";C-j_s=R(5<G<nC,$OG)8LH?c3U`5#m]rs:]6>pX+e'E1=5[!bG[G]G;_rJ%DFJc=0<^'er-o#!cjg[0.,h._OUS[o17"LA@%NGl9K=pt=.[VbY!<9%kq&.D#mJ"-/u+Vd>TiS><i/4=%&/BtX$X_W]Z-TurPLkX\U0EQd#SSJGqMj<eu/V5^B*@h4^0ZZlUj&?;q%4'"U3Nf9+\o$-kA([iRf7MOCnqhZ];\Se-B6>*EUM7-VLH$auQ-<bg^0ogP5-6"XlBE'f[8;aQ=9pt'2Yo$8YUM%b;R`-mF%1m?g%`=sZjAOEQn?K-g_\6+`'[1Z7<okAX72URn;p+eY"k^.s(Y&Z>'\b>A>gsk(r15`BBi[T=3Z-"gZ\H`RlB;%f$"MQo.MY0OkZ>KgB%r6&l?p^%"$doO?P6qa__pB*g_rc"cB[#b:CQK#\2S&u<F:]qh<c,)U?'0p6:5A2oi'81#e^>6!D`GkVC\qP4'&4Kq\F)3iQJQ`"`%bN+`9Qb2LCp\\#Jk214>fK9WWU!:G,c]5!S+e!OrgN[<%+[gI"`uW%t'6N86=L0CDZt_eMp8u(lh!NdQ!$\-2OVS;Np>X^p?8t(&%)jM9+?8n609]N,Eqks*`/cEVAB0F[IZlSRc`[i[a.it^&b;.R\Bs0g,h[5A-/^&s(q2La&p>NOsIDMpb-Uas%^+?I.R.-e`ptU&9%o#isuQGFYT+%[=N6K=HVX`CC,GkOnUnldY'*59(`A\!56&_rG$":$TL/^$&=[E/XsbI]FN=rIe8I9?bm/p#@t?'jZ=TIe8Ef376J%g1,tD>$R@*E6mZqYi^^sX:iF'?JMGZ9<rYqLmfku_VWoCLOHB'/]%"hD]\WZ)0O@K.p34]C?"/1Ut+g+20%YBhBMC:AoX5,e8IDB%NW!,4p13!4"jFkodE(VIB[uB\n_AdiBE"*:"o>ZI&0gi.9"JIR6\tQDP)R>*\q3g6Am+0#@TGl./kl&)ZG(-G=J-T#h9m#TcMc&D%HJZZdkmC$K1b1.'/D)R\!V=[d;NB&X\%ZZ-1'Nj_^)]EPDiPp:`Tp+YN!Ubr%0]B[k;PShH9SP<-B/d/:RCI"@cRuYV_79T<*ca*%]>5CLW*479[E\@p#?>Q"WE.2PHT\61;bln<g@IV\RU`A"ok!HAWm1CGT7a.$a&K87AUaqbqc<lFna>02&$"2#;_;T=htKFe)W5G7%?TG&gF%eH9h>G,UeJd?WNW$j_eY;[Y`@0JG^N*/Yk*YF>:<0e^:pn^8f_[h1>-f6UR^m!J#?>Q(-@BFJcO[$6EPmlZ%e'.bC5k6-%bl&VO"m[70XT?_U78W:c#?>QppU*"]p2j.(8p??_qi0RBHKq-Qd4dSZg;r/l^B[bS\uYD2[!Y]XooNa!6[L>59Bug_qlTZurpZRq%bONZ>&$!'g5l%5EoB=@Um-8nld]3i&?KK9jKkFTqcMlM]%%HkNmc$0C(nSFT1LS=CI*;"q$c1L\`gD4tgi^pBe*q2>]:sZ,gX-PW%hBfe5DRS>[3j?laQ=(K"^"I(1&s[&h4PRa>22Or3&tWsMg?Ymp]7staY6HMnfnOql>G_DV*1SVLo'@EhD':mn/B2F_\Bk]$fj`gc%T7giq=>6TJ/=\,*(7oAOhf!WPgF58>6?'B<$tD:[gHolQNoQ;.'OSDq\<qt_Da,kdKP+KpcJJ.!lin['>3;.<_m:qf;VJDP6$W*`%-Q$_=So"LnqJd;*F0s3.fk=Fc1d$-F1.[#'XjEG,Yd&o?D#*_Oh8?QN"D@$h$?$fR]lA7N"D@0,A#@)q<\_$+4PN1JZq?)+2*BV[%E41%6X_E$g"d!OI#?>!g.qTo\);9QQSo#W1>?BtE&>$Sh;etPNK,mFZY<'PVcd'gBUL]S0CeJDRYD&McS0oq]T"UaU><PdZT.KX2%B4m.:4kmSh=ZniNX77'Of\5$3)hNUjIS+paB5\k^/^Hl9g"Fr_2jhQ]D`Tu70N[G75kOHRNnN+Lo8bb1^"j5j1d9sKZZemsMH.u[%SU[tOcUu-cWF+Oh,0$a3%f[e`gaH'F^CfKaf3[fi-5#:m?u5RnED<m*?]#^#8Ml4qLiFr-ofnKS=%RhJhhr>\\W!sHpDG\\:6]qg%_u.(h@XQ5??s?*ZS)kgH:W,6/R+:5]GE!Hsns%?=,KBEKrV]6Fmj#,eYAk=BL_r)B*SjN0\5hG6T1+^>pfQeT,0$aDrm)h/eYd!W%?GuVB>gffDN;kjia\p'eV+_RfNYpBpfIo[P>GJHq7Z8k\M;M!U04K;nB@`P@N3CBi^D/J`o3I`UH2b^;EErsohBU%lA#t,(@N;ZT%mZ\u0X,-9d:<;67@b`(a@F#PGqoLa7(,<PRqQb1\\1Wd*7#Ynt+C"^;6e$W#1]D_5j#38'TnN<&(rngAVcnH<^*CXAe6fYC(q5p>%ofY^%Mm5B(B)MBI`cjLCGh\$oj7=hq))3b8OLllN)/Z89BRIQ+0lE(ICX3UQC2Wio&`Z?cDu5M2(IrtIbHam]pl;o7[Yu'\PT+@e%&``Z9nr*H?53%H=]b>J\+#.Y,@lb4^4"nbi:Y'SBgL%noL(ciG(bmY^MF,P^mmW1>4n&&V&`^L+qqFPu>?LXo&2Cnfn_gl#`ja=5%N<e,n@N889Q=gBi&hu#nPKf/us$=TuegD=&'JZcJ(H"YJ,@Z&F55$K=j-DR:+%;.ST?+J0LiLo1VL+.:Qh$2'bkUWqN,P6`qhZ.c%3NdKKl]!./(XB.W_j/knUqQb2FLZX%IP3a0/Va"$U;O,+jepMbHL])RNt,O]bHF?iqrMKtS*TgC_\M*[O8W+$\.T`u.C+ECk]!<<%qY`m=/$\'&,O9gp*Nk'0_eJ\V'cjG6MYPi-7>ECuiR0aT^C_L#WepaVFLVr&Y'\UkSta,ffPkWraLalr)r$VN)'*TT?L120iOV+-%H]JYDpJ^pJk]#qGlgI5s/"t5a[Yt)PLF_3"p9@t^%c>F(HfsU3*KTVqL^mJtW7@())',luL7?+appT]:2*SSj>5>;an/o^?>)EgA%d?/o%3a<OLj_TtU7u.+,lIedO\72jGjmLcJFLVr&^:3^P2d1a?4&:79k\ruJh1W&*7Y`M#='ijp+Z`kr]t0V9p(SOMe-E,R<cki,%lSL=@H]8M:-pms`o)1t3X3V[Z^$'D]#2-H8WPR=XLF`$8j\af'FSP,Np05r'`\Pb%UVh9qQS"uM/W@joU;JkKnk7Bhb2=+,g&*rn%I*G=O=/*SI<+:p#?]#?FP@=/,*Nf[cHd$\RB,pUkjmLL#)f0\ZfX0m!W+q@][<P$@J]`P4l7FTYOD>m]^*T,pR7#W=@o0QKb*aj`%5*&EN-)tn6_nlspej;B>[WQc4R!W0W1H_RZgO'$;LTt9Lf"F+'![WH*-Dm8_A.U2KJ6MQUfc!Xq5W9>)pQJ[P[2'F^$BiZ1/)2%Z%F]EY7du@pfkc7i%2p6NYbls:0S["t$iNtfZIU,*jftcsae!\<h<UP_rXDl1qc)*s#I;.JM@635lk\)(fTush).iZ)nU=)`ZNa%GH%]?h5&oHNV'*qB5<R6B2-QH"-,g_P3uf:'3NLqR+N&,bc"E+i3lb01A+NLt^%7BWf80O%$Ho-UFa7,1?>1co1qi_4cc$j<;E9d:2e%fX`Wf?mEthTbY<T6_?UmQ7!b<>>p*%'#T:cF0G2?h>L8e3+pNKj+k#uKq7JlO+L^RN7F5@nIr%lm>P!EBraKiA&%QfSm8r0,cg*c%=utdL6J$?cp2jei[Kq&'[=9#sQQV%7DCHp[g=F4/D"B@6>S_&:lmGh'?+]4O5-9cW.JE,KC-=Z5*3-RZ`[^ZONeG*/Y7IA*G<FJq%*@1:r/kQql*TCtG)Pq1)#APhTeWq'nekTV^*]L(eaf6:;fkqfJkD4ZH=HAa+[[M1S!gJ1Zd]OQeX;_;DUV0ikS#h[QL1f/?`D*dF%];ANSN'9S_%o1ha"j*fJG&]%E"DGSenlb@Pc".g&DX!s&e#XH5DZ,><m4-2_YfgO)od)J!9Gq7pY#.,h7*g:O20'aV)D6,8h]AhE%C^JoG=kOXYcUTlbLBK;K_(t-KC50;:Y0hQ!*PEAN:&ojt>f.[$#e']:-\FJ?!Ku^UH\i]SRqg$tE:-qj;7X(WnCXh#494E%mL8EZ%rVDC15LSt!J_79Mok0]a0l:$SH>HXW06e%29nZr`^>/-.2AMt;=13-kpVj6/+DB-1c8XA#k-,J>TU2Qd^;7&T6=XSrK4,gGl^KTd%Q=^aSB6.4>lJWHB4mObtrHK\=&4.nEV?\V-#GH!Ak9JmOW5Rn12TBb&qf#CV;<sn+>!#U8lm-f+,cA^A1hJ>gY+?u8QPg4`BP@Re%C:63n98ZJmq;)[P)EtOH/ZnkR6CdGN7HqZ?U=d=S'AG+^pR@L\_n8-ebOWjNp<0`BLM7k$<q:97$,hR0=hD_`e)Wm'Z$BK\Ca$XR%f9R'GQtOgbEU3L)Q6C!K>*b.DRb2X``pr@abH_cR]^)l9gpAWA"M?9ii0G.Fjg<'1=l8XXQIV)Z2m(8WagosQ,1uY'md'\&rF"H2%fOisK(4!#p_;&<0LJ.kPpE+K5Ztn[P9kV+QjJmCk5?O?N(?3qIXaY4)-Vhi_$3gp@IPgZcAn>O0[/+M6nn;q6gH+:[B+>eG9WYX+%HJej.[*B]s3E</M'g"HH!>oR!<q<thK"GW#0UV_u#@VFeX&]F/[)-Z[UET%6`G:b#C>3;-in#b[NdU,aj^kK8\7sXU(OA0q)EoLN%=?9\WY<Bq'p-+cXZraU-P\UuhG]=E2Y6CL\*TnLOl.KiQ,F@F*q;T#6S=Bg_oibiR1RD^YH-qP9gVVDO)Ygn^!0k"jqpu4D1f]7K%?1!oo3.ebhV8,XLcGM[*XUiku54+f#rgh?4II@&]H))hjau-HDh"R1(7glln@3N#!er&GIrQWL14.YQg>`";*E/^jRH'(/t;P&_.%e:!oW,Jls1bDfh,NE`#&0_QPBh[EL*>S\@;9."P+C%ih8gO$aO94k3lMlZ=4f_="XF!;BYG*<`t6dXsV$OZU[GpW=4>^tSlHT)c2%qi<(R)>h/>n9sJJd2QX]&"D0`?g1G]@ERarPODQ3gEdO\nOrcXAcBagnPnMNrq#BRGPU3BN_WsV1`GP`?m=(5Igh(oZ)Z'6]5?E[%fn9:5Jt3s1htaU@UB8ChB+2cP]/?T$G@(`pHcdSWPP:tra'624O*.&['^b\\Q^r\sTWigQ099bnbBHp0Elus\cV>gK]Q_U2\^Q(7%(qu_Il+.d>>d'u/85?A>VRUW_L%u]D/=bGsb[Ya+Wgj5KrD@-V,hQr/OG8:/Q`jLNYN]I5@hI[6i>.*&dr(2?%o<(YY<20DRQ9P!%#]VbhRuRuEN`"-ZbG@kX[8aO+Hqcrg1V)t[s!2mc9SHh,5+%]r/r9&Tjj0#BJ!iV/FXgbdKY$4'U`5[:A#&.>L8g)Xilm4>;haSi%eI1P]?\R(/`RDBSZll5k.9QG<.t>=P1OSfmROaEPj7W5rX=]a8Qs[AjhX"h'*XEeB6.-.lmUVM)qm!V,J87$S^N"K)R4g2O7c#17%7XFdgMhe=gp[,c,U!>8s\am^FP-b%'!iYOCRlrj@hhp<+rNGM.9B8/#s%49)_SpNV+b.oh;RtMk1i.rajP$BThCX.<1To_^H9OhI%\0#_ZXfLpMFjpANo_k6!)_ZEM^/G_or7rqOO(VCEgJJLpBBRorZ]Shre<@)c5P_7E5,'VE<^UN.'@0@>0@+c*_]Qk`^i5n(M-@Ig%?C`dF7)KO"PD*fm:B!Qrc<cl!lZ%`4C>A\la<()%&?GiQpA8EY)&5UQZ>rn8G;n:8*oC)^r:(8>j(lIGW7ii?6h!\FH,SPUDn8G3%4JqllU?#eF/'@Qmmh;KP"McHfVS.)VH$AReqpSVrH<=W@3&^Iuqf=.6YA@d7HRsB<eNgCrbOh1Lj=#Ns]t:*bhMJ#[A8e%*l0.iL%3;pAXaVOYrg!)op'5tEKAJ1qmM^5C(F3]u,]5ZS[CuCmt^<SqHmet"nn?^0<-0M8!T#RD^TC(X?4.@a2C3N`O/^!"9L7duIfO7PD%Q\al2C*Es(H]H1GdacbsdiW4m`O!USM)<Y=c[rC^NnC]9GI3Gl[gNJ;9,`P+=;no]B^+5L"q?F8Mqc.>s1sJ::&0;L4Am>pK<9P_%^2[KmpQ98rh>CrK7J&Et11*Nd%ZT@K\<+s^>Y6BmQ_iK<BK/>>fj#/KNrt%Ff*G/*N./_"C(j!F66+C?r@mnE/0hNI,KCEX*peU)%l^8l*B7Z?YqdDc-G.eNipW:8Sj[G\H]&4WMShg]sE"ouN9V^u%`6`QIT5d%U7nXQkPcQotXs*OgFS<k)?(<m9r8*C,'f*e'7U(m>%H6/FT%2B5<l,+?XMt.bX"Utt`SA\^kn,bY8_E$c+2>_$kELD)\##C4?"W\t^_!udLnbb9KZeugcTod1F%9@Ds$^l";K])-BD6@pB%H@3WD7`lrD!mGN:;7^MYgj]RKon^]TkaZ?La+_B)l0Q"6n9If<C6h,n8cfBIQARAg`FS`-JIOb!&r=r-]Mam9N>k5uF.n.oqh<6e%Z).V&JpY7Z4=O#dm<:<mnfCiQ*mOLHflMBs?o_<'#"=CdD0YKhn&O:!EB9S3R-9]I'U/%i)AeE^C`]@['@4I&5.LOgjj'K>A0(/5%'k,tfN'"o+IH]\Q.t[ViGK-!$^1TbTo_W>4EN8qA-@p)IjD$STI\)UX/9nOX+\KIdE_R+>;AoJYgFmun\LV9VF<i%"aHZ'Njt4C)%?.EqCOo]%%5kK*(^sWY"6EN[4."W@PJE;R8/'(#`dd4.o.V]_upo)bR:YT6!W8a*nLBT&Ph#7M5Ec3P_80odB$h@"Gf\4:lc5oKP%Se*tr!gu`NCO)Pu&>O1r9BXdC'nA<.jp8XgPl.f!DO.n1-_/,lkU!eur[]s#[sd$@GoD!+O\E&_J$-JL>I306U;b$;<*@n6k$"-@%Em;Wf70br5@QcD[@Q"R^"^G_GhV<+P[s*NBO45!GMX!24\!bXqkmb1Xl$VFr?DK7POlp2[krR;KLc`?<2jKde)b6qlIgAS.7hWio%P*>FAPn#2/QPd28aW#;6n"\g?/6]@dQfWO%XTY+TRCQj<30PCWQj/2Qq&shD^:>gRDa3-`V">9&QK-r:%D#[:B&5Y5GCY&mhrS7]%cua.`Q<7D9`Ef;dqo&"8XJ<6UQX22o&*_]HWMb-i>gsVZ8>mbA3F6:><3U(XAY.0p\]X.(iMBY9gH.)ABW]KC6p^1LK=]C:;\Q$#%iiY"RF2^DD=0+Kq(M$QUb!M?X/9fjD:S_hi3g<X'EYbEg:Zj5S#Ksu.@@8]Bff,hQ.&2Lgj]=cB<(!elNnAgNW*Ttd"$hs0M<f68%/u0RO6]b,O0cS*<df7VD]X)>*Iib[^-!ueQ2]OeRYE"Vgi_.\i[BC84]mkj8<;cpEs8*!43/`O'&k#.\JnV6*'BBL=cN80q4S%Fs%fs(rh61+i/\T]$l\@BTk=%3=IaF-)N.LqO(.@HWZqSerCCg"D[`Z-cQpC<V]<Slsnh`Xqi_ot\NVl(&#[NAsJ8GGB@i[cq[&(0>u%hG9@tDI:/?^,l1"!bp5B&9ng1F.09[LaaQKGA$ed2SBQ#b%ZL*5"hNl17%0+6VT*\2>j-E2ag$?A;s'2K,Afk%D8>;ZhUgq!XMTD%7)!bt.p.r,lH]2'f4>aac.Is!n1B])M*=e[@^A&e8X&qj;f9&b$RCiCB%as]2oS1MMM4qKQN+%7U$f?pjBB3Zr$\,.pV*&A.K!/>%S[ZoNUj>@1Zk;o6,<<;VH/!5@[Hs-Pk]lWZq7+*%1;hhb"Y<[_\IgI)^<=33D@AYgRLQ[JM&!O,h1]IFa9/-D&a^+3?ntMT;hHAt%>WtC)>UQ*hbqmnIpB-IpHuZSSiEE#7P/nNVXO[01Ub#VI'dShGMI'Tl\AEOfM%)?am^HU.D"0E/j=3CeC<,OU"%g'qB,nP]e*m$*%%LmD1&h0+KH/SVW=:S8,`*L*lJ.<T8$L&88(>6Gp]6hdo'+T*HgG\Yg$%(%[MP@XW,[?EK;.$g@&<ZS:I'r5FO1/*$&_D'KT_4`[%7#J^'RArDl@)h*QQ'4[UJTGZ?EeYm$CFp'DLu_`R)g'^iJ2KO6N*]EHp^-\#7=o#n)0_ki27E3BG=u%s3+-mOTPr@*!3StR)@0K$%*:#i#PjDC`oQC'aG/h!kCl9@746#!E[`L_=QY%1HNp=+5kCE27e8jfl.afoA>Zo$h7_/bf"!@C`dOh+3dF_6WN_pkc"pUI5IGmfn%2QsqTm.'J'Dl_MkFqT#8[oI5X)V[>Hd9mngqVI2"p_[]aNr4&O7>#HuDtsbl7>#I)kA&m*7>#G[k2.gb&K/aDa3j!b[t->2k!O7V%e61KM9@9CPoAokV'Fi3)p4iOP'Fi1s+577h&\$'m,gLXJcX9T)N,:CYIY4J1Yc[F<qP@3@k5#gYU;=:hk=T@FGq8ZuMJ]SXrW5a?%?lRFYrNd1I[W*gE@jttr>aA7XW`>8(@s_i;)O(nom@C)@8:A7ZC199>'r61ip1[iqOmYLe8!AFun_]VOO6Cfb&\DtqU0npMlo,)f%N,A*$o\U>#0t,&lOWX'-:S`6-@^)d4./22ml=]OG2#b,8pedh8S5o6Lq,VSI)W,K''a<\WfC/5EmC<'(?bphZSX%nT,)u%s_>ba>%lR\T_Mrt,q?DMN](&gba^FP:j&.<.?WYn.YKM2?-`d^o*pWu*Nl<IrZ!@4U+AH,3\^FY@7h"QbdFQSW@r]_Qcql$jnF",miHRMEX%B/#CbQY$;BFI):/s#T8aX>_<i;YhB0iOg%&bX9it3%O#'mgtVP;T4:P.NGBBZ+C4'/S-#^C2#AhgL89sAO\BjIP:hp'hnfiFXd4I%?7<EXHB)P^+RA+SoH'I9`K%gn7I]61nO>D7?@KqAidl(C3<a[.1,0BM1nDUQ[8;NmGHX""U:F'i%M4USi*PtNmPK?0Y/I,`Cd7Ct%gLq1;+k+*<5TRH,<17`fR+<PaIYNou")Pn-4Iq5]LIE:bHV@rp9QF8PZ^YRPS=T7O7Zq6VGpC=L0-=Qd.<+u/E5&+AHc\@iJ"_,C%?p#b'7ctLG;.PpfibNu?(uC7]\^H+%ogs/Of'MSaHD?4U@KIa\Ck0#G%nl>nkgO<4f\=P&P.P+%EQhI#S:]?ZqQ^f]@F*6)+k[qH%aiWZ<HXB<l$@t)k:3X>rSk9Z&Q$XKJToWnI%=pfO7.Ir1FiFWgL^,]kD/!]FrY4h7Z_<<'*hE@P<*GeuJr@YSp;6tnW$+'?Fbm`;%6p.#_HJ#3]U>s'9Gtdj+p=br+C?gu+@hj&^B;!]L5J"nc>X4t$mF9.8;p:q3q0_(kY]171pSC2c>Sa+*fT4[[.H1P&S55_t00iK0%Q#FV>`U!fS"`'i8cm_N?lZ*EZ]@W$4s-Q.Db#KR+d1;k&L@s"HM.AE_[oI8)ojqc`>K&MG&$n(+X^YN*mF_s+kUkj_dPqt-fM6LB%fI!B./&&,pHSm&3[eR:gD-7e7$/\dg9sOlciYsh6nEp69FVCD(I<#uaCnk!HceLo!gFMG4mY.,10*rdfr7VsuGYJb7#!\s_EYCTP%g\/oeoWW1Rm@0U/@GBqu#2_7j)M)][bTN^R(pancb/$:8$S4`!E]O-\<u4Q$EVY:le##Gmbm"@U&aB845$(H(-iY)l;,@b'fPg;F%Q,q!onWcofaX@<'_KHW6jSKSt[V`2)j!tJF&a00O^7q85EQ__L.gi_%/ouDm9_ch&,TbGZh#b`9^Fb7OPf(V+^FG&CNlu>IidgS*%C8DOqjX$_#G<l#.9&iP?Md/C&/Bkd<L[812l+IeF*RCR$/b'$I'l*[JJh33qil>JTjCXDI$FdW<8%oh)r?#rRZJhLQ$8<&9eKK#5%1jtH02a3a&Tt\J5fI>s_4rY8jA_N,c8c,j\3D=fsq\1h)cN7[m0A_aSSk[K;l)W6Fq5MP9JoD?S,*'2J]Q7%N.O/Aimb!bfm2:sY%S\75J]T;^hRP.a=5RsctVh]g%,"*7P+?kiai*L=tn1/h]M.`%j(7Q*BHf;U#.*,7n8aIr<a5C8HH-DD"\1)W_ZN6WjlDc(/NGq3N%$VScmfs%Af<g(0\d5AVOlEon3mHN,ukp]".lLm+'Ye(`"]<S7CX$*l$m#fc[0h'>iU"EnJ:ksCML'G+qm\(7o`Al58d'/V2IC14.%lBAb^[-(oF%CskH6dXUL$^p8S&`4>bZ-:#OqCHh4he?\%$]USE<A"IVcV1kHOuqj`e'f^u_Kj<*s)c8+VXIr0E=*/9dlB6':T;3Z%_f_pTlrtRA-/oAH$$E%MY)IVL>OXW$58Kh_]t=.L0fU:W"uGCgWn?f@&/I?lPO8)`&]p=<_93%8VoKZ)hm]@)Tf49Bg#bn4h$pNs%\!JPKfVC1";(KAnNnfsbihnq=:HaG"=adHSrB:->H[[JOSQDEjGQ$8#pJ)N7apHB.?+jFIPsp90#Q6aG0#C_fHZ_W.WVVkNe5C.l%k3L;!4?DXrX$Pa2,@ch,Kh+]7alZb/MOiWA!p.aeDD/I(#tD\t*ZG(oG;p8fhFg3u;;><_/l/fH-,L,r^0:5;:7H'LHKg%sH$hF+%9&8eG*8:;n;iWI>:DgiaUXs#P:"j#`kA8E3F"l!gRR'.kWT)0MEeB/tZs;j&+bEd+mum(QefJe:.uej^<:c,6k!r+XE;toh*]=:%%\K]eY76*[!C&7oiC3-L6X$4I-4jjo#@WA3q)PmZJ<AlED>3XXak?L==HN+D9MAe)%qq;l41sM'<n6M,.V#-aDoD4.@eaR-VoZ0Z9%,WLhB_?cqr$kgK[)?C#/ciBotom62TY?!r@=A]s7Huj;<)5nQAZFRCF8elEicbI+nfoaS8ho(V"A4JTial@1flIS]iEC):f(YqPh%3Wb;Secn[,\NX7=Le!((q:a[^cd@EpRH<A],?F[Kj-t\Kn*2b+TT$Ssac1CE:EGO=Y<d!AhBnlRe3d-+<MG(%76@dm2#=tlTTGZn%1.`@b@N1-gK\!?8raJR#;I;=]CW*.:X`(6R!7@0VB_f2I[1p["Y7+jI6+2jUAPhdD^AE"@YfbE0r%8C)m'bC9I:,$?TeDZ\ZY<Qk%S/>5[D&HB4&G2s]!l/6qWdQ2D_L?)`(fL%T7H)oP7A&`@YfHK7]QIl,KtHJ]>FcTZNl:d`pDTW=G>KP4k(ee#1?5i;SuR_^PV^b4%?_7%R'5+kb)g(,?l&&fQ%985SKs:?:o_@mZ'';m]2:%l.3+\"FGmqrG&t@ZuSV]Dnnb8!!-i+OQ5YW\j504SfYWiW![N[oo91!GP%C>aOuV"ktA+-\id+=tMRP>hhUKOi7#>*+Pir2hrI*.mh4MD-J4jNi0I+Jm2tZSdfAig6Ff:[\lobbZTc>[N3/c(^6*oAM7/W&sgt%lVltF%'L1%k,I"Vdg34R7lOmh@6[WONb5b<89iV%9NDn2&%2e7n)F"lMU:MoY'#,Y?FN.T)>PO2MK>rmOZ8ip7Jt2E:XUO+o64FB%FLHO@U'@'rX4bE$"B'41;mP2<]mIj2\""<[ES#GQVCr1B@=%^7luUiPfHVcs^aTM[/$@%<-dmdm1$(.&[u>"eTfp#Op\/T.rkTP9%J%d^GoSHl/9TE285RZp5UYrQ;TBj.9='S2>+`gr9buC0mXt!!XKF=PTXR#=-=Q[Kf!H4,HbFoC^ZGYdtMNh08jdB*(mCU3NrZpO)%Zqk#Z=uKosa8<q),^Ef,.&QqKh-3oXb[FUsCm]"DA\l[(S1b6sHffGLIYY;lr)dOJ17oL2+i.*of0L[RIaRf@k$%0F]pO=>aV_BO%7G+jg_l((i"^r!kAc&gOSk?K4;^M#N5hrF9Os(7lZ4qTe)N2-AX''(THQ8jP#a,T0X.eZr]Qp-KZ`+8l?>1Y&b`4!!&20j1!/D!A%DC1Ff$FIa!fC6J$0jife\*1>Cot_OJ9#*:WbrTS\igdo7H7^kKS/jCZZ$bd\:h[,H]l;&<VN!:\7,s?kiJV0fS$:'\]p^8Mr3-7e%%e()V_3W@oG=?IPWNs0EDis+?@`kFkA&rm;)IhsrSK$!Rq:-V0k0Dbk]j4<c^=:5jhkW&_0P%H;9W.C)[$1\MBoI>U2ih[p:kq"t%-hJZpr=o-`9q,P6bRpR0]79=S"+PqVn]?\9S5"!W&InSp&ZYRp&IkHZCM?+&&U6'="Cq'RNbjjf[X9JMKh*5._-QII'J;<:OW78\%,_iV8B[:(6*at4oAGj%r5/LC=Sb)G>KV9ASe/l(M?M=[+gCJbI+ahiOrAdC$%<laKaPX&X9kW%tQD406S.kKsnF^HLgjRJf.=/OD%J.7en#Kr\"lkS`[JQOD`@%#32?^pU4(I'tAhEC>7SH&*j6.;l'gk%1Nr;VK]NYQW6Y)junq?V(]bE45n5'`RK70Jpu(gY5,_M>?6%@c+;n_>n+)1R0c/#cJKq;7@hjpY%T<GI$Hobt9i[WZBUTTCa#k0r`bBW`BER2KsS-NlR\ja#3UN8R0J)os5NlM'96Ro]Ndq7,jI5%$cf&s_>tHq-$lPQ"fG5>3;g>-jWX#6#/c6m?R4!5fU:.DHm+58kpqI:o&&E+ZOhsQe#nLkCR'G*_?l2m3hp`$_*chq\pu07\FY_d%&\7Y2&^l=07p[t>O?E4Zb%TV*]pO'3NJiofjBghnW]caYbm'cGe6.#]e*iXJ#/^6]*HBtr:Ons<1bJf1KQuBc4&:'Y6Dg&2P6XnN%`p(3M8eg0n.O"e\9LW4BnHnS'T;@)F?c#@"`K;.Md=QZ;0G%MF&V7%O,@<5AW`DpV_sP?B3o#"m@]3Jn\V.GI_Z$_PLA!6HOJq=+%(es^_K1M'JoCb]f*/J7%Y^4[A'o@CV8aVrh_:)T.:tkFsB<.V\6V_;T,>q&YHM<(<h*Fk2df2A3-ttIdC(=CcUmuI77Skg6aNa:@%8-"PF5T$=G/C2mbd-!@L^iA7a&07f"/rO2IP6]5RYE]=W5_=$hh'VuZo*=RZZ2Tp"YM=ND7dWT,6.rjb,"bL_p':$ASS_l1"VR#A%bO'I(,psI",!O!]VG51=<qYCGAA<mV7VYMoZQdi>8^FhYKfgSt&?KL?SD.D3=AVS,V*WVn.]Te&l7n'"+5ts5[eO?uDf]?aT06Md%pK6O?dMP,+@1@UIS<R)U8.b^*rnEB^)EkY8k37^SY24DH&F_5i_O'?6eake;T![n*X^9K=Z6-Pc_4P?@gR+#Ek5''a/dnYfO9E0i%nh#d![j$\S/_2&,Cl*:*If>U3FN@GR4n&fAn=_BHQce-11Tj:%Lm4@;.X,u:r%S`#BA'6SbJGkHk`o\NCAnL_Fgd\`<<T9uF]ZAs%lHBoN,A4Bnb<nZuh1V>6QK#`U<kP$N);0f!$kNa@84Vh!]kNdC&N/o4#Ymp,:-/p97I8@XCa3fFLD6QCj_+C&Ou\dd"KOEs9U-+N%C$'.'-nH?p/Ft'i=A;etP-)3[XMm=ddoDq%=>uD9HN/u\R^!""&PSa?Z(DB'L19F?<^9OOcVKZ?P]\D.JX$*.\[A3VUcgGFod!rS%=nW?)s&D/D?+T'*:/d,I?t4cR?8m.WqM=(ecZ'$;[BPZb["G<%7LS91h(qKM8&VRa(7ks%JV7>i%HlnuRBW9ol_0!&'TdFaWX_!4%hhR+aJ+9DaqaAYuRn+<hj(mm_Bh\2&k7sp)f.'ALl+B'225`aYeDfRmE^`uqhgdPTm+F[Nrku)bUkq1jQ`)@El?g=Ep\k'/LcF]9%F=<sa2]mn-6H?g;AcFmP(*t8aIDlTp\7I+68(\7/Gk?9@`""4[#d&(8WHdaq[8f)%UYq<+`(dpoI.\W`gE4==hm)5,=\7]FbG2r]%0dus!CQWb*/<3@Q+NZHRO,1s:drS`VjXXJYL;U_p8ETp`OAtNQTV"gJF6%Is3s0s<B`rer.gY,Xaj$NWm/OSqPp.U#*-NPn1aY9\%W$P\Y5ntB,Le1XP4Xo#aRn5m7miTR6GOIm+d?m"bAa$G5>X^Dm-\9?%_F0:!IL\,A3ggRep6BrjmZtCIE>BHnDE4`j3Jh-l6I@-A%%+B=54sTI.4<T(h)taL__mR\Ol$Pt$:XGl;0k?jR`:=c.4q3<`YEV&^fU8r(h++PJYo!R_C:qQjlljC"<:"KHjFa.$1qOd;ZK1(0%fe#k&_`5rF+6AlfBB%i:%&8u\QbL\IUC=pJ!s0o0.J;?@PnG_sM.4USb_U%>QeoK3fR2k_]KWpq5T]=H^#b`gh4))kftHj&O53<O%^gQ!"gHGA93DOT)9)T!`XtthWC-dfDM6N8Z<]u91Q3/Tq>%>Msk?G?7X%J='7OQ@CcD0`fU)QY[PdjI(c172GSD9Q$GMPdIlmL0i%&:G@==MD?Y@/:;'qZXg`'@?;/\eJ`=qr<$+C=gd_>ATOq@3N,]K7',ic/7!K03A=Y4&SqWJ]1*LSst/fSigIYTX;rd&et[(m=(ZT%EhYH79/3:ULHd_>dclukRaBrk8.M<>&1K>V8s8YHmh+#qo8;5P72,\YhC)K#Du?W&rGARQg7n!h96YLMKL;88>"Tuu(LukFa"BtK%a6uGB#)PoDl$1:/C,p]Q6\c4+L,e@q=68D>(1SG!C,$KGo#fSObbDdUA[k7!`S)AcauAdPj?_U)`t6'd`UY_9cI;<=ZmQ$clK^()%PGU.:=Dl3YF[Fo*eS^`a+<^9VkJj>Z\Mn+u`qq6Yd39`*Fcsb%kQ_k7l4qK'W0P5:!NGCaf2oq\n#+@)<_QLE]c'0O@WP6He_qJU%re_#L-sUEZn!=qH8L?S8TZ2H9)f=qr(3Z2P(t$uBD![WCm'clFfM///Zr[1/lCpGVdTgp?\MmSqSG9Gr=Yh%uil/Q>Sn\"rM7dI>%5j[A;a6A:!P)1fSC)ci_9k`1IeNr=Nak*[_+4EUqKY)oI@0Ym8E:2L=??8FL;bnG[-/lOtc0JJo#/[l?ps+rjd2BlO?+bCis$Uo0%mBn6b&<,Ym8H/<:L`P(^Hh5P;59k&8][Lrl$Bd$aa01gQ-BQC(r@8+b4A0LFE'-SuBW##MU:$XnG_YUfHa^6L5D_69BT%sN`N$YN%lE`\VRfY=F*B0OS7(+.7,Dj@`At\#Y")2#/JX@E$mbtMam[cHI<,FA"=OgSGg26aU\/IS-TYA?2r`n(@"D**MimLP+:Dn['?3>=X%4(U[_>3dX?RU"3SFT<imQW:]EJUgq"I\7*+nD%)`0.?,$2Te9'TtHHp<ti<(Sh^<Aq$ki)4XpOlf;^lNV\7_WV[V3_L?cQMPlVrj%!@.58puZEGFHuS>l3."3#])-i.-IQJl3."3#]Sr(%6D=S1]el=)!_>%d0OP83l-8%!h3u3:9Yh"!;nH-kldJ4JsKeE,ET:.:!Pm!%O#;NSI!nJ7DPIf6k\1/j*o!V,CnhU3L)PW7?E)K^p7i4Mrj#*CfT/KEHJM+Q62,+MTK?lk)n^'m:@S:Ff1k(af?K@6!o)EMVn&,'%]g_u=gS>ML7jGf)rs#$%58o*t[=r_8ZUS>DD:T"e2$1Y`9Jcf"ZMs#K8=MGf+8WiWe-N.&67NlSmCfsk&[\G^Wu;#ka&[<aF?bfR%do#bd@@-DR$;*JO6a"ttI,8BN7p_BY@+`k+>VHA82IIiAPjDnu70sEu1b4i^l/RZ3QVSO\qZ>U=q.QlQ*hiBPp\"qA8h5]Pp@@J1%kBYe9Mc\KCI'T?$b7S_0'<1:Hi`RqGRL49N@9o_b4@M&&GXU20N3DLrG35gM%4f!JD$Wk\Vlo@fT^o,"mE*)2=kT:?N:WIR]!'7i%`n8I?s!KuFUq4A[/+%Uc3?68J6mCX(:H[d""P\AX5t&H*%ME^b[hA@NkU7\]em=*a@:;&)k>_!6P0!>>71</u`Ph("O__0kM\M52%P^luMkM#HUg\]:h`0'6K/)VJ=E!@g9$(Ltt:,qDV0Xbs$)slD<r]e'IrcY\Q&P6$qaI[imG6TokC5))Y3d'`;0esVIcRk/CBX[tX%R'/j\\2&+2[fA6b6A>h0\-6QYKFJZ@E!qIb(+*#=_(EHkOPrM0*o$gND]($(i8tfF^Ddd[0VJP%Omh)]![V:j/6"kqlG5'VWb=$[%%i'>.$a>\.GLbP;"WlHN4p4&),LGWiUsa]Z"o$dNh#\t,Jr``Z#Ibh@%NR%gi"i-*LC-/R"fZV-:k=B\!mUXO6NnOdJlFdQW5+$i%!8O0-T`PaB!?1iD6Npi."m>>b]S$S+Gdq@e4W#eNi5%!qh!0up!rG7!)7.1[(7uAEbV#Z#J1UXM\uMj10S?7C*bS%/^rbaNHoltp%AID[N!CmbqZ'J1?WMh\<%lF5>'+Vb8`,7T`Y2E,\Gh0N0o!ari7<FjmV2'*+/`0rNPADW,JV8\7k=Wh%i)e98=r'etr7t"WrF0=>%@S,p+#<tkj\AQ_69P^?9bVYr\X<m.^/B7XJb/8<J]eZ)u2*cZ&kG51glT,>M2]$<6G=t1W^/t-e-P_Q_V)hlEmlJu</dV)%et1"s%8OcO^)"(PG.T1tWGJ85)</>X-H`$^'^3aeJpKhIP8SrQ$@=P?+S?0Gg\K)$;c;fY0DKfORY##npf>?b;`RX<!4$#QL[(OtSR$"YS%g!BPLk3QP8]0GDA8V">YmS%4GR06R3dZR2[i@GRO&n'j@?S4XoR0:HXZ/cNcSOoKeacVq`[U^#Dod+DlD\&6=$9i(H,p:n)L%3i0%1't/pM(/4-<4iR+8YC3)YK^M"-#h$QB^PT@,d:h4OB_jB9EK:N`CD6UjM(<M&ptL64A7*<Zi"G"-MGFTEXAJc,f'6QEJ!XKRm3_+%oi3=>7S*Ar$)5]j8>Y_1M5W3:;RX+=;.gMle^pEd&9T<cau5S/l:_8`PP]D-%%.7@N#+75!&TN0k>1lt,ku+R7[$DOaQ:fj$0FOp%]>1Ka?6(g.Wr,Cr>X3A]qZhL!PK:T'oIr5O3#5(@EFWI2S(O_'n9BNQI:O.@J?pi<`O`4(ZQ[&Bm/(T*dZ^fd!+'`)0i,nCmU25a%lk4HnSQplb]Pm=>Pdm*qm,BJO\]"p,BB<iI@uJR2@s5-WggZO7j<qRl0t5e4BF&Ab73shP-o;'UARn\+N^?++#TB,\OJC/6?7Ve6%)KHN18jt0dj<uj<XM3noL)bo%'M`R7;F?I26b7;e"B%UI0;O0R'4,DZ$Oq+;'6_nM1h<UC&QWYf;.rM4@o5c+3T=_l3-&]3+\/4L%^m'dU6Yg%Ne5^8)d>:F`.5g071k]X/73shPLn^VZM,%g,nOD7e+_/gU%P9R!-o;'!'TkrrL#Q?_Q5XengTeY\!_Wt_$4VR2+.:W?%UX0Qu0%!6"3=63!o3WK5L)bo%@(\lS2<<s0./$b2;F?Ji5^tre&5klUc2d!373shPkR=8]PT"Ra#0\uT8?!aKh9cM)L)e)5BY6_\%2<5Sqcto'tUkTl,"%mr*,,la+n:7eg7jKtQ(`l5E,Es*e$kFI"-9A+L8"lV1gn$^/+ij)fQOt`4;F?K'!R/+>lpW-Vj<uj\`%3*q%)KGt5X]dZWUkTl,!t]nX3^Bo/?Klct)KH5s(paB5)leqW!NcQMAGNgN1:Vs-%69.J5Z&n0nL<g?TfG+oW?K=O!8.438I[\7#LM+a%:27i^,mR4.18uEeTcnY5O\$!B?8F^1aJ=P1_ZQR/'q*R5UX0RT_&\fjOCN154_c!6C<07c#V=WLUkTk1McF&m8>Lt[F,SF.(7is:%@r="D=-6&`3T_)%X04b"\2cN$hB,&7^s_/jo[WTlpe#aKE'/3T5<-#L)T(k<@\J#8=Ij2<?9G0uCY$#SLWjmTDn%a&3&tlVLN?+L%@_M$h/BVn>:@JQ(i/*^(2_ja'-9o09<7l]\U/p)0Pgof/qg%[FmJ_BBrgZ4&=JC-ZKj/9OjT.FNJ>2KLn9YE0]j7.>%S%3PI!`$.%Y["bE*!(iV>'un-*-Jk$o=("(WP/8Qd`VB>`O!'V:m+]l`5_RMX+u(*(o4U&IZ9OD/fY.d-"cSOkNJA-Zf%C9QTqYD44!U8lsHfE%VHELqQg<1BVU0]h@"1iuC3G8"^SO_8#^WiX`etlk!)%gBr*%S8grl7rl@lrD*8peS9=VZ.:l''/IBe$u/?tXBgom54=h:_M<n\>A%m<=]6JsQ'ZHVhQJ@HZ))Mf0PM0Q^78J7pX5rJkuWSPX-m'&-;=[T7aGqq?2kF)5TR?-fHJMMfXabgW"qjF>\lEq>X?-^^^2j]OQJ%2$$A-G8PZ4(eS%NNinq'+gYHkL_C09JqeKe;HOmX)dj+n8cELZ&0(]&3PJRs53s'OHpUi<>rT+-=RQs)!bOs_96j5[lc'<7C*1;X%[Uj:*&mREcSe<k6k+ENc(n5aum5;mIT`ja3%T&m&I-MWcm`h0?:2ttu$;7ZaGD#>Se;,9IN0P4&V![kbP,ll6+&//d"85_>5PkN+%p+:Ia;T]oa$VI0a3+S-!XnD2Z+Z_\j0hF5)1R,q8r1Mio1JWYA`FJFAW6hX=$/fjip)Y_(%N[#SSm"t"V$@GD_s.A!MV8[:,D[T`%3;L`jon);R_f4R<+,ZkIp6%q3gl]iiEu-Y"ZSTV:%CYAjAnCV()`5o:LQTj]`j/E)I8])28^-"hb\B]Pfncp<%YA:%/0F3o;e`E*%b1+:>%6+`^qTKl17u%&\()5cj9*r]Y3:-RQX9%e[!3h[),n*mU&+/?WmUqBVoDm)hYpKles"fq#3FT]5*K<6k^lTubA&<aFZei*;%?-(Fr-Z:>J4N`<X@lJU0BcdW`T*GDW!MH(O,pHaJD"S_X5bg*kKE8_b6e/s8&dB*ZgE0cN*6+0rJ<<@Ci/T['J7K,-S1oI6(Go@9%lak_)+_)raT]@E<QnX'N!Ou$6S-]:0CcnkR!?;VH;)m<`!BfC2;0kLN'TO\Pi2]]m@HdgS*A^(dcoZD0a%a57cNd)[Y]U0".V:U,%J4F81d"=-I>YC\NYTaNc%FqkJc2\G/7@lr?F=D274Ji[n+i!?9`/dZ0ac=Y3b1Rekcl(21RnhfkmQcHN!6d,,mXR6/@.diB?!JFB%bjbCj@m+;"r=hVfJ-D9=p%]h-'<i_g!4sJ11]^74!-$k+8/(41YDac%^lfrC=T^CS$!<>n0QQ889u+t%F%I%LO!V>%pOU`q/4fmI%h&^&rrM0`Rc'p624X^;u_EPg<!J:HQ['-]!Ls/@2@=`qp!PnMLY/\?*K02*qWH;g"O9]D@51M!T1Z54c'PSOSNECn-#C17mYd/7.%HB8AE!3In_ks:H]jGLel:b,7nTEfa]#/]N;G]O(jUG;g4.")$.(OD0!3Tt@f,[bX(E8X+3K056JE%T@SoH4\*+G_@tU^)/f#9j*n%/3V&V3=*\#_U3uuOFmO1$qUtM,mT\i3@L.&9b6e[%YDbm8:$@&E_n5+RNCO@*+[8c$V1g!5Rqh5bN"@!jFJ9Rd=dVR+:mNU;YMaO%4id^ca=W_=OWNS7*/#iIL8,",P(OO9pY'pi!38%HT-dqP$K1:)kgKYY[edW?"[Hq]:.GTGed/;d=S#kZWB,QAR-<U"*TJ!@mRJTW%l57PAonLOnQTbbBD:OTdWt#-\(R_q7UUY!QRTr%W%U`:rB]MUIH,Wfh'YS#(abr3;MrIi:<:ZcDihGKS$S!fUqf#Bm.^/cMF4C9k%q]Y:Y:0od2FC@'(#q^g#_:"%.m<:^!fMH/!fn*k7Sl_8gM30/4@(J&_Oqc3igKg5Jm,iM$8J_Sb&3'8)=%CGT\hI8;@nmh0G-\/p%:c-llC,Ea]/.dY]&=R&*KEVD]"Ya]Y4Y.-u."LG75@K+n5ll\=i]/P$0IQqopj@_uqud03`%q6q]S?XlC'U.`LjYF@n>@:[m4g1D%TR&$6j9k*<%n<D_i/8^Z5_o&P]J??h!IYC^(4hON!8Q'1s$6Zs]L4AiA$N*idlsWI^Ud:5MMNM<*Y]arIOqQTh*$F=j<uuSmQgl0%nO:8+EXrN8m&(+K6LI-j+P=3=TE*1cgA2GF,NO<uRO9/>,NKm[5dP#I*$KN\&:428E.m!a6GOV$Jg9@%&;%;F$BC306O7oQ;/h3D%)+"Z;(L=n.4[Vd3/E08=^t+qe8c0c@^fXLMDo)Lo-1r!5VM#!EZUC'4JC=\K3u2bO!)=>$V.37;^rmjHPN,@S0LZXa9,PI+H@Ode%`!HOC.V>q3%,c4._"t\h$s[%m.6OJH8DG^.>6gf#_IH2T_4VO"^#Hi,FI7s(VSZj,VLDNH1mjl5<sjk[V\E*+1b=F#UW_ar9f+l<%d_*(pmV8Jq:jSjBeO76[#d,Q?e_X92SqH<bH;tVYAsf6;U0cA<rFr36ogHK"\DsO[UaI(^#/ool%-jr;,;4"ZgegksVS:\!C8+g_%-q&%UDec#(c#3n"CkJ<m%UEG=(pLN#6LY"WM-7#Ub4$a5-n_`%*4%4L?jR>D$5Z'L!D@Z&H,kO%M0]UATX?O[EIk7j_Iu$_f#%TU%2B3r4V;nU1@'.Qc:PAg47K=G'\1.pN0nN@c^'XsjWoc%6%KHhP=+pZ<7\H\ppkf]Old^9<&K(3:/PuReCgh];RacnQ949tjW<;n]%:r+kUT^'CJ8KBKdDR565!/htEPe]6/(Mi:9Ae=?W_JPj$06Mdn*Q=O0!7)sGo"LD,!G$.>Te,IM,=k8!/F%-,.Q2d$APr1=J][&8%/Ti0N.SAV6.Q?p+I7=Nj'HU1&IYLo>FcR-eNloFA#Q4BNoB\5Z[`2#Oma&H*&K=B$i>;U.aUY/fR-4m<J^TZJl*7E"O)72AYrR"(%J/(H%)CRjf[RGANE#Fm&Ut-GtXH'BTf:fd=Qs'Rm$]f^cXT<V;j5e'Y7:NG(#@KuDM&4r9;fG"(BFo*u!Kp_-F27nDmmdpBE/tcb%r`Bm)!r$@/cJsg*?I3?8Wb+'/7Lp@i3.LZF0;RN9IcCUONd<-6!'41,?>pi1?JlkV5i]gqnG/+]\46p9iJmS#$g`,ucLHM@00j?O%BE='Y(fOat++SJK,)@&F7gi3,`=(Ir"kX`S1\nk[S0'q$i#XI8j!Bk5JU=aH8kjZqBE>?eU50UF717r\lV%"tJNqt^T^`*XBE=-M%7h@=-<?I^g\E]^m.:1dHiK*ZN$Qsq,AT:d<:1GT&-BaQ&=8=tB\VjcUYC)9+M**^TJ&Nf]UT\`sdC"5?0"r2@>7"2RTK606Y3u'"%>VBeon<I;7a8FVn0<r^n+m7WiP/$JR?6BbpX3?W"B%VX1#?#:9fu:,)`CG*^`UI.1Af(?j/LHD^O4hKeklF=*Ss\8G6X.GqJhaJ8%!i6agg1*ka`i`s2XSr4`-O36up6B$U8dA$Ep6B$%6@/U+)#HoZ<[rM&829h'@%>Z#KeX1tB'<_bUA=t"\f:57rM:?\Ofr0VVS\)Y%Smm*%Mck8R3r"0=mO6l?YP]2D.E9(7N*WbL6e;#ig&*"i;S>>p;"ZIsWDlAXdAj5Y[*"#JK!C4*qG&d=Q!g];Q2smBI3mX"VFmKq%@p]P^T[3(s@][d([OK51&r\tS0^MRiN\%Zn29"47QV60i6],mDN*5*hMbf9!.E9@1A#@K^#*D'`Lbj;l_8Sp*g_1&nBkQGNmH%B2%\R0Y2LJ'0`mKGWZ3#MV^Kg5+TNLA?aI@4e52-IQ0!mjaB1:86H@Y(OB85]i@hd[6?e[X2(`(+Ufo(C#c`_>E/Yf!-cLUTYU+AY*r%0k,pZ5jm"E"\>Jb;&OCu!UuUqX"ndu9_IMp0embs5q3nZ(pU9c!6-UC'I3;d)$%Z^TOPjR+p2LRr]2sQ?$m@;_RKTF[*uk.X,ZC_%\$;Y.?5MdB:T#:7^)@PeFrT0#F#73mf\oHApVk.RetjYp2Ih"!9c[*9EAO.\@;Mofh7;3!3Ue+):`0id_ZBjk!\&V-!C&l$4+.PC%4P<5,+CJ"GAf)UuJUg#eNsb7tP6fD1Z,doNn#>tr#n!KVDIERKa\<8:*W_F21*dH:X\L'%,X5NjQ6:NlbeVM.B'WbP6&)G,B%o,D%jkV](r#fP:MNEDfQXQeq#1k'/@l'V'_?)ZYSQsbp6fcm.>lZ]f]W)AlN`W+\VA3n3%K=`Jol3goWH2S@k;0[W^g4Y9f=CHdIa';\%h+):sIq6>l%p&/d$%mUiFr&I'ge;L1X27T$mTs%A6]22t4>Ld&+3].=i6[-tf[^-)BN,2&(L?^&64Brbh75#Ir&B;rkjeNiF$F!#%AZ#npbGqCG#K<LEllcAEhUZn/gbl[la?nch_m]X**OB]#A>:*9gDA'VF-l0YoDIh"IbgkoKB96&>&/DWFYEobP'#F)C]u&9C-e@/%f-]95NAOO%9A/C)#2F-r,itr2K%2o_2K9P*jn6Q(%C@bF7Ol:bk$]_mA:'=d6E6&TfF.eeQ$%b>@GU5N9^+()_h%BJk5P$+RTe%D%kWu:u<jGqjF5<uqC#Q"C2Qt>ul2Q,>9l%'JTjaVINp'd,ca1m>m70EgEkhf@R0ler^lfdiB$3/k$Wus%$rr[i/1t>P%kuTLNi]b+%PW:r.Sr7ZEJD!Qu;Vq!9_4,q<*:mT4#E(3I=F[s5>%uj0rl7h7?pE-Zn>I_7XN5qqKHQ%/g:@?/L+'@J,-EH3g`I5B/D)0?pEQdj%?tY9^5&q(kSGlL4,:YI7]_]^c"b]d^aT6d'Oo_T/kFsCcT`0\0"1X9GD93Up=K&FmV91N&$hf5CSP!r:@^#%up(K58'\Eq?m&E,R%SjeJh4hg"`'ujWJ7Sn(aQ$0>k$p1#6c5H>r*ZX/hRF`?uIl/[D.Ln*`Wj\LI:eS"/*,0Bn94&,XRXMl?0!'ZDI(!MSb)A`]e)=a'%HM24dr"gLU:VW[(>^FjD"6*/E$Jhu@jFk`Xf%8g&rIFRYQE?ql=p%`Nm)oe;CnUsVhf#8o/TdS"Ao!_L'0?]H6XMh_\8nkFgqEd^%c#1G]bi?CD`&:(1dFolc^5l;D04Zp@2nmVeC+:53Y]#*cd97D'fOrCUF3^?I+1e>R4g=sa\NNdkqm<5>/2`,K"8eBO)&Nr_!rEa8%5F(pLm.6,?ot"44hpN*go1'8Vs*/[ZHUmFeWWQ+@TZD\4$`osm`rbU3@"%Mq@K?+ME-jnOqZ1I>qZQUEYWc70iW/ZmeP/C5qrc7)%_Z3Jm!SFk`k`@55"0c^Kd"/5/"0c]pojJSn!SFlsqLgjK26_"MoeD*?QQ/h`C&q2jr9i):4IsH@&RgS-&<=Fn?UU:@r3>8Z(2:t-%eH-k'aBQ?.0\$5`rk;G[+K,quq5P4W=2jMV-(mNR!^InSL*FM5)6%Ti&Vcc9Y2cKp<5qd'fOC@s652e>rEaS:_Lqf[h@N$d@>fnP%[eetbqgmQ86P3ab%M7-:NM20tf?3nd'G7e;!5T*(X^470lecoWO[.FurXdBD=>(dj[/bHl][[Aq;_:7GWdJ)*+:P4k'LBF_$OBZ_%!'G7>o`E!lqA#lbQ[/[@Y^[m=3$bJQl)mhujO_94lc#-c=obK'H)h_mVHSML<a#e-+*[B"_"jbPs)APQJG0t9rf;CSTRYc.VZ5Zt%$;dbELY)QG%g>5S[t+<>5,neM\ijEN$OFZJ;6t&QXr$#u>/9frSb`l5/jen(\5s'BXi),Cs2X##)-$XV4W]\WRj%pc='pK\_;YKp%M"H2PirK^<NL!p_kAXksNX59,gi'R-$?LH@eQ;U5@J#')eUNYi'8c]aPff1UWs'oXAJk@f0@^,%l"K^=gspnI%W<'X5OP3F\<[-k%5Jmo<H25F3oSd:f!,c6kbHf[i%12')T'?K4<<Vtq0>OGg^^a<O..F!eYOeG%61]K8nN)_9V=d/G7F9f4XYR5+Ha].U7F6S8!kq;>%e1O!o="b]QR_i+IE`uD/eeIgZ/KfY6_B,]\"Ka->Y?HI]VD(*&s2`5b;u"O^!Pbe70\k/L>#Ug>'W*aAA#h&;AeeKJprdCQ+GF01%edJ[/d$hfPWWadlT=8!5JZArj_[LUY/V/7W(%h,s9<8,K/TOp:PFS1^!:`[B[DWuqP?r!\g%bhUej*cR`9aK-TX?O]ndpZJKcptP%oaRX*&@qT@PX.\T6rDMJF(#VK=A-l@S&#q0953Qm@Z`@#!r3$bS3aNHStZW;armDeU)4b95&,rQ]aQ*cG7_bQJ=Ma8CPga?#&*/n%kT,?H%FESukT,?H%H*78)`b.o%9.4@FLB%l'L<t&*9`[+R-Tt'F'M9F(dud&'!pU2W>_eaeIo4K&uF#Rf+PFM'%uUB8'N?3nIf[j%0fq"M;TU?0>%2Y[+t`X,=Y2?i/eMWi7U&O0mY0/jrC0g\9]Ha'.Z*-S&nrpP]:k"f4!LdQB")NP_V2,`\3u^,A!^JK*OM-"*N#Bb%c>Id`&tu3FE@ioW^^ROE,H`>)GGA+$W,%7C"_R*5P,PoZUqTra[DX7ce-X2BEmLlt;G55o9*D7hdFJr:it<e\YpaCEfl;iMWggTL%'!nVaLAXYR/[<3:kZVG=q8Rqh7U&O0Y*'X#2agkCbc[*Gj<d9!9?^.6Lj6*8ee5<i,c:G8dFAl9X!FRlI'fq#<[P5m<k<WM6*[W:%LcM37E6#VU&Nf?(O;`.&94UpfN^^nE9oc<6Qt$^_2"O4=7a/,n(g%T:PnDJt$Pnn&.NMq81#!m]PGR$65oh@Y)6mfB=`u>?"tIk@%b(r>R%248UY,KM+2^jT%2hRD.F4:pNROV'bcX.PEa!,!$#^gmFLo#op]+*e"7L\*PG6>c]6nB(Eq4s>hF#:(?PU@eXIbhY3Gr;fh%!Q\$@%9"k(mo#ec=%:E=L_q0d;3_`_Emb\Vb$U9r&T]KIk+L0B9PVXGBF+#CR9.7l&TbTslrc_V7a,^K7TW('>"%`Ni;f*]psi?t%HPs)na-hI7"XZYY`rH-D#`jQ`(9GihQ4I^a_`Y?EOGEDneFVr<2_jmA3/.[r>.tIX/AL#+\]Sf=-X^Ba<]Z,&4N(!\T5'\]!7\<2%PrtjV6@'dc)2U[dQ%sJX6n04LnrTcUK]Wa.XJ&TS52MCH)F@pu2VsODL0`<A+e:KdpgWd_L32!C.]lugjN9j$mSGIGUS_pl.V>8t%6^Q5K^mkH8\V`[u87rB_FV/DW!S-=nOuIJ3AaO:EjR:,nAcQ&d&ESbVbWn#T(Jd$p:l@-\1':Co?X.UY'KeAshN6#$_R!fI]HJ;C%L90RJGXFN-8E3moTKM:BG;NQ"J]ju#bo>*OTCS![Q%tGU4c>9WihRN3a<k\q?[52o*D30g;]aA0LQlT==!#Ms/Y_!,?O9e/G]%pI%4?CR@+"=G#_3KfLG@t),:Rcarn8?g[S1rM79#Y(2=KQ*JS+;[?"cc`=;'&oS(L%]B7hRU?^?"JdW0tN:;iJJ1#0`/[AuYu*1%s];%!3\%PMQngI!29dN;N-#a!sUj??])*AB)p11_,?5?3<L+Po:09;)pfHFX-a9D+,)LYi54;Rg]?lh^r-)%]/'H[`<)kQgC6>:B-<HL%Qt#F*O@a^%g;>lPWANC2CXo\hLm&+G=e)'^N.!\g9"&+q5eEdIO@faO1%s];&0>XEV&gVI!Pjm$V&9)M"s>QJ:l;M2B>CcqD59`+%MY`jh'Ot]\n_jn0<R^O$$j=\Sp?rE;;>&8n$m83QLlCH^TOST89L:PV)7Y+]K"7L><b=pj>'QGPL<Pm;.>STnAL2"$N$IBd>q6=,%d(Aei&Xo1>F4J+l$??Ml,n!5aSKS./`VO'QFqFq&NfYR(^l:S6<7,V#B5rSjM8"],#e;aEE0SD2,BVk/,NR,]+r(PRF+g&#6;*[h%PY+H`&TVLiTfG+GNfZ=i.$]gI,NR,]Z:3[RE.m!a6E.?Z;XU#!jN\<g.V;OsK\RG37#*$E8'%5EjAm_U%nF_>[I;;t%EK.HB*`Va%FbZ!p[LLOpEb>XY2BE#l-sirMjTrCQKHTa6Q6XlsoYhD_O(29l1kTh%g_iFlL5E(KQX_!;lWclo&TWqBpuB/:FC"_[6FI64!B<F6%$mEF_U>Q<f1P?/KX&'cZGG5L.QRFg[mL16bs!9ctaIOK-@n@8OK\RG3j;eWQ&TVLiJVL2M&RsHf/E3G#ej*o/O?5hNOBW`_,NR,]%6=*P8*$KN\ON(3+aUrQ+#h`_qLCbP]Va4WjC%8mPh9NCScHeF/16T@:F8PbM)@Wqba_8UiOP8k*r\WBBgjVZ[lHqT"KSsn%pD7N>%mnTqZUIXe"L8KRni)&rX\FcL4JP>NYZuWd$"mg=n\Z3[3&3A^u2.5dO:n(s`@5!Dbjk$UB\[GK6]ICSffNXUod[70q)T.ccgMQQi%XFDWI['77Y]>Jhu1qgY?U7#HL!AN0GfI+TA%SN?f[Z3'`!uu<OH2,`->m%5uWa/tK]n$L3_5&aqfu#bffsa)E,njW)ed?'mAf#OZ%3]Bp;n!.86@i=hY&=PI[(J5o]=nn@F6Uo6VX4FMe(19[]^i<+!pD6>_#&WA`di_Co.r7oLB/je'7B>#qCW("VhQ>c/?Ld(CEZ70B%7C6AWKB(,s=)YQ_3qVU"C7J(oeTZF16GFPdRZ9-eVEUMB(]4)k+kt52Q%`Ii!l"e?<cArp@&nM@Jk5a%`\T[@r%"hcre8Vfk?2A=%[5b1qbs$(ocfLFEp:HVJn9L0_Q[(NcmtC&!V_`pcc&>n-)oL![`h_\io0R;7@X?1)QQ%SuP=$]L[rKr@9hc#g&Ij<I)>"u?GF'A)%/+>WEpr\$\8B*8EHBh7j?jfXHD?i+Joj$S$1JbsVH&t(cY=lcf$X,c##(L"K]U!l"*m*)qZM7o`Poh!//(q&F$@[eWN6<'AX3P&p%Z_R=o(5k]OW7RqiL@(MD'PB(ZTfU(,S(U`hQeutNkH!rK^24VrmgkG9F.':ZH08_+;/aK<H@EK0HaWI1H;f_'*;4gN^oZM&2jKsV%cV.]@(%S#"]53Lt+HKrGPLL>dJZ7>9dIP3>cJe-gkOoNHTubScW(rN.L:Rc:?J!AADrWe/jT*2B$hk2`V6e9V[$I;4Lr2ki=+-VP%mlo*>=WB`J?>[T)JT&jfjtG;d1QZX,CKT(#7-8!fPi#5#*7(dQ)b7<ThXWS+01mKpJJcS,^!+R;d`-Z]M9HcqHEXufZZT)^Zp-56%F-52fkBurGkBI*"D`oU'MT<n5eQq.Oi;)4M9cn(0rROTuVjY]Oc.o8#&eLAfGD'7@Gkt(S4OHnCb=TH+P,K4NF3A4>GRB?i\qmIP%De)5p)%5!KG]WDLe9Ti<e.RPe0CGFWLhj]HFd/B,Z#U+r9&8U\Qce%#jUN^cNkWO<Du\73]<:C1e1I`%r&2gmb0Q?X7tVhUjOoPh%ZuF5ukm4C,-c9]F:1Z8H<\D`c1"V+&d"9H3XfOGC&'atX`PUcD>hYZr*eE#('_Yb5:/-W?im<Od;*DTc5<rERk?516;MS::)&C)5%D-:25Banp?C>k:*L%CriR'-KlB5tF\?.+d[H<Wu%cWd7$*VY)"f"^Q,gs5`"SF=\WK1h%/)_nbBZ0j!.'HW!o?k-?GY0fT*4AgQu%)Egq-[_DOFLN`)"+C_YY7ctJk'M=eaf&p-Cc&3*JeYsTXH'TMtq<8Nun1!>JMk'(m%=;:gAC\.M@-N1#HbtceDsnl+^=7fTo)tE7%Kc?C&0?s(aKEA;te(m<7I@ftXJ6S1"Xe%``)N6kP']8@$g0.\;W:niG12thl)nl'(UT%;o/+A@Rrelb+V4p9-YfMboq>7_-?B\;)%.!riBB9d*%GRWC2?8oZ+CY/4h?S(i(*m:\Y@S^,W\<3IkD.:+WJ-GcTT)K%2>L$]b-hC.R^R$T(c0N^1nkT$udP0$g1\octo4`'%%aka*Q_Ec6pE?k),Q0`/P(p-"!TB[6:FD8KNg*..E@k2qDI(^e>m.@(5a^Ur)KBCPOm@k@K?U8UDZ+\Y%*ShM*G@_2Lm?$M#0-Q6h%ALX[]Rd8!-*sP2"kPm-0,Uq%La9)3RB(tnng"kr%*a7r^l-sNaVR4LO#OT,uXkR[[2uiVLkqkS2S*c8f_SAiZDeX>o7^Ga_F4VD!%`pA?%8?k*n4B,HjCY[MgG.80*&hh:J)gJeo8@L2GS1S>c2g:jNYG\?V%MKD+>+Fs\=)5Iu^4!6NgiU.92so^n_l)8[ou9b+1u2as%Af',f\MAR,=iFJta[sMK40"_Vd:;[m'd"Ha^F`0pD6=W*o=Y<QAaUsNl^S<DS(0YdALaUcPPs3_Bte$-+0u05U?LY'/cr&QG@aVi%.u\X2TmB[e5:k*-9NJ%]_X1%-b,l@TgW!Fera:5^Zm&gp:??QgMm`K(mbQ=1g@38%qoER/0c9ts5RdR_M^rTU8-bKh)faj(CstY.%LGjGX]R3\-*gJrh>AIcN<dAH9&?,t9H:JJoZdTEq3,;.1O/$9f2$[*dZ.\9,\..U_K@*po#2\Z&QrMfeQcHs/d_aQg2eQgL=<WKl%(5W2FId*r5QcrM.*gep+TLsFhd+\<0YOgP.g)4X0@@`sW0mPCI4;C8pV_<(uX+eu]ZNJZ[W]]QdZFT(`Kp1e=B-gL154*0Zb?3%'%^b%AAW];[,C?,+QO,!YR405]H/;@k&Wcs/Nf7(3i#hb$XBm0=3I(Z]5gtP$VGCG:/eU5-WU+aO[b0TaYY4;o:XHLH?c-@LC"ra**%dDjojm_$q#=?.A>$bN\2FaU8KhDii]kIX"1l1XA#0l4^s]YdA@3Y/sQ$Zc(:0Cf<S![bDI9=)hX?anm8LnT=5Ok5"7n9.89Au@@T%UOJ/f1ZfQ:AT76VGU;h"i$=4oq-?*2m2u&!MqqED6LA*Y>?S)!%]Pq==b'E<N>L)hL[:MR%-]lpVA30YX"NgJpC+]@"WTuqqUNWs%5TZ[9[B#9^m&1LeCu/6>Q*mU5iNdF@/YL@BGI35K^":8*O*A!eZU$.;9Q:f5OqD(DeC$:U>I&aZh2Vp6G0U;qoXKYDA>ikZY:(l#%rLV29A`e5-6=^$XMasW/I9c9l(I_5V$r&De5[`0Ib>J8Qnh@J#6VpNgY%WjE>d^hU0oW8aqUigV3IP[oqjI\oAfHdIm\4p;,9FO!%Zf:.c^*sQBY'//E194kXaR;.H>ahj])@m;H=#T`m5)GdQ^IK8URA610]k:YKY*oP$RiR-j_fjm<cmuSb?]dtBAo6q.34nt]@8[/J%Ubt>1+bTT!ZF&GtY=$(u;J?YM9(sI).S9?Hj`j[2:mt,uqP8:s;3fu"-T:60)85?2T@P>Z[oUQaVFF5+W/N!.l5hOr'j^HVWT!qq%'^*EVj&158nm1i%oIncPWNhJ0;f>tmX(V=uY\]kDm)4p%FV4<JStE(4EY%Z8SX(:M;2Nu+R,gHL#9M8*oenqegqV]7Ms\ci<?b/$%9uG@X9fNU+^'/ND'2Xq(DO:5;*LrMO'F$?L@u&.;H`dd;<+H8%4KlS.Mt"^>i:Qp$(4:Zk9DmW(oZ$FDi8jcS<tG94g9$&.(E(EC%,Z4R4HpP=A&BhqcP(5MFb7D#?6h+Et(mH>VI/DR*hoZ?qmC)T!75P&r]K/nRHktUth)Ro8:&/qG2-:l7O7&YnZ"H+$WaMY7)OSt'%XLP/Z6&Cj)VR*I>]I8e:A$8.(5M\>7IbnHS8!-+h+.q&`\(SBjmW$'@h(q'&!#_*GK?1r7.$h<u-Q;2Fj.dl/^G*6#BMC(KFKgAM%K'r#W9sKG8hj+#\6Ulb3nf0iYinc5Y'Q6Y3`PE%1dDTI8othulc]&=R8R+Hp5*Jm2X?=rmrl>`.Vs2&4KIT$ZrM,LslF$E<d(HE"%Ir(3[4;hEcim!V#e69eWe!Fae3kMHLVXJE)ZST0gQ/_/L-$&Rs-cV.ShXgC1r6bI@&HMk.lGVf/"'T@3He$U-a/HRahPZ9Q\Yg4]%#;Td*Ra54g^W;&odcOE7NMdZLL+ErIq.hq^G5:ZSj1O.sSR5H:G>9uaU7=\Kj-m.l>qbQ2?\[:Br(F/3Sem_@)JB0c[h\A3K"mK2%Nl3FJJm3aFm8U"Xmq3%lj$&B^kl#qu.IXt`8lP[>37ob_9utd8W:&@<LCt\jM!(WRq.c:,)L7Ys>ms$.CNHmF[ZAR]I066^i_$%-%pbiRkW)5\4?bJ2F_9foBJ7kHBp;:iE5tkhWTS=H_TfmYAG?F62alBVr2'+DH($[SY^)<:_1CEsZ5le,A0Iq/Cj$I02W`.PAH+U@D%KW\l*f[H5lNS.,0Sl?<#7#XkQ2j0gQ9r?[9Di>T_Z2*pVfbU"j*sRYlV;\.$Y)(Q3EK5aXhgOZL7-D1S;^'f6&bOgP%.*%tR5Qq?%Gjo4UB9KiRfWgs-=ZrD&U-%8eYe)9;bP8a+I^`R]3Vuacf$:(?XmT7O1pjKsm!>K5pe'(!1T,$-=3=M*[]3\>Blb[]j*7EcdoS/s%4L8Ji'@n_t)]W-$>qqLQ(71pKfrTFUSH`Xg;o!);`=ZGD0XFbbn!*9JLQHRTGlmQS\jSl!$e7gtFS:ZaI2GXB<?!=;>kqrJk/lO_%XlZjpD"W1L?G!kR>(6qFB^feJgccm2WA%L+mC`/"BN0Ui^3j>8RWI-c1N0Z^ENn.q9Nu%VmafD0nkB)uS$d%7Pg^jMZhMr)lWWP3%*CT3`q%D%lH$>"Ef]H!6\$G[0WKeqB#Y"+<j5AZM29.lH+R`sTK.QtjA(:=BcWOlMISfRt5Hj619Nso;\TX#'0Jk-r^X'dN4Rn9r%`7b=!89Tb\gTPr7BT:bPl?7l<'>rHVG3NJRV+[*1*r,WXSLX2r:78h-ZX16H2N4>.f:.ek@VTIobHX^RU"TTY+E23=5&Ab%cTB2t%310tWo-X'LKcCBt#VBVgBKj)dcClC(%Za/m':\"'gY!lnh,[;J::`WuXlY=TU4r#M\6.s+3pb,<nnN;^Za5]tSBXWQIH]pr=*TQX%QB9p/T'AOSmVt!F2qV!JS\a\t+ucp]hK-3g';+2a?E>15Vq"OgmdR"Q:3M!4FuL/>Q2%]if(QO)N`We%2c[E&CWDo*2)kE4F:$QY%OdbB:-$*bpI^ZMh5ruE>^Ti4#CqIWgp$B8S8h6GnlghM;SUrqSmuqUT?4JmL]0t9VI@Vj(IlQ=5hd(i4SW?P!O,2o8Nr*qZ55+k#%Uk$pVAaEc/H[,FYhL.NE(19Bc/14/ge^KZ^W>`.`#;IsIGkPT&+;aFb\S8jAK;*MGmeIWZ-?&D&[l`jLmE"_+o(7,QB@#sO3QonS%.l*Q@TR=RtkeZFAoX(Obn"mV_q3knHX&r=/MYWNP@^INH96K34fPBfBC3M8TLNT&`YA`4nWmp\1hqNnG@F;*#2e+irRe_qu4ZRRE%m!Y6_X(31%%bM?1[0Um'9msNTYN=;O=Vcd$3e"OuC^F@ZWl$B,EirZ*o3oIb\L)jR6+U"K4!"5IF4V@,G\qV[L-OQtBP)o`WMeK@%6Su-rb]&##oL(JCc&?VLU*c=3BP(G]KkQ<T(7H-!@keP>/2T0,30'SDAtbW\\6@8lbq(\->jXY"U7$^I"rrC8Lh7Ek).p<H:GfE)%bV6p\HD6g]AqnSD#LUa^1BYp:$q)lZisT-c*(2Rjbq*aU>PrUsFda2ZQ8j\4(7LYcnJO@7bX+)fKqoQAAeph<.NY=PKk:N1?OT=Y%$dD@BH]">,AtbWhd]jA./2X\44@Ct5bm\lFE=gAG1c'rEa$;Jfd**3Y1-Es#(;32</:1B6h\it8WH9&dlnq!khdD5p<OqqPC=dD'%CN`YCJF\I]J)G5o5JV=1!11m&N?#=VDc>\@hZ7n0T\`G?Y@^D_O%QJCdH\)W])N3RT]p]rI]uun-k%O$?D2d[#KBVZQn,O&qJ$';%CfdQj=".aSK`4482t]cA0EYN.Aq2%qJ3V(5.A]6KqZ$=T['>?L4JAX%#D@YfJ[5_ri!p7&S)S[$5iA&]f2PM0n>A>H`/8j4$,4qS%.Gs![%_fT5hW)jb;iiaEf)^59!\4e12SOCFI's",l;_2[E5*b)B(eF"XnKZJq#=Z-g1[r(r7/N,D(<</s8JX[QVXmh4#""pr\/j#%n_Y;](A5=eU\@mZa%,IUV>80W55]ug\M)8m^A$8rIUiW(@8B6TGd%(5eb<c?[U/C5br47qnph02hL(u[hgU#2HfWEsIjaPQrN?u^%5ikc(7JV,+gV!>qhNe+FI=:F'5FPm,87TcG_IElMF-dLE`[:tNO79qp#:dmSbHe2p%PV$T(4#\1AS(X><gJE/q@=I/].$4=/asoV%k+TqlTus+'b%)e.NE1L9,:,n/!&(V1*#bW)^^fj]%XkM?cQ"<F3ArP,-JFFm"llKNX*X'^l]>\G$r;Xp/45_7k`Gc:+_t9Tm"Y!T%qX8s9U(tR<WZB'aP4C/ZL,3#i3V4K8ne)k)4<nGUL(dB&PN=b67N]sLELGuu5:Oe:F1A@@\+N_F_oR4>[dO?#K>;c$E]JFY7^M9%%`n]PQ]sQM>Ku\*&rp.rj9Q&`hIHJ7fm$Y"b3nUCH:HrcBS%jE%KtN(F]f^TG74BaC@.l=,C"^jW@'Y'GadLoQO*nUK=6pZMF6T1[%qW@X#CWVM2lKK$_Cmn%XRPaQ%1t88qo1k+hK)*i@aba.LQ^7sP4I;<9L'-a1AC+ppSc<ttcZ8N7[S,H=B7<k]NiiA("UM^A-uZ*Y%dX%M_\I:":ffteUT;/amT:c'V(bbu^Z?_SKs+$$,*WQWt*BQTo5&s_)*!qZXJeT)",9tc]mfZoN=]+X\$=9u?%D)sec5mnbl3rfh%1*-b8=b^F[/]5u_Sqc8CIg91peAq)W]@.g/-0_I1`]0+MI"p\F9G5NB_Xhk!8KK_NH!53>V[^NtnFY\ufTp6gn-eR?2bsk%WBg)5%'aP]&!KTn9<:EZa7Uu7jds+X%IJcn"oqqW5CA5H64hAnXa8*5!NW5ME,gT4D>g&IGo'`1u*)(oCc&?&mKX8d^o/0>)1>Iq253P*p%kD=HGM6BFn6au[_`lT*Y;FY+NZ?+O:rf08Vg-t18:5s8/ZD;=MVjTCS5)buNhhG?-,O.VqMJG2UZKN5#->pJF1h*\Y)U'Q_0@#0Q%`EC?&GrjKo1Y#<F>/Jithu:8Lk[(B$g+jp@3VHcT@cQG55IHmnqPF_^/A_4P-0,L7UC7cM_G_+3!E4fT%Il$)8k;n!e^36%9d0<@%s._Q]F:+^?a<*hOGVR+X5AA(6,h"kO:%P!.!cYGZA^g65^e;,sGo/Kb8KjcCf4_a'Zh/:DAa/:b`k(9iME,Tm0V?.n34"&LB7\=s%574.b5uWb.l(JDfJ,Q)A#.CpdY#uSU_"1.o;#nL0D'jtNBu;o'0YV-*0#R];K7o]_e:^W5']NjpI#F[2dM-[W1rR&1.>6"Q%%T`K%'LJ^Z:X<O*aTt+gE_FF]*A`74!fu7V)AG<YB8jrBV*+B7"-*]#R*?*015"hY3D@h$[d*.Da=2d;AP_n5fs@g1!sJ!<F:la4$rdC`%l@A*RGRH\'eb3;?J'.KA8#Q6V\ilNT0q+9SO%Vq>\KalIjWi&uDsj(-7a`C&damhuFnb1*<a)O&<=ajgDa20dZ[6N#kTZ5je/JAa%qJh?iecSkF]:T]-]`6hIrqlP<,h[fMp$J+;TAAW,gUd9,r;):Q03%6*^*;#"rel)=[N6JQbknK3]Sf\b*b\`%]BS07FDp$MI\M=>%?MLGff]fjDYOp7hBR=u%aa6kH$OAYKhqZde]gPWT5Js\IHNk)sFA9sb%_OVoaogLs/9S1':U;i"oc+(dqOZ;f9,W:Mm,RWU-uD1g%:jJ."Ak['l,$7$!R@Fk&G"b#nb_)HT8(eCiAO^A@Q"o<"PiX^3*u3`16)0D0>SB*>0P<f$6l.+O5l]n5)%3>u&n[4ZH2&c-TM_';%To)0Ec#d%i=\2s&XiY.;Xq*f^HP]7d1H?A*MeC\JPVi6gO'>B?c*j[8%a++6&'/DPj-ImL,W]i')7NQS17@1R49.`L+;+0i@d[k"%4=BE2BNE33ZBR^.k[uS1obK9SQ!&!tOYSc8=]ro1#P8+l(7#Wl5a&h^57t5\Lh7XE%_4.:Ei+J&/c(mb-G;M+Jb1Q6Y,UB.(?%&0%l5@VuM,=&nDk9=:q#N[GbH`f(]YZ!5qJ)KB11Y^P$!DiB=CV^iok7Ur%3.,h,W,;h_ltiiEs'R1a9MK4:*p'Mha&HMK74B6Kq(YO%:qNGD7d[AKH@3pY6:UlMM@r-erpZSF:?R],SNhcI6eH^gW>p)g<ULp]&d61HL]*1(a^0EUI4XLP-".MeG+H198*R'TQE)QJoHfJt%5T,!"#G[@CZVgiBA!GE.FODJsoMJ@*jn-O`Y^V>5jce/[bD>+*I?B(DR"?St@#r)9PX]L'"HFTb]LWSL]d9S,0RA@:E#S[/4Mc(-%H$Beb&K$,JBKP^/K&gSMd9F\;oEMEJg0qAV)Qq*cfHXur8lgnkc2?ss@u6S&I"FKiUHprEW>lsd.]>_C3)P6OPWd8qA5>FO%n@e8%,`G1c[mt=b*p,i=3%=&Y6(^@HqBQ_OTU66aj.qbIKmXl<E!lF=Bp[!jjMUO+d6X8o%q%Sk/7^>oO4pDG3RGRIH.LWbX2p0lNQZ?&%_#X=N1*kU&B48+n\;,I.!]g*qobRK7HCNIrm4`9VodfP5p96kQU=>d%4A<ob8Kcf@##Ut*FpSTQ>ZX*^7%k"^0n.FFfBV?EaHME'%8;TK$HS?qjZW,c9YO;BiO,(S7']u)CO2EcJ0Frk_.*P%e*lf_"_E<>%eaa+>j>'V"W'+;o(;j]p8.'i8D/<5U-q.nb6nZZHSJ7/S%CL@1"_9#qs$U`8ZodF'/:NA;BF(m38S2_kWEd>Q/OGTeS"E.u:^ftOie6a,?BtY9HE0$BK.(L]P?^%dBOpC_H=r&=rD@]B(fC<Jg%eq&7.T@JAf^c_aQHP/%9J%HWWc\$R8*Z%7lP%J`4[--mCHN](t4ip0?j93'K'^VN$%g@;.f]+"=OYTg$3'C@o1U#n[BmO'"S$)"p%as;7)Dika"NntnA'J02:3Kg7nc]ciK\2:TGI0Wd"90\6`U7Okjd(5ql7dI59HMh/6E^lqUSsUKl.YsWXX9\;:EHW+^itJgo/c;#E%3d;b,B<mR?X=$NCSjX"'hl`:Do<99.m@dnu"ag4ofL)W$8I'Sj[>1J>'^_T-:Vp?g^M$D,,:A/u"*m[)e!Im>Re5Ade6pDViq!$c%>Yr#JSAE09C'GJ%=YdLOYI*(9mC.C7^-@6CmtZ3+XfM;`pjdWL-6lG]:HUffa8Bs*-4t;p&A]EJ(CbsZb*FO0_m-L5U;sRYqZhL:%$MYlU0`Lc$90X6^Tn5GLZ8jAh6fB'npJAB?iJK&=6fB'npJAB?1YfmQ)*&l$*\FurOB'Lp9>MfHC6B?KS+='K5uU/%Rm_$9QN04F%iB0MJ=\I^O^;lj64b(Y"CqM3$'"ISj=g#ONf#)(iPgU5/HV(8h-4fFaJ\3b),N?oe7m>OicNME7H^V?`re6adMXr*&+AuY1UcfPu%N/PP8']t86WR50[M7FU0N/Ia#$(;_[cpNAUD[1U`9Kj?,*a[,p82RNK:!@X0+R3gV/7ICp^p>6<:e3XiB1TXd<%@ij,W3baF=i'%%Q\?tD1P0U"4tGW`Zid9:l<2VRXUEi;ZlWDS_[kTKAFbu>'9enWeX7)+p[C29^i9A>@b)$:Y,e0t!I_t7kb%A=IP;h2@Q]JaHrQFm%Bb(D%*fa\l8M`.O`^;I%MXaN%LLN@[j.R;#`HWTBG]K4"1<;R?-Y+*LaVb`$TZNG6`H/Sk.*HqnPh)Mf.=)ZL^s\9qJK"JL.W3/o%`Y:%sj0Cej)h5%L(sYF9oR?;lr2m]6nH8E>)4$u?SsZ$B.a4DBU^'ATT#J[,7KsCV,'dC':\.V;/?V*(IM+@PWC1gU*Xp<QU<jF)%If:>ZP>#54,!RoBMZQ*Wpi2h@.Icr,>qWn-O-F(@A?^C`<Z'a_;9e$.<Odc?$#GX_8>-56NCn-2BmEa*Rm7UkoE4WFUkR.3/,<DN%$J1BC3'tg9J#fsocChRZrQl%LG#eS/#Ooj1B0iL[1&73O>oGU5Z]@msNss"qcqok09UD!/P`<8_O^eCg+hO.#n8<]Z*gWL-:D*jU%s4d4QINI-/Bg*6sTib)A:Q<eM&p$'tk!ROf"O.>hm@e4>GG@;`P@9l4n9bA!0Olre*b\H5)UcP3]Y`W)Klckj9iso(,/QErUOXbR%iB3!2%kk-iXWcRX$AV.O^"QjRLYAQs6T^%V;p3_dJ:2Z#_m5Ni'9fp$gBD%"0b*s>q8g37_$B.>&S3"0InSbjOM/kB!>Ko`QJt)b%(l?"59C$6M5#fBHEMb,&I44MNE?C)8:u$ic4r!ab\5*7;&!p_XA?^H+OWd8P7eM<Z'@hjCh.=BD</-ChT[@`N-Gn:f*!KS9_g)s%%&"h#aaZb)I<\PQ]pKE2u%]r=iLOKZ>Vj=CRJbo]SH75$G'9BUO:aMapiBAHg`$KC?pE?rRn<R+3Mr6[-:\,@Tdhh_q;=#YBUQJ1G%,jiFp">:,];"3YoJNq7E(+AlD'>,ac6_PUB.@`^hJ(j)V$2k.?%*KuNnroEAFh7@\$l-2ZPb3?[>c155d-3MnP=jNUO+JfDqKWA.%-SIg"/WK=RpXFXBRZB$=c`R.@m@=s$:7!)9=H:gW@WF.cXD0uRLIoG6j"n<*_\13S#1qnqZYB[\q2AmRaZd_jGTU98%o5K_7#\t>%SmhEs6([B(4p?4pB5(8*LOqW&jIm]W_\H%1LOqW&jIm]WGE=2E@C_'\HW5fSB=P#o#ptm,CJuArBJ@7b4Mq47@mG<aL9[I8kSk\;%2o7:aM\5:&pC`Gj&P_F"NEm[A2"]4B/O&Zq*.sghV>%pgCZ^)XLe&_%TceRjcNkHG".qH`7i$6+a7*6b`u!SW:qS.fA+6t*<rQ@:%8,;n_H9;o3Tnj4JHlS^i7=6NC6P1Dtpc)%-'_2"J^6VR5-c]h$/g7SCXdZdOW3dVJ\2n?@V:X+-"_b^k]LKHJRiK7WoO"n,A#4:[%Be7>#^*gnNp"ueZL?#=/gA/-dW4fNBJKL87bHO+*ou,p#rcZPJ6qf`ElESO,?B6+Z3TMtsA]B)\TCDTh!1k/6GS2b-4IH+4HM%.u%J;5O1;g]s,7OH)urXO=2CA*%uj\X2CMXVm)AtTD?7<lNeiScRDT+"I*e?e-p7]#]i't(D,Xm-\/Qtpd5Cn?`*$r+%(1`+J1$<IJ)%8_l'7kVDKiWc&abU:'2t;Od=HW!Cb_CtS60pB]uf:g-Xg*[atT8KQ_5a_7>d\3_"WT&_k9TIZq&GOQ[M-iCY2]LScB:Ei7M<U!*/%K;!N#`Hs#i6h)4TpJALM!>e2p*nr'-]E^mqSj2[Uq8I]$)3tfNkRh?&'3EH?G_9NVfckI:GX(6O+Mt,kFkIDdZAF'r;t(H*[S#jC%47IHj`_^$%qJ+M]F*);uY=<ptlDmchc#FAo^=lBSe\hkH30=,&q.``Y#4`4*8=&Fa-7^MaF`de.0'__>V@@)q?d>*6S[CjFCXQSO%(&Sn]mC+I2:hM@'lTB=@W3\sa2<q8?B8nrfM4DS8Vm@]nB2&ZjX=6JI!\7jt0gh(NXt0@"H!0sEaI/I)eGXc?CO,3I-,Nm`m3O'-%W42JE,pcK.NI#Bi>B=n)W4,702<q;@Dp<87Vr$-'o@@I5X\"@?Hf[72b:j?Fl?H2Kn.iD].B@2&cTta8N#KX9^iQTNJQ*`@[Y8Nm%Pk"p2A+3W(a]$a86sAM]C<EQj(SnJ0`WN1LlC$.=XXi*[[,+uia\V>?5/W!C]%s]drao8^o=(&^9>kZ-0DCalnpos1JqEoVK!nZ\%[l=QM+a]ZeaI[k-+-*&Y:D--lptH0Mr&jUaBkqpV(,JXU)+lWV^B4R1-GVki+=_5(&Klr23DSNI!W(8/QVR`TA25\AIto.J@r3EX%_-WVH0\TQ5h%H!;=0e`LMsT]OCLa?qQ3a\]n&i8<?<`"'%e\PSf1*G3-T?g,D:E?r?5rRkW7U`I]J^OND7O2qm6ucJ\0YI>gS6YQ%k,u/_,--CY-&r,O[0BND9\X/M\6V1NQmWJkm7_7&qH5FH@d_rV3EZ[3CBr9+aI0DP[4Brco\NcTa[b,mjNt5QOHuV)B3:et\#596%@Q*cn[uZ(BA12>odW`(hJV;sV(DtX?oHJrlP?On]570#RW1Sjh#qC'frEc2k(k/YH(s\g5C&QD=U%ZuV21?ka5/W8Br"IO)o%UJh%rpE?G>J-46'kW(dD:@h\<jihjXCO4[+KN_&OK^aG6)(e)%2*M2e_\X_Ubt\TK1,$_IZ1qi+AlA@bU!=Z9,o('3gYMj95"os`6BTu%a:`NdP!H#["n?4p-K-?'r0d/K4N_Y#&=&&+85!YBmD5`P-sB7gBm:I(7F=pG%7SZ@Pf"6`:_X@-d83e)&*mm'>(/h9\I:!C&cCTQ%Ai7nrUb@IMXt-,9[1'^/nT-koD31[P=sCU:>"'ZM%u,CGe6A^))YM[[[mn'=5CZP[>I/`Uaa6k6>Pi^&RY\VaKF%P_Hre2%D2-6V%P(<Kq6-+p7%b$Ou?H?]'ZBIV]d2H,CKL>ZBCLIKQ7m.3GcY%rZ*f`S4V7"+b\?(q<$-'Y<j$>ZR3B1Lba=e"9ZsJZ_pq2i"--Gn;%akQa\AO$k_$i,b-93BCC8)M^]cfMO93n[F$*G&%<QF`tIlpm`$:Ei7QQ$H-YK;hn;X"8sRP%T8Bki_DbIKYBl5KSY/j95>9'`"HD%%n1pqo&CbdOYa'Q7d)30j<l>K,<oq4#4%od1\-0'6jrRL'.h38TAqNEO4Ic*ILLRC`e/6-F)],OBYP7`aH,'7#PlK:BB##m97>'h%^*]+i:*/sNo9oe!+?uqS#DPGV$"pQ1H&M%P$h_V=e0bPI;53X,8UE,ooq=ETag+#Xk4<e)5.&2Y[p0EFn3pcX"O.>hp7\_:GJcTW%P@:;@&:X25$C0[/@?/"%!]Hj6cf[/Z7o@1N)L+\'6egaZSq_\&Q:PoWB4<`,NkD;W2qhT4nK=Rb%&3:ag@)Bi>-GgKj<LoI<i0E"%QlOB.Y"5+>)9<o\6RoM,A5J$tH1JMKIMNd6R_/)GhT$Gb,>t`n&S(=>/+id&YXd[G:p_Ta"t)idrXQ:_R8<qgHY@F9`Hir`j#D`k%XQNB+>(3^t0#Pg<U%l^>/<<(46T''jb]8;CXQD-.L@XSRK@ErBT@LgEqX;qfm/#-&$LY3]j^lG6_-Q30,2PmQOP6A!7GZP+TH-Dc%U%LJE?p-Vu*gGLpPFkE8S<Ja$?kNtP8.VaG3oi*;WAG^q'E6i)as0cJ-P<-B\'#im4Hp(!4WFWNP%JE+OQZ'4GpoNP>:t\/H77"$%TUCAJ4;?rRG*ke@Y];KI4T[,Nli*SP9AMg`bn7+;>&DU4U=A$T1m!TCqI.mJIeZ$OeN\WH/QMfRQ6SAKILrVM4ce0eFbR:=r\Ii@%+/C9N@Io`6'9fWqgWOph@M86goZ//=KuSuU_d8G1P-Rs:2DB\Ph9E<XGOl"7a;"8<`'C-@bt379'_J)l%g@AjH"n&c8^-9md"d3:%$(;_[kX.Y.D[1^/%%@dMm5^g\de@uW_J`5!8D):oqaB?.B]!Vi;]3+4r%BSuFqp?s^"Yd84oVAKfkYa]c24\-g_dYBQUG?%g.UYR%JVW?_EV%V[h)%;Vh'AGMj=9L)6e&<C0CNkP3?Mn[-OQ@K8FcR1%pq[HZhRV8K`AE*LWs]I*@QaT.@PJM2nXgYFpXu,h01k3r,474%5i:qCm`ecQ(]Ln!/JIhqs.K+R3\Jp%ToR="HO6\3nhXUh?b6G=oBt?QQf"Bj8DidKm`ecQ(QLQ<e8_1B$[#^Qj$FcQ"?[sp\GZ1L%d/U!c[:m;14>aOZS[W5*UXf:fV).VZES%o"(\Id3:-XtYC;'h_f`N;=:VK._s6VG"gjk$#lbc's#j\1%h&h!"j;RBfZM/TbfD0XV%rk@"^3<&b0'7#k/C\[0M:VOQe9]E8IjBL6K^X63]&YR$"R_pnfI_n%X_tA%"?!>KY<SM`jS,\r59I?$"_dh?fhR$UXh:+g\k+CeO%9tT6W5R2p1B&KB;llcnI3RE->r!P+?-gL-aFEOXMqYuo#U=B~>%AI9_PrivateDataEnd