! $Id$
!
! Earth System Modeling Framework
! Copyright 2002-2018, University Corporation for Atmospheric Research,
! Massachusetts Institute of Technology, Geophysical Fluid Dynamics
! Laboratory, University of Michigan, National Centers for Environmental
! Prediction, Los Alamos National Laboratory, Argonne National Laboratory,
! NASA Goddard Space Flight Center.
! Licensed under the University of Illinois-NCSA License.
!
!==============================================================================
!
program ESMF_AttributeArrayUTest

!------------------------------------------------------------------------------
! INCLUDES
^include "ESMF.h"
#include "ESMF_AttributeTestMacros.hcppF90"
!
!==============================================================================
!BOP
! !PROGRAM: ESMF_AttributeArrayUTest - Attribute Array Unit Tests
!
! !DESCRIPTION:
!
! The code in this file drives F90 Attribute Array unit tests.
! The companion file ESMF\_Attribute.F90 contains the definitions for the
! Attribute methods.
!
!-----------------------------------------------------------------------------
! !USES:
      use ESMF_TestMod     ! test methods
      use ESMF         ! the ESMF Framework
      implicit none

!------------------------------------------------------------------------------
! The following line turns the CVS identifier string into a printable variable.
      character(*), parameter :: version = &
      '$Id$'
!------------------------------------------------------------------------------

!-------------------------------------------------------------------------
!=========================================================================
      ! individual test failure message
      character(ESMF_MAXSTR) :: failMsg, name

      ! cumulative result: count failures; no failures equals "all pass"
      integer :: result = 0

      ! local variables
      type(ESMF_Array)     :: array
      type(ESMF_ArraySpec) :: arrayspec
      type(ESMF_DistGrid)  :: distgrid

      character(1), allocatable :: buffer(:)
      integer :: buff_size

      type(ESMF_AttReconcileFlag) :: attreconflag
      integer :: offset1, offset2

      ! macro variables
      AttributeTestVariablesMacro()

!-------------------------------------------------------------------------------
!  The unit tests are divided into Sanity and Exhaustive. The Sanity tests are
!  always run. When the environment variable, EXHAUSTIVE, is set to ON then
!  the EXHAUSTIVE and sanity tests both run. If the EXHAUSTIVE variable is set
!  to OFF, then only the sanity unit tests.
!  Special strings (Non-exhaustive and exhaustive) have been
!  added to allow a script to count the number and types of unit tests.
!-------------------------------------------------------------------------------

  !-----------------------------------------------------------------------------
  call ESMF_TestStart(ESMF_SRCLINE, rc=rc)
  if (rc /= ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)
  !-----------------------------------------------------------------------------

      !------------------------------------------------------------------------
      ! preparations
      ! array and grid
      call ESMF_ArraySpecSet(arrayspec, typekind=ESMF_TYPEKIND_R8, rank=2, rc=rc)
      distgrid = ESMF_DistGridCreate(minIndex=(/1,1/), maxIndex=(/5,5/), &
        regDecomp=(/2,3/), rc=rc)
      array = ESMF_ArrayCreate(distgrid, arrayspec, rc=rc)
      if (rc .ne. ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)

!-------------------------------------------------------------------------
!  ARRAY
!-------------------------------------------------------------------------

AttributeTestMacro(array, an Array, EX_UTest, NEX_UTest)

^ifdef ESMF_TESTEXHAUSTIVE
      ! BEGIN tests of certain INTERNAL methods.  They are subject
      ! to change and are NOT part of the ESMF user API.

      ! Test with Attribute Reconcile disabled

      !EX_UTest
      ! test the serialize inquire-only option
      ! WARNING: This is testing an INTERNAL method.  It is NOT
      ! part of the supported ESMF user API!
      attreconflag = ESMF_ATTRECONCILE_OFF
      buff_size = 1
      allocate (buffer(buff_size))
      offset1 = 0
      call c_esmc_arrayserialize (array, buffer, buff_size, offset1, &
          attreconflag, ESMF_INQUIREONLY, rc)
      write(name, *) "ESMF_ArraySerialize - inquire only option w/o Attributes"
      write(failMsg, *) "rc =", rc, ", offset =", offset1
      call ESMF_Test((rc == ESMF_SUCCESS), &
                      name, failMsg, result, ESMF_SRCLINE)
      print *, '  offset returned =', offset1, ' bytes'
      deallocate (buffer)

      !EX_UTest
      ! test doing a serialize for real.
      ! WARNING: This is testing an INTERNAL method.  It is NOT
      ! part of the supported ESMF user API!
      buff_size = offset1  ! from previous inquiry
      allocate (buffer(buff_size))
      buffer = char (z'42')
      offset2 = 0
      call c_esmc_arrayserialize (array, buffer, buff_size, offset2, &
          attreconflag, ESMF_NOINQUIRE, rc)
      write(name, *) "ESMF_BaseSerialize - perform serialization w/o Attributes"
      write(failMsg, *) "rc =", rc, ", offset =", offset2
      call ESMF_Test((rc == ESMF_SUCCESS), &
                      name, failMsg, result, ESMF_SRCLINE)
      print *, '  offset returned =', offset2, ' bytes'

      !EX_UTest
      ! Compare inquired size with actual size.  Note that the two
      ! sizes will not be equal because the inquire option currently
      ! overestimates the space needed - which is ok.
      ! WARNING: This is testing an INTERNAL method.  It is NOT
      ! part of the supported ESMF user API!
      write(name, *) "Compare calculated buffer size with actual size"
      write(failMsg, *) 'actual offset', offset2, ' > inquire offset', offset1
      call ESMF_Test(offset1 >= offset2, &
                      name, failMsg, result, ESMF_SRCLINE)

      deallocate (buffer)

      ! Test with Attribute reconcile enabled

      !EX_UTest
      ! test the serialize inquire-only option
      ! WARNING: This is testing an INTERNAL method.  It is NOT
      ! part of the supported ESMF user API!
      attreconflag = ESMF_ATTRECONCILE_ON
      buff_size = 1
      allocate (buffer(buff_size))
      offset1 = 0
      call c_esmc_arrayserialize (array, buffer, buff_size, offset1, &
          attreconflag, ESMF_INQUIREONLY, rc)
      write(name, *) "ESMF_ArraySerialize - inquire only option w/Attributes"
      write(failMsg, *) "rc =", rc, ", offset =", offset1
      call ESMF_Test((rc == ESMF_SUCCESS), &
                      name, failMsg, result, ESMF_SRCLINE)
      print *, '  offset returned =', offset1, ' bytes'
      deallocate (buffer)

      !EX_UTest
      ! test doing a serialize for real.
      ! WARNING: This is testing an INTERNAL method.  It is NOT
      ! part of the supported ESMF user API!
      buff_size = offset1  ! from previous inquiry
      allocate (buffer(buff_size))
      buffer = char (z'42')
      offset2 = 0
      call c_esmc_arrayserialize (array, buffer, buff_size, offset2, &
          attreconflag, ESMF_NOINQUIRE, rc)
      write(name, *) "ESMF_BaseSerialize - perform serialization w/Attributes"
      write(failMsg, *) "rc =", rc, ", offset =", offset2
      call ESMF_Test((rc == ESMF_SUCCESS), &
                      name, failMsg, result, ESMF_SRCLINE)
      print *, '  offset returned =', offset2, ' bytes'

      !EX_UTest
      ! Compare inquired size with actual size.  Note that the two
      ! sizes will not be equal because the inquire option currently
      ! overestimates the space needed - which is ok.
      ! WARNING: This is testing an INTERNAL method.  It is NOT
      ! part of the supported ESMF user API!
      write(name, *) "Compare calculated buffer size with actual size"
      write(failMsg, *) 'actual offset', offset2, ' > inquire offset', offset1
      call ESMF_Test(offset1 >= offset2, &
                      name, failMsg, result, ESMF_SRCLINE)
^endif

      !------------------------------------------------------------------------
      ! clean up
      call ESMF_ArrayDestroy(array, rc=rc)
      call ESMF_DistGridDestroy(distGrid, rc=rc)
      
      if (rc .ne. ESMF_SUCCESS) call ESMF_Finalize(endflag=ESMF_END_ABORT)

  !-----------------------------------------------------------------------------
  call ESMF_TestEnd(ESMF_SRCLINE)
  !-----------------------------------------------------------------------------
  
end program ESMF_AttributeArrayUTest
